/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PoetsServer {

  public interface Iface {

    public void addDataDefinitions(String pce) throws EmptyArgument, dk.diku.poets.gen.thrift.data.ValidationError, dk.diku.poets.gen.thrift.data.ParseError, org.apache.thrift.TException;

    public dk.diku.poets.gen.thrift.data.RecordDefinition getRecordDefinition(String recordName) throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException;

    public Set<String> getSubTypes(String recordName) throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException;

    public dk.diku.poets.gen.thrift.contracts.Residual getContract(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException;

    public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> getExpectedTransactions(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException;

    public void registerTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException;

    public int instantiateContract(dk.diku.poets.gen.thrift.value.Value contractMetaData) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException;

    public void updateContract(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch, RunTimeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException;

    public boolean isConcludable(int cid) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException;

    public void conclude(int cid) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractNotConcludable, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException;

    public void createContractDefinition(String contractDef) throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefExistsException, org.apache.thrift.TException;

    public void updateContractDefinition(String contractDef) throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException;

    public void deleteContractDefinition(String name) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException;

    public int createEntity(dk.diku.poets.gen.thrift.value.Value data, String type) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException;

    public void updateEntity(int entityId, dk.diku.poets.gen.thrift.value.Value data) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException;

    public void deleteEntity(int entityId) throws EmptyArgument, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException;

    public dk.diku.poets.gen.thrift.reporting.Report getReport(String name) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, org.apache.thrift.TException;

    public boolean addReport(String spec) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException;

    public boolean modifyReport(String spec) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException;

    public boolean removeReport(String report) throws EmptyArgument, org.apache.thrift.TException;

    public dk.diku.poets.gen.thrift.value.Value queryReport(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, RunTimeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException;

    public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> queryRules(dk.diku.poets.gen.thrift.rules.QValue query) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, RunTimeException, dk.diku.poets.gen.thrift.rules.Inconsistent, dk.diku.poets.gen.thrift.rules.NoRuleSets, dk.diku.poets.gen.thrift.rules.CannotComplete, dk.diku.poets.gen.thrift.rules.PleaseSpecify, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addDataDefinitions(String pce, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addDataDefinitions_call> resultHandler) throws org.apache.thrift.TException;

    public void getRecordDefinition(String recordName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecordDefinition_call> resultHandler) throws org.apache.thrift.TException;

    public void getSubTypes(String recordName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSubTypes_call> resultHandler) throws org.apache.thrift.TException;

    public void getContract(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getContract_call> resultHandler) throws org.apache.thrift.TException;

    public void getExpectedTransactions(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExpectedTransactions_call> resultHandler) throws org.apache.thrift.TException;

    public void registerTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerTransactions_call> resultHandler) throws org.apache.thrift.TException;

    public void instantiateContract(dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.instantiateContract_call> resultHandler) throws org.apache.thrift.TException;

    public void updateContract(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateContract_call> resultHandler) throws org.apache.thrift.TException;

    public void isConcludable(int cid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isConcludable_call> resultHandler) throws org.apache.thrift.TException;

    public void conclude(int cid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.conclude_call> resultHandler) throws org.apache.thrift.TException;

    public void createContractDefinition(String contractDef, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createContractDefinition_call> resultHandler) throws org.apache.thrift.TException;

    public void updateContractDefinition(String contractDef, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateContractDefinition_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteContractDefinition(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteContractDefinition_call> resultHandler) throws org.apache.thrift.TException;

    public void createEntity(dk.diku.poets.gen.thrift.value.Value data, String type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void updateEntity(int entityId, dk.diku.poets.gen.thrift.value.Value data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteEntity(int entityId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteEntity_call> resultHandler) throws org.apache.thrift.TException;

    public void getReport(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReport_call> resultHandler) throws org.apache.thrift.TException;

    public void addReport(String spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addReport_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyReport(String spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyReport_call> resultHandler) throws org.apache.thrift.TException;

    public void removeReport(String report, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeReport_call> resultHandler) throws org.apache.thrift.TException;

    public void queryReport(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryReport_call> resultHandler) throws org.apache.thrift.TException;

    public void queryRules(dk.diku.poets.gen.thrift.rules.QValue query, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryRules_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addDataDefinitions(String pce) throws EmptyArgument, dk.diku.poets.gen.thrift.data.ValidationError, dk.diku.poets.gen.thrift.data.ParseError, org.apache.thrift.TException
    {
      send_addDataDefinitions(pce);
      recv_addDataDefinitions();
    }

    public void send_addDataDefinitions(String pce) throws org.apache.thrift.TException
    {
      addDataDefinitions_args args = new addDataDefinitions_args();
      args.setPce(pce);
      sendBase("addDataDefinitions", args);
    }

    public void recv_addDataDefinitions() throws EmptyArgument, dk.diku.poets.gen.thrift.data.ValidationError, dk.diku.poets.gen.thrift.data.ParseError, org.apache.thrift.TException
    {
      addDataDefinitions_result result = new addDataDefinitions_result();
      receiveBase(result, "addDataDefinitions");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.validationError != null) {
        throw result.validationError;
      }
      if (result.parseError != null) {
        throw result.parseError;
      }
      return;
    }

    public dk.diku.poets.gen.thrift.data.RecordDefinition getRecordDefinition(String recordName) throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException
    {
      send_getRecordDefinition(recordName);
      return recv_getRecordDefinition();
    }

    public void send_getRecordDefinition(String recordName) throws org.apache.thrift.TException
    {
      getRecordDefinition_args args = new getRecordDefinition_args();
      args.setRecordName(recordName);
      sendBase("getRecordDefinition", args);
    }

    public dk.diku.poets.gen.thrift.data.RecordDefinition recv_getRecordDefinition() throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException
    {
      getRecordDefinition_result result = new getRecordDefinition_result();
      receiveBase(result, "getRecordDefinition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.undefRecord != null) {
        throw result.undefRecord;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordDefinition failed: unknown result");
    }

    public Set<String> getSubTypes(String recordName) throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException
    {
      send_getSubTypes(recordName);
      return recv_getSubTypes();
    }

    public void send_getSubTypes(String recordName) throws org.apache.thrift.TException
    {
      getSubTypes_args args = new getSubTypes_args();
      args.setRecordName(recordName);
      sendBase("getSubTypes", args);
    }

    public Set<String> recv_getSubTypes() throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException
    {
      getSubTypes_result result = new getSubTypes_result();
      receiveBase(result, "getSubTypes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.undefRecord != null) {
        throw result.undefRecord;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubTypes failed: unknown result");
    }

    public dk.diku.poets.gen.thrift.contracts.Residual getContract(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException
    {
      send_getContract(cid, transactions);
      return recv_getContract();
    }

    public void send_getContract(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws org.apache.thrift.TException
    {
      getContract_args args = new getContract_args();
      args.setCid(cid);
      args.setTransactions(transactions);
      sendBase("getContract", args);
    }

    public dk.diku.poets.gen.thrift.contracts.Residual recv_getContract() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException
    {
      getContract_result result = new getContract_result();
      receiveBase(result, "getContract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.unexpectedTransaction != null) {
        throw result.unexpectedTransaction;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.oldErr != null) {
        throw result.oldErr;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getContract failed: unknown result");
    }

    public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> getExpectedTransactions(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException
    {
      send_getExpectedTransactions(cid, transactions);
      return recv_getExpectedTransactions();
    }

    public void send_getExpectedTransactions(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws org.apache.thrift.TException
    {
      getExpectedTransactions_args args = new getExpectedTransactions_args();
      args.setCid(cid);
      args.setTransactions(transactions);
      sendBase("getExpectedTransactions", args);
    }

    public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> recv_getExpectedTransactions() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException
    {
      getExpectedTransactions_result result = new getExpectedTransactions_result();
      receiveBase(result, "getExpectedTransactions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.unexpectedTransaction != null) {
        throw result.unexpectedTransaction;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.oldErr != null) {
        throw result.oldErr;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExpectedTransactions failed: unknown result");
    }

    public void registerTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      send_registerTransactions(transactions);
      recv_registerTransactions();
    }

    public void send_registerTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) throws org.apache.thrift.TException
    {
      registerTransactions_args args = new registerTransactions_args();
      args.setTransactions(transactions);
      sendBase("registerTransactions", args);
    }

    public void recv_registerTransactions() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      registerTransactions_result result = new registerTransactions_result();
      receiveBase(result, "registerTransactions");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.unexpectedTransaction != null) {
        throw result.unexpectedTransaction;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.oldErr != null) {
        throw result.oldErr;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      if (result.entityIdNotFound != null) {
        throw result.entityIdNotFound;
      }
      if (result.entityIdDeleted != null) {
        throw result.entityIdDeleted;
      }
      return;
    }

    public int instantiateContract(dk.diku.poets.gen.thrift.value.Value contractMetaData) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      send_instantiateContract(contractMetaData);
      return recv_instantiateContract();
    }

    public void send_instantiateContract(dk.diku.poets.gen.thrift.value.Value contractMetaData) throws org.apache.thrift.TException
    {
      instantiateContract_args args = new instantiateContract_args();
      args.setContractMetaData(contractMetaData);
      sendBase("instantiateContract", args);
    }

    public int recv_instantiateContract() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      instantiateContract_result result = new instantiateContract_result();
      receiveBase(result, "instantiateContract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.templateNotFoundErr != null) {
        throw result.templateNotFoundErr;
      }
      if (result.templateTypeErr != null) {
        throw result.templateTypeErr;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      if (result.entityIdNotFound != null) {
        throw result.entityIdNotFound;
      }
      if (result.entityIdDeleted != null) {
        throw result.entityIdDeleted;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "instantiateContract failed: unknown result");
    }

    public void updateContract(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch, RunTimeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      send_updateContract(contractId, contractMetaData);
      recv_updateContract();
    }

    public void send_updateContract(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData) throws org.apache.thrift.TException
    {
      updateContract_args args = new updateContract_args();
      args.setContractId(contractId);
      args.setContractMetaData(contractMetaData);
      sendBase("updateContract", args);
    }

    public void recv_updateContract() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch, RunTimeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      updateContract_result result = new updateContract_result();
      receiveBase(result, "updateContract");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.templateNotFoundErr != null) {
        throw result.templateNotFoundErr;
      }
      if (result.templateTypeErr != null) {
        throw result.templateTypeErr;
      }
      if (result.updateTypeErr != null) {
        throw result.updateTypeErr;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.unexpectedTransaction != null) {
        throw result.unexpectedTransaction;
      }
      if (result.entityIdNotFound != null) {
        throw result.entityIdNotFound;
      }
      if (result.entityIdDeleted != null) {
        throw result.entityIdDeleted;
      }
      return;
    }

    public boolean isConcludable(int cid) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException
    {
      send_isConcludable(cid);
      return recv_isConcludable();
    }

    public void send_isConcludable(int cid) throws org.apache.thrift.TException
    {
      isConcludable_args args = new isConcludable_args();
      args.setCid(cid);
      sendBase("isConcludable", args);
    }

    public boolean recv_isConcludable() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException
    {
      isConcludable_result result = new isConcludable_result();
      receiveBase(result, "isConcludable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isConcludable failed: unknown result");
    }

    public void conclude(int cid) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractNotConcludable, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException
    {
      send_conclude(cid);
      recv_conclude();
    }

    public void send_conclude(int cid) throws org.apache.thrift.TException
    {
      conclude_args args = new conclude_args();
      args.setCid(cid);
      sendBase("conclude", args);
    }

    public void recv_conclude() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractNotConcludable, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException
    {
      conclude_result result = new conclude_result();
      receiveBase(result, "conclude");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.notConcludable != null) {
        throw result.notConcludable;
      }
      if (result.contractBreach != null) {
        throw result.contractBreach;
      }
      if (result.runtimeErr != null) {
        throw result.runtimeErr;
      }
      return;
    }

    public void createContractDefinition(String contractDef) throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefExistsException, org.apache.thrift.TException
    {
      send_createContractDefinition(contractDef);
      recv_createContractDefinition();
    }

    public void send_createContractDefinition(String contractDef) throws org.apache.thrift.TException
    {
      createContractDefinition_args args = new createContractDefinition_args();
      args.setContractDef(contractDef);
      sendBase("createContractDefinition", args);
    }

    public void recv_createContractDefinition() throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefExistsException, org.apache.thrift.TException
    {
      createContractDefinition_result result = new createContractDefinition_result();
      receiveBase(result, "createContractDefinition");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.parseException != null) {
        throw result.parseException;
      }
      if (result.guardednessException != null) {
        throw result.guardednessException;
      }
      if (result.contractDefExists != null) {
        throw result.contractDefExists;
      }
      return;
    }

    public void updateContractDefinition(String contractDef) throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException
    {
      send_updateContractDefinition(contractDef);
      recv_updateContractDefinition();
    }

    public void send_updateContractDefinition(String contractDef) throws org.apache.thrift.TException
    {
      updateContractDefinition_args args = new updateContractDefinition_args();
      args.setContractDef(contractDef);
      sendBase("updateContractDefinition", args);
    }

    public void recv_updateContractDefinition() throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException
    {
      updateContractDefinition_result result = new updateContractDefinition_result();
      receiveBase(result, "updateContractDefinition");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.parseException != null) {
        throw result.parseException;
      }
      if (result.guardednessException != null) {
        throw result.guardednessException;
      }
      if (result.contractDefNotFound != null) {
        throw result.contractDefNotFound;
      }
      return;
    }

    public void deleteContractDefinition(String name) throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException
    {
      send_deleteContractDefinition(name);
      recv_deleteContractDefinition();
    }

    public void send_deleteContractDefinition(String name) throws org.apache.thrift.TException
    {
      deleteContractDefinition_args args = new deleteContractDefinition_args();
      args.setName(name);
      sendBase("deleteContractDefinition", args);
    }

    public void recv_deleteContractDefinition() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException
    {
      deleteContractDefinition_result result = new deleteContractDefinition_result();
      receiveBase(result, "deleteContractDefinition");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.contractDefNotFound != null) {
        throw result.contractDefNotFound;
      }
      return;
    }

    public int createEntity(dk.diku.poets.gen.thrift.value.Value data, String type) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException
    {
      send_createEntity(data, type);
      return recv_createEntity();
    }

    public void send_createEntity(dk.diku.poets.gen.thrift.value.Value data, String type) throws org.apache.thrift.TException
    {
      createEntity_args args = new createEntity_args();
      args.setData(data);
      args.setType(type);
      sendBase("createEntity", args);
    }

    public int recv_createEntity() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException
    {
      createEntity_result result = new createEntity_result();
      receiveBase(result, "createEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createEntity failed: unknown result");
    }

    public void updateEntity(int entityId, dk.diku.poets.gen.thrift.value.Value data) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      send_updateEntity(entityId, data);
      recv_updateEntity();
    }

    public void send_updateEntity(int entityId, dk.diku.poets.gen.thrift.value.Value data) throws org.apache.thrift.TException
    {
      updateEntity_args args = new updateEntity_args();
      args.setEntityId(entityId);
      args.setData(data);
      sendBase("updateEntity", args);
    }

    public void recv_updateEntity() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      updateEntity_result result = new updateEntity_result();
      receiveBase(result, "updateEntity");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.msg != null) {
        throw result.msg;
      }
      if (result.typeErr != null) {
        throw result.typeErr;
      }
      if (result.entityIdNotFound != null) {
        throw result.entityIdNotFound;
      }
      if (result.entityIdDeleted != null) {
        throw result.entityIdDeleted;
      }
      return;
    }

    public void deleteEntity(int entityId) throws EmptyArgument, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      send_deleteEntity(entityId);
      recv_deleteEntity();
    }

    public void send_deleteEntity(int entityId) throws org.apache.thrift.TException
    {
      deleteEntity_args args = new deleteEntity_args();
      args.setEntityId(entityId);
      sendBase("deleteEntity", args);
    }

    public void recv_deleteEntity() throws EmptyArgument, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException
    {
      deleteEntity_result result = new deleteEntity_result();
      receiveBase(result, "deleteEntity");
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.entityIdNotFound != null) {
        throw result.entityIdNotFound;
      }
      if (result.entityIdDeleted != null) {
        throw result.entityIdDeleted;
      }
      return;
    }

    public dk.diku.poets.gen.thrift.reporting.Report getReport(String name) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, org.apache.thrift.TException
    {
      send_getReport(name);
      return recv_getReport();
    }

    public void send_getReport(String name) throws org.apache.thrift.TException
    {
      getReport_args args = new getReport_args();
      args.setName(name);
      sendBase("getReport", args);
    }

    public dk.diku.poets.gen.thrift.reporting.Report recv_getReport() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, org.apache.thrift.TException
    {
      getReport_result result = new getReport_result();
      receiveBase(result, "getReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReport failed: unknown result");
    }

    public boolean addReport(String spec) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException
    {
      send_addReport(spec);
      return recv_addReport();
    }

    public void send_addReport(String spec) throws org.apache.thrift.TException
    {
      addReport_args args = new addReport_args();
      args.setSpec(spec);
      sendBase("addReport", args);
    }

    public boolean recv_addReport() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException
    {
      addReport_result result = new addReport_result();
      receiveBase(result, "addReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.init != null) {
        throw result.init;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addReport failed: unknown result");
    }

    public boolean modifyReport(String spec) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException
    {
      send_modifyReport(spec);
      return recv_modifyReport();
    }

    public void send_modifyReport(String spec) throws org.apache.thrift.TException
    {
      modifyReport_args args = new modifyReport_args();
      args.setSpec(spec);
      sendBase("modifyReport", args);
    }

    public boolean recv_modifyReport() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException
    {
      modifyReport_result result = new modifyReport_result();
      receiveBase(result, "modifyReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.init != null) {
        throw result.init;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyReport failed: unknown result");
    }

    public boolean removeReport(String report) throws EmptyArgument, org.apache.thrift.TException
    {
      send_removeReport(report);
      return recv_removeReport();
    }

    public void send_removeReport(String report) throws org.apache.thrift.TException
    {
      removeReport_args args = new removeReport_args();
      args.setReport(report);
      sendBase("removeReport", args);
    }

    public boolean recv_removeReport() throws EmptyArgument, org.apache.thrift.TException
    {
      removeReport_result result = new removeReport_result();
      receiveBase(result, "removeReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeReport failed: unknown result");
    }

    public dk.diku.poets.gen.thrift.value.Value queryReport(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments) throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, RunTimeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException
    {
      send_queryReport(name, events, arguments);
      return recv_queryReport();
    }

    public void send_queryReport(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments) throws org.apache.thrift.TException
    {
      queryReport_args args = new queryReport_args();
      args.setName(name);
      args.setEvents(events);
      args.setArguments(arguments);
      sendBase("queryReport", args);
    }

    public dk.diku.poets.gen.thrift.value.Value recv_queryReport() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, RunTimeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException
    {
      queryReport_result result = new queryReport_result();
      receiveBase(result, "queryReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.arg != null) {
        throw result.arg;
      }
      if (result.notFound != null) {
        throw result.notFound;
      }
      if (result.runtime != null) {
        throw result.runtime;
      }
      if (result.type != null) {
        throw result.type;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryReport failed: unknown result");
    }

    public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> queryRules(dk.diku.poets.gen.thrift.rules.QValue query) throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, RunTimeException, dk.diku.poets.gen.thrift.rules.Inconsistent, dk.diku.poets.gen.thrift.rules.NoRuleSets, dk.diku.poets.gen.thrift.rules.CannotComplete, dk.diku.poets.gen.thrift.rules.PleaseSpecify, org.apache.thrift.TException
    {
      send_queryRules(query);
      return recv_queryRules();
    }

    public void send_queryRules(dk.diku.poets.gen.thrift.rules.QValue query) throws org.apache.thrift.TException
    {
      queryRules_args args = new queryRules_args();
      args.setQuery(query);
      sendBase("queryRules", args);
    }

    public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> recv_queryRules() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, RunTimeException, dk.diku.poets.gen.thrift.rules.Inconsistent, dk.diku.poets.gen.thrift.rules.NoRuleSets, dk.diku.poets.gen.thrift.rules.CannotComplete, dk.diku.poets.gen.thrift.rules.PleaseSpecify, org.apache.thrift.TException
    {
      queryRules_result result = new queryRules_result();
      receiveBase(result, "queryRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.emptyArgument != null) {
        throw result.emptyArgument;
      }
      if (result.decodeException != null) {
        throw result.decodeException;
      }
      if (result.rulesRuntimeException != null) {
        throw result.rulesRuntimeException;
      }
      if (result.inconsistentErr != null) {
        throw result.inconsistentErr;
      }
      if (result.noRuleSetsErr != null) {
        throw result.noRuleSetsErr;
      }
      if (result.cannotCompleteErr != null) {
        throw result.cannotCompleteErr;
      }
      if (result.pleaseSpecifyErr != null) {
        throw result.pleaseSpecifyErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRules failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addDataDefinitions(String pce, org.apache.thrift.async.AsyncMethodCallback<addDataDefinitions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDataDefinitions_call method_call = new addDataDefinitions_call(pce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDataDefinitions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pce;
      public addDataDefinitions_call(String pce, org.apache.thrift.async.AsyncMethodCallback<addDataDefinitions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pce = pce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDataDefinitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDataDefinitions_args args = new addDataDefinitions_args();
        args.setPce(pce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.data.ValidationError, dk.diku.poets.gen.thrift.data.ParseError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addDataDefinitions();
      }
    }

    public void getRecordDefinition(String recordName, org.apache.thrift.async.AsyncMethodCallback<getRecordDefinition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordDefinition_call method_call = new getRecordDefinition_call(recordName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String recordName;
      public getRecordDefinition_call(String recordName, org.apache.thrift.async.AsyncMethodCallback<getRecordDefinition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordName = recordName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordDefinition_args args = new getRecordDefinition_args();
        args.setRecordName(recordName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public dk.diku.poets.gen.thrift.data.RecordDefinition getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordDefinition();
      }
    }

    public void getSubTypes(String recordName, org.apache.thrift.async.AsyncMethodCallback<getSubTypes_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubTypes_call method_call = new getSubTypes_call(recordName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubTypes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String recordName;
      public getSubTypes_call(String recordName, org.apache.thrift.async.AsyncMethodCallback<getSubTypes_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordName = recordName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubTypes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubTypes_args args = new getSubTypes_args();
        args.setRecordName(recordName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.data.UndefinedRecord, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubTypes();
      }
    }

    public void getContract(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<getContract_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getContract_call method_call = new getContract_call(cid, transactions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getContract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      private List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions;
      public getContract_call(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<getContract_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.transactions = transactions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getContract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getContract_args args = new getContract_args();
        args.setCid(cid);
        args.setTransactions(transactions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public dk.diku.poets.gen.thrift.contracts.Residual getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getContract();
      }
    }

    public void getExpectedTransactions(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<getExpectedTransactions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExpectedTransactions_call method_call = new getExpectedTransactions_call(cid, transactions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExpectedTransactions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      private List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions;
      public getExpectedTransactions_call(int cid, List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<getExpectedTransactions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.transactions = transactions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExpectedTransactions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExpectedTransactions_args args = new getExpectedTransactions_args();
        args.setCid(cid);
        args.setTransactions(transactions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExpectedTransactions();
      }
    }

    public void registerTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<registerTransactions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerTransactions_call method_call = new registerTransactions_call(transactions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerTransactions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions;
      public registerTransactions_call(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions, org.apache.thrift.async.AsyncMethodCallback<registerTransactions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transactions = transactions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerTransactions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerTransactions_args args = new registerTransactions_args();
        args.setTransactions(transactions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TransactionTooOldException, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerTransactions();
      }
    }

    public void instantiateContract(dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<instantiateContract_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      instantiateContract_call method_call = new instantiateContract_call(contractMetaData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class instantiateContract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private dk.diku.poets.gen.thrift.value.Value contractMetaData;
      public instantiateContract_call(dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<instantiateContract_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractMetaData = contractMetaData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instantiateContract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        instantiateContract_args args = new instantiateContract_args();
        args.setContractMetaData(contractMetaData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_instantiateContract();
      }
    }

    public void updateContract(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<updateContract_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateContract_call method_call = new updateContract_call(contractId, contractMetaData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateContract_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int contractId;
      private dk.diku.poets.gen.thrift.value.Value contractMetaData;
      public updateContract_call(int contractId, dk.diku.poets.gen.thrift.value.Value contractMetaData, org.apache.thrift.async.AsyncMethodCallback<updateContract_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractId = contractId;
        this.contractMetaData = contractMetaData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateContract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateContract_args args = new updateContract_args();
        args.setContractId(contractId);
        args.setContractMetaData(contractMetaData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException, dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException, dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch, RunTimeException, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateContract();
      }
    }

    public void isConcludable(int cid, org.apache.thrift.async.AsyncMethodCallback<isConcludable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isConcludable_call method_call = new isConcludable_call(cid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isConcludable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      public isConcludable_call(int cid, org.apache.thrift.async.AsyncMethodCallback<isConcludable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isConcludable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isConcludable_args args = new isConcludable_args();
        args.setCid(cid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isConcludable();
      }
    }

    public void conclude(int cid, org.apache.thrift.async.AsyncMethodCallback<conclude_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      conclude_call method_call = new conclude_call(cid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class conclude_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int cid;
      public conclude_call(int cid, org.apache.thrift.async.AsyncMethodCallback<conclude_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("conclude", org.apache.thrift.protocol.TMessageType.CALL, 0));
        conclude_args args = new conclude_args();
        args.setCid(cid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractNotFoundException, dk.diku.poets.gen.thrift.contracts.ContractNotConcludable, dk.diku.poets.gen.thrift.contracts.ContractBreach, RunTimeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_conclude();
      }
    }

    public void createContractDefinition(String contractDef, org.apache.thrift.async.AsyncMethodCallback<createContractDefinition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createContractDefinition_call method_call = new createContractDefinition_call(contractDef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createContractDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String contractDef;
      public createContractDefinition_call(String contractDef, org.apache.thrift.async.AsyncMethodCallback<createContractDefinition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractDef = contractDef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createContractDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createContractDefinition_args args = new createContractDefinition_args();
        args.setContractDef(contractDef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefExistsException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createContractDefinition();
      }
    }

    public void updateContractDefinition(String contractDef, org.apache.thrift.async.AsyncMethodCallback<updateContractDefinition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateContractDefinition_call method_call = new updateContractDefinition_call(contractDef, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateContractDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String contractDef;
      public updateContractDefinition_call(String contractDef, org.apache.thrift.async.AsyncMethodCallback<updateContractDefinition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.contractDef = contractDef;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateContractDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateContractDefinition_args args = new updateContractDefinition_args();
        args.setContractDef(contractDef);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.contracts.ParseException, dk.diku.poets.gen.thrift.contracts.GuardednessException, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateContractDefinition();
      }
    }

    public void deleteContractDefinition(String name, org.apache.thrift.async.AsyncMethodCallback<deleteContractDefinition_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteContractDefinition_call method_call = new deleteContractDefinition_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteContractDefinition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public deleteContractDefinition_call(String name, org.apache.thrift.async.AsyncMethodCallback<deleteContractDefinition_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteContractDefinition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteContractDefinition_args args = new deleteContractDefinition_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteContractDefinition();
      }
    }

    public void createEntity(dk.diku.poets.gen.thrift.value.Value data, String type, org.apache.thrift.async.AsyncMethodCallback<createEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createEntity_call method_call = new createEntity_call(data, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private dk.diku.poets.gen.thrift.value.Value data;
      private String type;
      public createEntity_call(dk.diku.poets.gen.thrift.value.Value data, String type, org.apache.thrift.async.AsyncMethodCallback<createEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createEntity_args args = new createEntity_args();
        args.setData(data);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createEntity();
      }
    }

    public void updateEntity(int entityId, dk.diku.poets.gen.thrift.value.Value data, org.apache.thrift.async.AsyncMethodCallback<updateEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEntity_call method_call = new updateEntity_call(entityId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int entityId;
      private dk.diku.poets.gen.thrift.value.Value data;
      public updateEntity_call(int entityId, dk.diku.poets.gen.thrift.value.Value data, org.apache.thrift.async.AsyncMethodCallback<updateEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityId = entityId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEntity_args args = new updateEntity_args();
        args.setEntityId(entityId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, dk.diku.poets.gen.thrift.value.TypeException, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateEntity();
      }
    }

    public void deleteEntity(int entityId, org.apache.thrift.async.AsyncMethodCallback<deleteEntity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEntity_call method_call = new deleteEntity_call(entityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int entityId;
      public deleteEntity_call(int entityId, org.apache.thrift.async.AsyncMethodCallback<deleteEntity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entityId = entityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEntity_args args = new deleteEntity_args();
        args.setEntityId(entityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.entities.EntityNotFound, dk.diku.poets.gen.thrift.entities.EntityDeleted, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteEntity();
      }
    }

    public void getReport(String name, org.apache.thrift.async.AsyncMethodCallback<getReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReport_call method_call = new getReport_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public getReport_call(String name, org.apache.thrift.async.AsyncMethodCallback<getReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReport_args args = new getReport_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public dk.diku.poets.gen.thrift.reporting.Report getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReport();
      }
    }

    public void addReport(String spec, org.apache.thrift.async.AsyncMethodCallback<addReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addReport_call method_call = new addReport_call(spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String spec;
      public addReport_call(String spec, org.apache.thrift.async.AsyncMethodCallback<addReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addReport_args args = new addReport_args();
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addReport();
      }
    }

    public void modifyReport(String spec, org.apache.thrift.async.AsyncMethodCallback<modifyReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyReport_call method_call = new modifyReport_call(spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String spec;
      public modifyReport_call(String spec, org.apache.thrift.async.AsyncMethodCallback<modifyReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spec = spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyReport_args args = new modifyReport_args();
        args.setSpec(spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportInitException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyReport();
      }
    }

    public void removeReport(String report, org.apache.thrift.async.AsyncMethodCallback<removeReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeReport_call method_call = new removeReport_call(report, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String report;
      public removeReport_call(String report, org.apache.thrift.async.AsyncMethodCallback<removeReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.report = report;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeReport_args args = new removeReport_args();
        args.setReport(report);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws EmptyArgument, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeReport();
      }
    }

    public void queryReport(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments, org.apache.thrift.async.AsyncMethodCallback<queryReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryReport_call method_call = new queryReport_call(name, events, arguments, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private List<dk.diku.poets.gen.thrift.value.Value> events;
      private List<dk.diku.poets.gen.thrift.value.Value> arguments;
      public queryReport_call(String name, List<dk.diku.poets.gen.thrift.value.Value> events, List<dk.diku.poets.gen.thrift.value.Value> arguments, org.apache.thrift.async.AsyncMethodCallback<queryReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.events = events;
        this.arguments = arguments;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryReport_args args = new queryReport_args();
        args.setName(name);
        args.setEvents(events);
        args.setArguments(arguments);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public dk.diku.poets.gen.thrift.value.Value getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.reporting.ReportNotFoundException, RunTimeException, dk.diku.poets.gen.thrift.value.TypeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryReport();
      }
    }

    public void queryRules(dk.diku.poets.gen.thrift.rules.QValue query, org.apache.thrift.async.AsyncMethodCallback<queryRules_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRules_call method_call = new queryRules_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRules_call extends org.apache.thrift.async.TAsyncMethodCall {
      private dk.diku.poets.gen.thrift.rules.QValue query;
      public queryRules_call(dk.diku.poets.gen.thrift.rules.QValue query, org.apache.thrift.async.AsyncMethodCallback<queryRules_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRules_args args = new queryRules_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> getResult() throws EmptyArgument, dk.diku.poets.gen.thrift.value.DecodeException, RunTimeException, dk.diku.poets.gen.thrift.rules.Inconsistent, dk.diku.poets.gen.thrift.rules.NoRuleSets, dk.diku.poets.gen.thrift.rules.CannotComplete, dk.diku.poets.gen.thrift.rules.PleaseSpecify, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRules();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addDataDefinitions", new addDataDefinitions());
      processMap.put("getRecordDefinition", new getRecordDefinition());
      processMap.put("getSubTypes", new getSubTypes());
      processMap.put("getContract", new getContract());
      processMap.put("getExpectedTransactions", new getExpectedTransactions());
      processMap.put("registerTransactions", new registerTransactions());
      processMap.put("instantiateContract", new instantiateContract());
      processMap.put("updateContract", new updateContract());
      processMap.put("isConcludable", new isConcludable());
      processMap.put("conclude", new conclude());
      processMap.put("createContractDefinition", new createContractDefinition());
      processMap.put("updateContractDefinition", new updateContractDefinition());
      processMap.put("deleteContractDefinition", new deleteContractDefinition());
      processMap.put("createEntity", new createEntity());
      processMap.put("updateEntity", new updateEntity());
      processMap.put("deleteEntity", new deleteEntity());
      processMap.put("getReport", new getReport());
      processMap.put("addReport", new addReport());
      processMap.put("modifyReport", new modifyReport());
      processMap.put("removeReport", new removeReport());
      processMap.put("queryReport", new queryReport());
      processMap.put("queryRules", new queryRules());
      return processMap;
    }

    private static class addDataDefinitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDataDefinitions_args> {
      public addDataDefinitions() {
        super("addDataDefinitions");
      }

      protected addDataDefinitions_args getEmptyArgsInstance() {
        return new addDataDefinitions_args();
      }

      protected addDataDefinitions_result getResult(I iface, addDataDefinitions_args args) throws org.apache.thrift.TException {
        addDataDefinitions_result result = new addDataDefinitions_result();
        try {
          iface.addDataDefinitions(args.pce);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.data.ValidationError validationError) {
          result.validationError = validationError;
        } catch (dk.diku.poets.gen.thrift.data.ParseError parseError) {
          result.parseError = parseError;
        }
        return result;
      }
    }

    private static class getRecordDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordDefinition_args> {
      public getRecordDefinition() {
        super("getRecordDefinition");
      }

      protected getRecordDefinition_args getEmptyArgsInstance() {
        return new getRecordDefinition_args();
      }

      protected getRecordDefinition_result getResult(I iface, getRecordDefinition_args args) throws org.apache.thrift.TException {
        getRecordDefinition_result result = new getRecordDefinition_result();
        try {
          result.success = iface.getRecordDefinition(args.recordName);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord) {
          result.undefRecord = undefRecord;
        }
        return result;
      }
    }

    private static class getSubTypes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubTypes_args> {
      public getSubTypes() {
        super("getSubTypes");
      }

      protected getSubTypes_args getEmptyArgsInstance() {
        return new getSubTypes_args();
      }

      protected getSubTypes_result getResult(I iface, getSubTypes_args args) throws org.apache.thrift.TException {
        getSubTypes_result result = new getSubTypes_result();
        try {
          result.success = iface.getSubTypes(args.recordName);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord) {
          result.undefRecord = undefRecord;
        }
        return result;
      }
    }

    private static class getContract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getContract_args> {
      public getContract() {
        super("getContract");
      }

      protected getContract_args getEmptyArgsInstance() {
        return new getContract_args();
      }

      protected getContract_result getResult(I iface, getContract_args args) throws org.apache.thrift.TException {
        getContract_result result = new getContract_result();
        try {
          result.success = iface.getContract(args.cid, args.transactions);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
          result.unexpectedTransaction = unexpectedTransaction;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
          result.oldErr = oldErr;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        }
        return result;
      }
    }

    private static class getExpectedTransactions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExpectedTransactions_args> {
      public getExpectedTransactions() {
        super("getExpectedTransactions");
      }

      protected getExpectedTransactions_args getEmptyArgsInstance() {
        return new getExpectedTransactions_args();
      }

      protected getExpectedTransactions_result getResult(I iface, getExpectedTransactions_args args) throws org.apache.thrift.TException {
        getExpectedTransactions_result result = new getExpectedTransactions_result();
        try {
          result.success = iface.getExpectedTransactions(args.cid, args.transactions);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
          result.unexpectedTransaction = unexpectedTransaction;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
          result.oldErr = oldErr;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        }
        return result;
      }
    }

    private static class registerTransactions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerTransactions_args> {
      public registerTransactions() {
        super("registerTransactions");
      }

      protected registerTransactions_args getEmptyArgsInstance() {
        return new registerTransactions_args();
      }

      protected registerTransactions_result getResult(I iface, registerTransactions_args args) throws org.apache.thrift.TException {
        registerTransactions_result result = new registerTransactions_result();
        try {
          iface.registerTransactions(args.transactions);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
          result.unexpectedTransaction = unexpectedTransaction;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
          result.oldErr = oldErr;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        } catch (dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
          result.entityIdNotFound = entityIdNotFound;
        } catch (dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
          result.entityIdDeleted = entityIdDeleted;
        }
        return result;
      }
    }

    private static class instantiateContract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, instantiateContract_args> {
      public instantiateContract() {
        super("instantiateContract");
      }

      protected instantiateContract_args getEmptyArgsInstance() {
        return new instantiateContract_args();
      }

      protected instantiateContract_result getResult(I iface, instantiateContract_args args) throws org.apache.thrift.TException {
        instantiateContract_result result = new instantiateContract_result();
        try {
          result.success = iface.instantiateContract(args.contractMetaData);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr) {
          result.templateNotFoundErr = templateNotFoundErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr) {
          result.templateTypeErr = templateTypeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        } catch (dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
          result.entityIdNotFound = entityIdNotFound;
        } catch (dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
          result.entityIdDeleted = entityIdDeleted;
        }
        return result;
      }
    }

    private static class updateContract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateContract_args> {
      public updateContract() {
        super("updateContract");
      }

      protected updateContract_args getEmptyArgsInstance() {
        return new updateContract_args();
      }

      protected updateContract_result getResult(I iface, updateContract_args args) throws org.apache.thrift.TException {
        updateContract_result result = new updateContract_result();
        try {
          iface.updateContract(args.contractId, args.contractMetaData);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr) {
          result.templateNotFoundErr = templateNotFoundErr;
        } catch (dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr) {
          result.templateTypeErr = templateTypeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch updateTypeErr) {
          result.updateTypeErr = updateTypeErr;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
          result.unexpectedTransaction = unexpectedTransaction;
        } catch (dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
          result.entityIdNotFound = entityIdNotFound;
        } catch (dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
          result.entityIdDeleted = entityIdDeleted;
        }
        return result;
      }
    }

    private static class isConcludable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isConcludable_args> {
      public isConcludable() {
        super("isConcludable");
      }

      protected isConcludable_args getEmptyArgsInstance() {
        return new isConcludable_args();
      }

      protected isConcludable_result getResult(I iface, isConcludable_args args) throws org.apache.thrift.TException {
        isConcludable_result result = new isConcludable_result();
        try {
          result.success = iface.isConcludable(args.cid);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        }
        return result;
      }
    }

    private static class conclude<I extends Iface> extends org.apache.thrift.ProcessFunction<I, conclude_args> {
      public conclude() {
        super("conclude");
      }

      protected conclude_args getEmptyArgsInstance() {
        return new conclude_args();
      }

      protected conclude_result getResult(I iface, conclude_args args) throws org.apache.thrift.TException {
        conclude_result result = new conclude_result();
        try {
          iface.conclude(args.cid);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
          result.notFound = notFound;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractNotConcludable notConcludable) {
          result.notConcludable = notConcludable;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
          result.contractBreach = contractBreach;
        } catch (RunTimeException runtimeErr) {
          result.runtimeErr = runtimeErr;
        }
        return result;
      }
    }

    private static class createContractDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createContractDefinition_args> {
      public createContractDefinition() {
        super("createContractDefinition");
      }

      protected createContractDefinition_args getEmptyArgsInstance() {
        return new createContractDefinition_args();
      }

      protected createContractDefinition_result getResult(I iface, createContractDefinition_args args) throws org.apache.thrift.TException {
        createContractDefinition_result result = new createContractDefinition_result();
        try {
          iface.createContractDefinition(args.contractDef);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.ParseException parseException) {
          result.parseException = parseException;
        } catch (dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException) {
          result.guardednessException = guardednessException;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractDefExistsException contractDefExists) {
          result.contractDefExists = contractDefExists;
        }
        return result;
      }
    }

    private static class updateContractDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateContractDefinition_args> {
      public updateContractDefinition() {
        super("updateContractDefinition");
      }

      protected updateContractDefinition_args getEmptyArgsInstance() {
        return new updateContractDefinition_args();
      }

      protected updateContractDefinition_result getResult(I iface, updateContractDefinition_args args) throws org.apache.thrift.TException {
        updateContractDefinition_result result = new updateContractDefinition_result();
        try {
          iface.updateContractDefinition(args.contractDef);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.contracts.ParseException parseException) {
          result.parseException = parseException;
        } catch (dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException) {
          result.guardednessException = guardednessException;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound) {
          result.contractDefNotFound = contractDefNotFound;
        }
        return result;
      }
    }

    private static class deleteContractDefinition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteContractDefinition_args> {
      public deleteContractDefinition() {
        super("deleteContractDefinition");
      }

      protected deleteContractDefinition_args getEmptyArgsInstance() {
        return new deleteContractDefinition_args();
      }

      protected deleteContractDefinition_result getResult(I iface, deleteContractDefinition_args args) throws org.apache.thrift.TException {
        deleteContractDefinition_result result = new deleteContractDefinition_result();
        try {
          iface.deleteContractDefinition(args.name);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound) {
          result.contractDefNotFound = contractDefNotFound;
        }
        return result;
      }
    }

    private static class createEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createEntity_args> {
      public createEntity() {
        super("createEntity");
      }

      protected createEntity_args getEmptyArgsInstance() {
        return new createEntity_args();
      }

      protected createEntity_result getResult(I iface, createEntity_args args) throws org.apache.thrift.TException {
        createEntity_result result = new createEntity_result();
        try {
          result.success = iface.createEntity(args.data, args.type);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        }
        return result;
      }
    }

    private static class updateEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEntity_args> {
      public updateEntity() {
        super("updateEntity");
      }

      protected updateEntity_args getEmptyArgsInstance() {
        return new updateEntity_args();
      }

      protected updateEntity_result getResult(I iface, updateEntity_args args) throws org.apache.thrift.TException {
        updateEntity_result result = new updateEntity_result();
        try {
          iface.updateEntity(args.entityId, args.data);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException msg) {
          result.msg = msg;
        } catch (dk.diku.poets.gen.thrift.value.TypeException typeErr) {
          result.typeErr = typeErr;
        } catch (dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
          result.entityIdNotFound = entityIdNotFound;
        } catch (dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
          result.entityIdDeleted = entityIdDeleted;
        }
        return result;
      }
    }

    private static class deleteEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEntity_args> {
      public deleteEntity() {
        super("deleteEntity");
      }

      protected deleteEntity_args getEmptyArgsInstance() {
        return new deleteEntity_args();
      }

      protected deleteEntity_result getResult(I iface, deleteEntity_args args) throws org.apache.thrift.TException {
        deleteEntity_result result = new deleteEntity_result();
        try {
          iface.deleteEntity(args.entityId);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
          result.entityIdNotFound = entityIdNotFound;
        } catch (dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
          result.entityIdDeleted = entityIdDeleted;
        }
        return result;
      }
    }

    private static class getReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReport_args> {
      public getReport() {
        super("getReport");
      }

      protected getReport_args getEmptyArgsInstance() {
        return new getReport_args();
      }

      protected getReport_result getResult(I iface, getReport_args args) throws org.apache.thrift.TException {
        getReport_result result = new getReport_result();
        try {
          result.success = iface.getReport(args.name);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound) {
          result.notFound = notFound;
        }
        return result;
      }
    }

    private static class addReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addReport_args> {
      public addReport() {
        super("addReport");
      }

      protected addReport_args getEmptyArgsInstance() {
        return new addReport_args();
      }

      protected addReport_result getResult(I iface, addReport_args args) throws org.apache.thrift.TException {
        addReport_result result = new addReport_result();
        try {
          result.success = iface.addReport(args.spec);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.reporting.ReportInitException init) {
          result.init = init;
        }
        return result;
      }
    }

    private static class modifyReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyReport_args> {
      public modifyReport() {
        super("modifyReport");
      }

      protected modifyReport_args getEmptyArgsInstance() {
        return new modifyReport_args();
      }

      protected modifyReport_result getResult(I iface, modifyReport_args args) throws org.apache.thrift.TException {
        modifyReport_result result = new modifyReport_result();
        try {
          result.success = iface.modifyReport(args.spec);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.reporting.ReportInitException init) {
          result.init = init;
        }
        return result;
      }
    }

    private static class removeReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeReport_args> {
      public removeReport() {
        super("removeReport");
      }

      protected removeReport_args getEmptyArgsInstance() {
        return new removeReport_args();
      }

      protected removeReport_result getResult(I iface, removeReport_args args) throws org.apache.thrift.TException {
        removeReport_result result = new removeReport_result();
        try {
          result.success = iface.removeReport(args.report);
          result.setSuccessIsSet(true);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        }
        return result;
      }
    }

    private static class queryReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryReport_args> {
      public queryReport() {
        super("queryReport");
      }

      protected queryReport_args getEmptyArgsInstance() {
        return new queryReport_args();
      }

      protected queryReport_result getResult(I iface, queryReport_args args) throws org.apache.thrift.TException {
        queryReport_result result = new queryReport_result();
        try {
          result.success = iface.queryReport(args.name, args.events, args.arguments);
        } catch (EmptyArgument arg) {
          result.arg = arg;
        } catch (dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound) {
          result.notFound = notFound;
        } catch (RunTimeException runtime) {
          result.runtime = runtime;
        } catch (dk.diku.poets.gen.thrift.value.TypeException type) {
          result.type = type;
        }
        return result;
      }
    }

    private static class queryRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRules_args> {
      public queryRules() {
        super("queryRules");
      }

      protected queryRules_args getEmptyArgsInstance() {
        return new queryRules_args();
      }

      protected queryRules_result getResult(I iface, queryRules_args args) throws org.apache.thrift.TException {
        queryRules_result result = new queryRules_result();
        try {
          result.success = iface.queryRules(args.query);
        } catch (EmptyArgument emptyArgument) {
          result.emptyArgument = emptyArgument;
        } catch (dk.diku.poets.gen.thrift.value.DecodeException decodeException) {
          result.decodeException = decodeException;
        } catch (RunTimeException rulesRuntimeException) {
          result.rulesRuntimeException = rulesRuntimeException;
        } catch (dk.diku.poets.gen.thrift.rules.Inconsistent inconsistentErr) {
          result.inconsistentErr = inconsistentErr;
        } catch (dk.diku.poets.gen.thrift.rules.NoRuleSets noRuleSetsErr) {
          result.noRuleSetsErr = noRuleSetsErr;
        } catch (dk.diku.poets.gen.thrift.rules.CannotComplete cannotCompleteErr) {
          result.cannotCompleteErr = cannotCompleteErr;
        } catch (dk.diku.poets.gen.thrift.rules.PleaseSpecify pleaseSpecifyErr) {
          result.pleaseSpecifyErr = pleaseSpecifyErr;
        }
        return result;
      }
    }

  }

  public static class addDataDefinitions_args implements org.apache.thrift.TBase<addDataDefinitions_args, addDataDefinitions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDataDefinitions_args");

    private static final org.apache.thrift.protocol.TField PCE_FIELD_DESC = new org.apache.thrift.protocol.TField("pce", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDataDefinitions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDataDefinitions_argsTupleSchemeFactory());
    }

    public String pce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PCE((short)1, "pce");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PCE
            return PCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PCE, new org.apache.thrift.meta_data.FieldMetaData("pce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "PCE")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDataDefinitions_args.class, metaDataMap);
    }

    public addDataDefinitions_args() {
    }

    public addDataDefinitions_args(
      String pce)
    {
      this();
      this.pce = pce;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDataDefinitions_args(addDataDefinitions_args other) {
      if (other.isSetPce()) {
        this.pce = other.pce;
      }
    }

    public addDataDefinitions_args deepCopy() {
      return new addDataDefinitions_args(this);
    }

    @Override
    public void clear() {
      this.pce = null;
    }

    public String getPce() {
      return this.pce;
    }

    public addDataDefinitions_args setPce(String pce) {
      this.pce = pce;
      return this;
    }

    public void unsetPce() {
      this.pce = null;
    }

    /** Returns true if field pce is set (has been assigned a value) and false otherwise */
    public boolean isSetPce() {
      return this.pce != null;
    }

    public void setPceIsSet(boolean value) {
      if (!value) {
        this.pce = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PCE:
        if (value == null) {
          unsetPce();
        } else {
          setPce((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PCE:
        return getPce();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PCE:
        return isSetPce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDataDefinitions_args)
        return this.equals((addDataDefinitions_args)that);
      return false;
    }

    public boolean equals(addDataDefinitions_args that) {
      if (that == null)
        return false;

      boolean this_present_pce = true && this.isSetPce();
      boolean that_present_pce = true && that.isSetPce();
      if (this_present_pce || that_present_pce) {
        if (!(this_present_pce && that_present_pce))
          return false;
        if (!this.pce.equals(that.pce))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDataDefinitions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDataDefinitions_args typedOther = (addDataDefinitions_args)other;

      lastComparison = Boolean.valueOf(isSetPce()).compareTo(typedOther.isSetPce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pce, typedOther.pce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDataDefinitions_args(");
      boolean first = true;

      sb.append("pce:");
      if (this.pce == null) {
        sb.append("null");
      } else {
        sb.append(this.pce);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDataDefinitions_argsStandardSchemeFactory implements SchemeFactory {
      public addDataDefinitions_argsStandardScheme getScheme() {
        return new addDataDefinitions_argsStandardScheme();
      }
    }

    private static class addDataDefinitions_argsStandardScheme extends StandardScheme<addDataDefinitions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDataDefinitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pce = iprot.readString();
                struct.setPceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDataDefinitions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pce != null) {
          oprot.writeFieldBegin(PCE_FIELD_DESC);
          oprot.writeString(struct.pce);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDataDefinitions_argsTupleSchemeFactory implements SchemeFactory {
      public addDataDefinitions_argsTupleScheme getScheme() {
        return new addDataDefinitions_argsTupleScheme();
      }
    }

    private static class addDataDefinitions_argsTupleScheme extends TupleScheme<addDataDefinitions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDataDefinitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPce()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPce()) {
          oprot.writeString(struct.pce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDataDefinitions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pce = iprot.readString();
          struct.setPceIsSet(true);
        }
      }
    }

  }

  public static class addDataDefinitions_result implements org.apache.thrift.TBase<addDataDefinitions_result, addDataDefinitions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDataDefinitions_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VALIDATION_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("validationError", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARSE_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("parseError", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDataDefinitions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDataDefinitions_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.data.ValidationError validationError; // required
    public dk.diku.poets.gen.thrift.data.ParseError parseError; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      VALIDATION_ERROR((short)2, "validationError"),
      PARSE_ERROR((short)3, "parseError");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // VALIDATION_ERROR
            return VALIDATION_ERROR;
          case 3: // PARSE_ERROR
            return PARSE_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.VALIDATION_ERROR, new org.apache.thrift.meta_data.FieldMetaData("validationError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PARSE_ERROR, new org.apache.thrift.meta_data.FieldMetaData("parseError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDataDefinitions_result.class, metaDataMap);
    }

    public addDataDefinitions_result() {
    }

    public addDataDefinitions_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.data.ValidationError validationError,
      dk.diku.poets.gen.thrift.data.ParseError parseError)
    {
      this();
      this.arg = arg;
      this.validationError = validationError;
      this.parseError = parseError;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDataDefinitions_result(addDataDefinitions_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetValidationError()) {
        this.validationError = new dk.diku.poets.gen.thrift.data.ValidationError(other.validationError);
      }
      if (other.isSetParseError()) {
        this.parseError = new dk.diku.poets.gen.thrift.data.ParseError(other.parseError);
      }
    }

    public addDataDefinitions_result deepCopy() {
      return new addDataDefinitions_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.validationError = null;
      this.parseError = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public addDataDefinitions_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.data.ValidationError getValidationError() {
      return this.validationError;
    }

    public addDataDefinitions_result setValidationError(dk.diku.poets.gen.thrift.data.ValidationError validationError) {
      this.validationError = validationError;
      return this;
    }

    public void unsetValidationError() {
      this.validationError = null;
    }

    /** Returns true if field validationError is set (has been assigned a value) and false otherwise */
    public boolean isSetValidationError() {
      return this.validationError != null;
    }

    public void setValidationErrorIsSet(boolean value) {
      if (!value) {
        this.validationError = null;
      }
    }

    public dk.diku.poets.gen.thrift.data.ParseError getParseError() {
      return this.parseError;
    }

    public addDataDefinitions_result setParseError(dk.diku.poets.gen.thrift.data.ParseError parseError) {
      this.parseError = parseError;
      return this;
    }

    public void unsetParseError() {
      this.parseError = null;
    }

    /** Returns true if field parseError is set (has been assigned a value) and false otherwise */
    public boolean isSetParseError() {
      return this.parseError != null;
    }

    public void setParseErrorIsSet(boolean value) {
      if (!value) {
        this.parseError = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case VALIDATION_ERROR:
        if (value == null) {
          unsetValidationError();
        } else {
          setValidationError((dk.diku.poets.gen.thrift.data.ValidationError)value);
        }
        break;

      case PARSE_ERROR:
        if (value == null) {
          unsetParseError();
        } else {
          setParseError((dk.diku.poets.gen.thrift.data.ParseError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case VALIDATION_ERROR:
        return getValidationError();

      case PARSE_ERROR:
        return getParseError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case VALIDATION_ERROR:
        return isSetValidationError();
      case PARSE_ERROR:
        return isSetParseError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDataDefinitions_result)
        return this.equals((addDataDefinitions_result)that);
      return false;
    }

    public boolean equals(addDataDefinitions_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_validationError = true && this.isSetValidationError();
      boolean that_present_validationError = true && that.isSetValidationError();
      if (this_present_validationError || that_present_validationError) {
        if (!(this_present_validationError && that_present_validationError))
          return false;
        if (!this.validationError.equals(that.validationError))
          return false;
      }

      boolean this_present_parseError = true && this.isSetParseError();
      boolean that_present_parseError = true && that.isSetParseError();
      if (this_present_parseError || that_present_parseError) {
        if (!(this_present_parseError && that_present_parseError))
          return false;
        if (!this.parseError.equals(that.parseError))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDataDefinitions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDataDefinitions_result typedOther = (addDataDefinitions_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValidationError()).compareTo(typedOther.isSetValidationError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidationError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validationError, typedOther.validationError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParseError()).compareTo(typedOther.isSetParseError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseError, typedOther.parseError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDataDefinitions_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("validationError:");
      if (this.validationError == null) {
        sb.append("null");
      } else {
        sb.append(this.validationError);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parseError:");
      if (this.parseError == null) {
        sb.append("null");
      } else {
        sb.append(this.parseError);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDataDefinitions_resultStandardSchemeFactory implements SchemeFactory {
      public addDataDefinitions_resultStandardScheme getScheme() {
        return new addDataDefinitions_resultStandardScheme();
      }
    }

    private static class addDataDefinitions_resultStandardScheme extends StandardScheme<addDataDefinitions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDataDefinitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALIDATION_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.validationError = new dk.diku.poets.gen.thrift.data.ValidationError();
                struct.validationError.read(iprot);
                struct.setValidationErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARSE_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parseError = new dk.diku.poets.gen.thrift.data.ParseError();
                struct.parseError.read(iprot);
                struct.setParseErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDataDefinitions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.validationError != null) {
          oprot.writeFieldBegin(VALIDATION_ERROR_FIELD_DESC);
          struct.validationError.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parseError != null) {
          oprot.writeFieldBegin(PARSE_ERROR_FIELD_DESC);
          struct.parseError.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDataDefinitions_resultTupleSchemeFactory implements SchemeFactory {
      public addDataDefinitions_resultTupleScheme getScheme() {
        return new addDataDefinitions_resultTupleScheme();
      }
    }

    private static class addDataDefinitions_resultTupleScheme extends TupleScheme<addDataDefinitions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDataDefinitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetValidationError()) {
          optionals.set(1);
        }
        if (struct.isSetParseError()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetValidationError()) {
          struct.validationError.write(oprot);
        }
        if (struct.isSetParseError()) {
          struct.parseError.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDataDefinitions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.validationError = new dk.diku.poets.gen.thrift.data.ValidationError();
          struct.validationError.read(iprot);
          struct.setValidationErrorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parseError = new dk.diku.poets.gen.thrift.data.ParseError();
          struct.parseError.read(iprot);
          struct.setParseErrorIsSet(true);
        }
      }
    }

  }

  public static class getRecordDefinition_args implements org.apache.thrift.TBase<getRecordDefinition_args, getRecordDefinition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordDefinition_args");

    private static final org.apache.thrift.protocol.TField RECORD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordDefinition_argsTupleSchemeFactory());
    }

    public String recordName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_NAME((short)1, "recordName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_NAME
            return RECORD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_NAME, new org.apache.thrift.meta_data.FieldMetaData("recordName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RecordName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordDefinition_args.class, metaDataMap);
    }

    public getRecordDefinition_args() {
    }

    public getRecordDefinition_args(
      String recordName)
    {
      this();
      this.recordName = recordName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordDefinition_args(getRecordDefinition_args other) {
      if (other.isSetRecordName()) {
        this.recordName = other.recordName;
      }
    }

    public getRecordDefinition_args deepCopy() {
      return new getRecordDefinition_args(this);
    }

    @Override
    public void clear() {
      this.recordName = null;
    }

    public String getRecordName() {
      return this.recordName;
    }

    public getRecordDefinition_args setRecordName(String recordName) {
      this.recordName = recordName;
      return this;
    }

    public void unsetRecordName() {
      this.recordName = null;
    }

    /** Returns true if field recordName is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordName() {
      return this.recordName != null;
    }

    public void setRecordNameIsSet(boolean value) {
      if (!value) {
        this.recordName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_NAME:
        if (value == null) {
          unsetRecordName();
        } else {
          setRecordName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_NAME:
        return getRecordName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_NAME:
        return isSetRecordName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordDefinition_args)
        return this.equals((getRecordDefinition_args)that);
      return false;
    }

    public boolean equals(getRecordDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_recordName = true && this.isSetRecordName();
      boolean that_present_recordName = true && that.isSetRecordName();
      if (this_present_recordName || that_present_recordName) {
        if (!(this_present_recordName && that_present_recordName))
          return false;
        if (!this.recordName.equals(that.recordName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordDefinition_args typedOther = (getRecordDefinition_args)other;

      lastComparison = Boolean.valueOf(isSetRecordName()).compareTo(typedOther.isSetRecordName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordName, typedOther.recordName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordDefinition_args(");
      boolean first = true;

      sb.append("recordName:");
      if (this.recordName == null) {
        sb.append("null");
      } else {
        sb.append(this.recordName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordDefinition_argsStandardScheme getScheme() {
        return new getRecordDefinition_argsStandardScheme();
      }
    }

    private static class getRecordDefinition_argsStandardScheme extends StandardScheme<getRecordDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recordName = iprot.readString();
                struct.setRecordNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recordName != null) {
          oprot.writeFieldBegin(RECORD_NAME_FIELD_DESC);
          oprot.writeString(struct.recordName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordDefinition_argsTupleScheme getScheme() {
        return new getRecordDefinition_argsTupleScheme();
      }
    }

    private static class getRecordDefinition_argsTupleScheme extends TupleScheme<getRecordDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecordName()) {
          oprot.writeString(struct.recordName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recordName = iprot.readString();
          struct.setRecordNameIsSet(true);
        }
      }
    }

  }

  public static class getRecordDefinition_result implements org.apache.thrift.TBase<getRecordDefinition_result, getRecordDefinition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordDefinition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNDEF_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("undefRecord", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordDefinition_resultTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.data.RecordDefinition success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      UNDEF_RECORD((short)2, "undefRecord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // UNDEF_RECORD
            return UNDEF_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.data.RecordDefinition.class)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNDEF_RECORD, new org.apache.thrift.meta_data.FieldMetaData("undefRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordDefinition_result.class, metaDataMap);
    }

    public getRecordDefinition_result() {
    }

    public getRecordDefinition_result(
      dk.diku.poets.gen.thrift.data.RecordDefinition success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.undefRecord = undefRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordDefinition_result(getRecordDefinition_result other) {
      if (other.isSetSuccess()) {
        this.success = new dk.diku.poets.gen.thrift.data.RecordDefinition(other.success);
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetUndefRecord()) {
        this.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord(other.undefRecord);
      }
    }

    public getRecordDefinition_result deepCopy() {
      return new getRecordDefinition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.undefRecord = null;
    }

    public dk.diku.poets.gen.thrift.data.RecordDefinition getSuccess() {
      return this.success;
    }

    public getRecordDefinition_result setSuccess(dk.diku.poets.gen.thrift.data.RecordDefinition success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public getRecordDefinition_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.data.UndefinedRecord getUndefRecord() {
      return this.undefRecord;
    }

    public getRecordDefinition_result setUndefRecord(dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord) {
      this.undefRecord = undefRecord;
      return this;
    }

    public void unsetUndefRecord() {
      this.undefRecord = null;
    }

    /** Returns true if field undefRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetUndefRecord() {
      return this.undefRecord != null;
    }

    public void setUndefRecordIsSet(boolean value) {
      if (!value) {
        this.undefRecord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((dk.diku.poets.gen.thrift.data.RecordDefinition)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case UNDEF_RECORD:
        if (value == null) {
          unsetUndefRecord();
        } else {
          setUndefRecord((dk.diku.poets.gen.thrift.data.UndefinedRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case UNDEF_RECORD:
        return getUndefRecord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case UNDEF_RECORD:
        return isSetUndefRecord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordDefinition_result)
        return this.equals((getRecordDefinition_result)that);
      return false;
    }

    public boolean equals(getRecordDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_undefRecord = true && this.isSetUndefRecord();
      boolean that_present_undefRecord = true && that.isSetUndefRecord();
      if (this_present_undefRecord || that_present_undefRecord) {
        if (!(this_present_undefRecord && that_present_undefRecord))
          return false;
        if (!this.undefRecord.equals(that.undefRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordDefinition_result typedOther = (getRecordDefinition_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUndefRecord()).compareTo(typedOther.isSetUndefRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUndefRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.undefRecord, typedOther.undefRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordDefinition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("undefRecord:");
      if (this.undefRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.undefRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordDefinition_resultStandardScheme getScheme() {
        return new getRecordDefinition_resultStandardScheme();
      }
    }

    private static class getRecordDefinition_resultStandardScheme extends StandardScheme<getRecordDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new dk.diku.poets.gen.thrift.data.RecordDefinition();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNDEF_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord();
                struct.undefRecord.read(iprot);
                struct.setUndefRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.undefRecord != null) {
          oprot.writeFieldBegin(UNDEF_RECORD_FIELD_DESC);
          struct.undefRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordDefinition_resultTupleScheme getScheme() {
        return new getRecordDefinition_resultTupleScheme();
      }
    }

    private static class getRecordDefinition_resultTupleScheme extends TupleScheme<getRecordDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetUndefRecord()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetUndefRecord()) {
          struct.undefRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new dk.diku.poets.gen.thrift.data.RecordDefinition();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord();
          struct.undefRecord.read(iprot);
          struct.setUndefRecordIsSet(true);
        }
      }
    }

  }

  public static class getSubTypes_args implements org.apache.thrift.TBase<getSubTypes_args, getSubTypes_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubTypes_args");

    private static final org.apache.thrift.protocol.TField RECORD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubTypes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubTypes_argsTupleSchemeFactory());
    }

    public String recordName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_NAME((short)1, "recordName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_NAME
            return RECORD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_NAME, new org.apache.thrift.meta_data.FieldMetaData("recordName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RecordName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTypes_args.class, metaDataMap);
    }

    public getSubTypes_args() {
    }

    public getSubTypes_args(
      String recordName)
    {
      this();
      this.recordName = recordName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubTypes_args(getSubTypes_args other) {
      if (other.isSetRecordName()) {
        this.recordName = other.recordName;
      }
    }

    public getSubTypes_args deepCopy() {
      return new getSubTypes_args(this);
    }

    @Override
    public void clear() {
      this.recordName = null;
    }

    public String getRecordName() {
      return this.recordName;
    }

    public getSubTypes_args setRecordName(String recordName) {
      this.recordName = recordName;
      return this;
    }

    public void unsetRecordName() {
      this.recordName = null;
    }

    /** Returns true if field recordName is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordName() {
      return this.recordName != null;
    }

    public void setRecordNameIsSet(boolean value) {
      if (!value) {
        this.recordName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_NAME:
        if (value == null) {
          unsetRecordName();
        } else {
          setRecordName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_NAME:
        return getRecordName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_NAME:
        return isSetRecordName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubTypes_args)
        return this.equals((getSubTypes_args)that);
      return false;
    }

    public boolean equals(getSubTypes_args that) {
      if (that == null)
        return false;

      boolean this_present_recordName = true && this.isSetRecordName();
      boolean that_present_recordName = true && that.isSetRecordName();
      if (this_present_recordName || that_present_recordName) {
        if (!(this_present_recordName && that_present_recordName))
          return false;
        if (!this.recordName.equals(that.recordName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSubTypes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSubTypes_args typedOther = (getSubTypes_args)other;

      lastComparison = Boolean.valueOf(isSetRecordName()).compareTo(typedOther.isSetRecordName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordName, typedOther.recordName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubTypes_args(");
      boolean first = true;

      sb.append("recordName:");
      if (this.recordName == null) {
        sb.append("null");
      } else {
        sb.append(this.recordName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubTypes_argsStandardSchemeFactory implements SchemeFactory {
      public getSubTypes_argsStandardScheme getScheme() {
        return new getSubTypes_argsStandardScheme();
      }
    }

    private static class getSubTypes_argsStandardScheme extends StandardScheme<getSubTypes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTypes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recordName = iprot.readString();
                struct.setRecordNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTypes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recordName != null) {
          oprot.writeFieldBegin(RECORD_NAME_FIELD_DESC);
          oprot.writeString(struct.recordName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubTypes_argsTupleSchemeFactory implements SchemeFactory {
      public getSubTypes_argsTupleScheme getScheme() {
        return new getSubTypes_argsTupleScheme();
      }
    }

    private static class getSubTypes_argsTupleScheme extends TupleScheme<getSubTypes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecordName()) {
          oprot.writeString(struct.recordName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubTypes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recordName = iprot.readString();
          struct.setRecordNameIsSet(true);
        }
      }
    }

  }

  public static class getSubTypes_result implements org.apache.thrift.TBase<getSubTypes_result, getSubTypes_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubTypes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNDEF_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("undefRecord", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubTypes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubTypes_resultTupleSchemeFactory());
    }

    public Set<String> success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      UNDEF_RECORD((short)2, "undefRecord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // UNDEF_RECORD
            return UNDEF_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "RecordName"))));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNDEF_RECORD, new org.apache.thrift.meta_data.FieldMetaData("undefRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubTypes_result.class, metaDataMap);
    }

    public getSubTypes_result() {
    }

    public getSubTypes_result(
      Set<String> success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.undefRecord = undefRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubTypes_result(getSubTypes_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetUndefRecord()) {
        this.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord(other.undefRecord);
      }
    }

    public getSubTypes_result deepCopy() {
      return new getSubTypes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.undefRecord = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public getSubTypes_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public getSubTypes_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.data.UndefinedRecord getUndefRecord() {
      return this.undefRecord;
    }

    public getSubTypes_result setUndefRecord(dk.diku.poets.gen.thrift.data.UndefinedRecord undefRecord) {
      this.undefRecord = undefRecord;
      return this;
    }

    public void unsetUndefRecord() {
      this.undefRecord = null;
    }

    /** Returns true if field undefRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetUndefRecord() {
      return this.undefRecord != null;
    }

    public void setUndefRecordIsSet(boolean value) {
      if (!value) {
        this.undefRecord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case UNDEF_RECORD:
        if (value == null) {
          unsetUndefRecord();
        } else {
          setUndefRecord((dk.diku.poets.gen.thrift.data.UndefinedRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case UNDEF_RECORD:
        return getUndefRecord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case UNDEF_RECORD:
        return isSetUndefRecord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubTypes_result)
        return this.equals((getSubTypes_result)that);
      return false;
    }

    public boolean equals(getSubTypes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_undefRecord = true && this.isSetUndefRecord();
      boolean that_present_undefRecord = true && that.isSetUndefRecord();
      if (this_present_undefRecord || that_present_undefRecord) {
        if (!(this_present_undefRecord && that_present_undefRecord))
          return false;
        if (!this.undefRecord.equals(that.undefRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSubTypes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSubTypes_result typedOther = (getSubTypes_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUndefRecord()).compareTo(typedOther.isSetUndefRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUndefRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.undefRecord, typedOther.undefRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubTypes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("undefRecord:");
      if (this.undefRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.undefRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubTypes_resultStandardSchemeFactory implements SchemeFactory {
      public getSubTypes_resultStandardScheme getScheme() {
        return new getSubTypes_resultStandardScheme();
      }
    }

    private static class getSubTypes_resultStandardScheme extends StandardScheme<getSubTypes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubTypes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNDEF_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord();
                struct.undefRecord.read(iprot);
                struct.setUndefRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubTypes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.undefRecord != null) {
          oprot.writeFieldBegin(UNDEF_RECORD_FIELD_DESC);
          struct.undefRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubTypes_resultTupleSchemeFactory implements SchemeFactory {
      public getSubTypes_resultTupleScheme getScheme() {
        return new getSubTypes_resultTupleScheme();
      }
    }

    private static class getSubTypes_resultTupleScheme extends TupleScheme<getSubTypes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetUndefRecord()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetUndefRecord()) {
          struct.undefRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubTypes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.undefRecord = new dk.diku.poets.gen.thrift.data.UndefinedRecord();
          struct.undefRecord.read(iprot);
          struct.setUndefRecordIsSet(true);
        }
      }
    }

  }

  public static class getContract_args implements org.apache.thrift.TBase<getContract_args, getContract_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContract_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("transactions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getContract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getContract_argsTupleSchemeFactory());
    }

    public int cid; // required
    public List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      TRANSACTIONS((short)2, "transactions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // TRANSACTIONS
            return TRANSACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      tmpMap.put(_Fields.TRANSACTIONS, new org.apache.thrift.meta_data.FieldMetaData("transactions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.contracts.Transaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContract_args.class, metaDataMap);
    }

    public getContract_args() {
    }

    public getContract_args(
      int cid,
      List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.transactions = transactions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContract_args(getContract_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cid = other.cid;
      if (other.isSetTransactions()) {
        List<dk.diku.poets.gen.thrift.contracts.Transaction> __this__transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
        for (dk.diku.poets.gen.thrift.contracts.Transaction other_element : other.transactions) {
          __this__transactions.add(new dk.diku.poets.gen.thrift.contracts.Transaction(other_element));
        }
        this.transactions = __this__transactions;
      }
    }

    public getContract_args deepCopy() {
      return new getContract_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.transactions = null;
    }

    public int getCid() {
      return this.cid;
    }

    public getContract_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bit_vector.clear(__CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return __isset_bit_vector.get(__CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bit_vector.set(__CID_ISSET_ID, value);
    }

    public int getTransactionsSize() {
      return (this.transactions == null) ? 0 : this.transactions.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactionsIterator() {
      return (this.transactions == null) ? null : this.transactions.iterator();
    }

    public void addToTransactions(dk.diku.poets.gen.thrift.contracts.Transaction elem) {
      if (this.transactions == null) {
        this.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
      }
      this.transactions.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactions() {
      return this.transactions;
    }

    public getContract_args setTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) {
      this.transactions = transactions;
      return this;
    }

    public void unsetTransactions() {
      this.transactions = null;
    }

    /** Returns true if field transactions is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactions() {
      return this.transactions != null;
    }

    public void setTransactionsIsSet(boolean value) {
      if (!value) {
        this.transactions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      case TRANSACTIONS:
        if (value == null) {
          unsetTransactions();
        } else {
          setTransactions((List<dk.diku.poets.gen.thrift.contracts.Transaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Integer.valueOf(getCid());

      case TRANSACTIONS:
        return getTransactions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case TRANSACTIONS:
        return isSetTransactions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContract_args)
        return this.equals((getContract_args)that);
      return false;
    }

    public boolean equals(getContract_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_transactions = true && this.isSetTransactions();
      boolean that_present_transactions = true && that.isSetTransactions();
      if (this_present_transactions || that_present_transactions) {
        if (!(this_present_transactions && that_present_transactions))
          return false;
        if (!this.transactions.equals(that.transactions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getContract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getContract_args typedOther = (getContract_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransactions()).compareTo(typedOther.isSetTransactions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactions, typedOther.transactions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getContract_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transactions:");
      if (this.transactions == null) {
        sb.append("null");
      } else {
        sb.append(this.transactions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContract_argsStandardSchemeFactory implements SchemeFactory {
      public getContract_argsStandardScheme getScheme() {
        return new getContract_argsStandardScheme();
      }
    }

    private static class getContract_argsStandardScheme extends StandardScheme<getContract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    dk.diku.poets.gen.thrift.contracts.Transaction _elem10; // required
                    _elem10 = new dk.diku.poets.gen.thrift.contracts.Transaction();
                    _elem10.read(iprot);
                    struct.transactions.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setTransactionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        if (struct.transactions != null) {
          oprot.writeFieldBegin(TRANSACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transactions.size()));
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter11 : struct.transactions)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContract_argsTupleSchemeFactory implements SchemeFactory {
      public getContract_argsTupleScheme getScheme() {
        return new getContract_argsTupleScheme();
      }
    }

    private static class getContract_argsTupleScheme extends TupleScheme<getContract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetTransactions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetTransactions()) {
          {
            oprot.writeI32(struct.transactions.size());
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter12 : struct.transactions)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              dk.diku.poets.gen.thrift.contracts.Transaction _elem15; // required
              _elem15 = new dk.diku.poets.gen.thrift.contracts.Transaction();
              _elem15.read(iprot);
              struct.transactions.add(_elem15);
            }
          }
          struct.setTransactionsIsSet(true);
        }
      }
    }

  }

  public static class getContract_result implements org.apache.thrift.TBase<getContract_result, getContract_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField UNEXPECTED_TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unexpectedTransaction", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField OLD_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("oldErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getContract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getContract_resultTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.contracts.Residual success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr; // required
    public RunTimeException runtimeErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      NOT_FOUND((short)3, "notFound"),
      CONTRACT_BREACH((short)4, "contractBreach"),
      UNEXPECTED_TRANSACTION((short)5, "unexpectedTransaction"),
      TYPE_ERR((short)6, "typeErr"),
      OLD_ERR((short)7, "oldErr"),
      RUNTIME_ERR((short)8, "runtimeErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 5: // UNEXPECTED_TRANSACTION
            return UNEXPECTED_TRANSACTION;
          case 6: // TYPE_ERR
            return TYPE_ERR;
          case 7: // OLD_ERR
            return OLD_ERR;
          case 8: // RUNTIME_ERR
            return RUNTIME_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.contracts.Residual.class)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNEXPECTED_TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("unexpectedTransaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OLD_ERR, new org.apache.thrift.meta_data.FieldMetaData("oldErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContract_result.class, metaDataMap);
    }

    public getContract_result() {
    }

    public getContract_result(
      dk.diku.poets.gen.thrift.contracts.Residual success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr,
      RunTimeException runtimeErr)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.msg = msg;
      this.notFound = notFound;
      this.contractBreach = contractBreach;
      this.unexpectedTransaction = unexpectedTransaction;
      this.typeErr = typeErr;
      this.oldErr = oldErr;
      this.runtimeErr = runtimeErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContract_result(getContract_result other) {
      if (other.isSetSuccess()) {
        this.success = new dk.diku.poets.gen.thrift.contracts.Residual(other.success);
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetUnexpectedTransaction()) {
        this.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction(other.unexpectedTransaction);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetOldErr()) {
        this.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException(other.oldErr);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
    }

    public getContract_result deepCopy() {
      return new getContract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.msg = null;
      this.notFound = null;
      this.contractBreach = null;
      this.unexpectedTransaction = null;
      this.typeErr = null;
      this.oldErr = null;
      this.runtimeErr = null;
    }

    public dk.diku.poets.gen.thrift.contracts.Residual getSuccess() {
      return this.success;
    }

    public getContract_result setSuccess(dk.diku.poets.gen.thrift.contracts.Residual success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public getContract_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public getContract_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public getContract_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public getContract_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction getUnexpectedTransaction() {
      return this.unexpectedTransaction;
    }

    public getContract_result setUnexpectedTransaction(dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
      this.unexpectedTransaction = unexpectedTransaction;
      return this;
    }

    public void unsetUnexpectedTransaction() {
      this.unexpectedTransaction = null;
    }

    /** Returns true if field unexpectedTransaction is set (has been assigned a value) and false otherwise */
    public boolean isSetUnexpectedTransaction() {
      return this.unexpectedTransaction != null;
    }

    public void setUnexpectedTransactionIsSet(boolean value) {
      if (!value) {
        this.unexpectedTransaction = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public getContract_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException getOldErr() {
      return this.oldErr;
    }

    public getContract_result setOldErr(dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
      this.oldErr = oldErr;
      return this;
    }

    public void unsetOldErr() {
      this.oldErr = null;
    }

    /** Returns true if field oldErr is set (has been assigned a value) and false otherwise */
    public boolean isSetOldErr() {
      return this.oldErr != null;
    }

    public void setOldErrIsSet(boolean value) {
      if (!value) {
        this.oldErr = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public getContract_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((dk.diku.poets.gen.thrift.contracts.Residual)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case UNEXPECTED_TRANSACTION:
        if (value == null) {
          unsetUnexpectedTransaction();
        } else {
          setUnexpectedTransaction((dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case OLD_ERR:
        if (value == null) {
          unsetOldErr();
        } else {
          setOldErr((dk.diku.poets.gen.thrift.contracts.TransactionTooOldException)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case NOT_FOUND:
        return getNotFound();

      case CONTRACT_BREACH:
        return getContractBreach();

      case UNEXPECTED_TRANSACTION:
        return getUnexpectedTransaction();

      case TYPE_ERR:
        return getTypeErr();

      case OLD_ERR:
        return getOldErr();

      case RUNTIME_ERR:
        return getRuntimeErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case NOT_FOUND:
        return isSetNotFound();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case UNEXPECTED_TRANSACTION:
        return isSetUnexpectedTransaction();
      case TYPE_ERR:
        return isSetTypeErr();
      case OLD_ERR:
        return isSetOldErr();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContract_result)
        return this.equals((getContract_result)that);
      return false;
    }

    public boolean equals(getContract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_unexpectedTransaction = true && this.isSetUnexpectedTransaction();
      boolean that_present_unexpectedTransaction = true && that.isSetUnexpectedTransaction();
      if (this_present_unexpectedTransaction || that_present_unexpectedTransaction) {
        if (!(this_present_unexpectedTransaction && that_present_unexpectedTransaction))
          return false;
        if (!this.unexpectedTransaction.equals(that.unexpectedTransaction))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_oldErr = true && this.isSetOldErr();
      boolean that_present_oldErr = true && that.isSetOldErr();
      if (this_present_oldErr || that_present_oldErr) {
        if (!(this_present_oldErr && that_present_oldErr))
          return false;
        if (!this.oldErr.equals(that.oldErr))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getContract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getContract_result typedOther = (getContract_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnexpectedTransaction()).compareTo(typedOther.isSetUnexpectedTransaction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnexpectedTransaction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unexpectedTransaction, typedOther.unexpectedTransaction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldErr()).compareTo(typedOther.isSetOldErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldErr, typedOther.oldErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getContract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unexpectedTransaction:");
      if (this.unexpectedTransaction == null) {
        sb.append("null");
      } else {
        sb.append(this.unexpectedTransaction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldErr:");
      if (this.oldErr == null) {
        sb.append("null");
      } else {
        sb.append(this.oldErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContract_resultStandardSchemeFactory implements SchemeFactory {
      public getContract_resultStandardScheme getScheme() {
        return new getContract_resultStandardScheme();
      }
    }

    private static class getContract_resultStandardScheme extends StandardScheme<getContract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new dk.diku.poets.gen.thrift.contracts.Residual();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // UNEXPECTED_TRANSACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
                struct.unexpectedTransaction.read(iprot);
                struct.setUnexpectedTransactionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OLD_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
                struct.oldErr.read(iprot);
                struct.setOldErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unexpectedTransaction != null) {
          oprot.writeFieldBegin(UNEXPECTED_TRANSACTION_FIELD_DESC);
          struct.unexpectedTransaction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oldErr != null) {
          oprot.writeFieldBegin(OLD_ERR_FIELD_DESC);
          struct.oldErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContract_resultTupleSchemeFactory implements SchemeFactory {
      public getContract_resultTupleScheme getScheme() {
        return new getContract_resultTupleScheme();
      }
    }

    private static class getContract_resultTupleScheme extends TupleScheme<getContract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        if (struct.isSetNotFound()) {
          optionals.set(3);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(4);
        }
        if (struct.isSetUnexpectedTransaction()) {
          optionals.set(5);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(6);
        }
        if (struct.isSetOldErr()) {
          optionals.set(7);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetUnexpectedTransaction()) {
          struct.unexpectedTransaction.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetOldErr()) {
          struct.oldErr.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.success = new dk.diku.poets.gen.thrift.contracts.Residual();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(5)) {
          struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
          struct.unexpectedTransaction.read(iprot);
          struct.setUnexpectedTransactionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
          struct.oldErr.read(iprot);
          struct.setOldErrIsSet(true);
        }
        if (incoming.get(8)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
      }
    }

  }

  public static class getExpectedTransactions_args implements org.apache.thrift.TBase<getExpectedTransactions_args, getExpectedTransactions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExpectedTransactions_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("transactions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExpectedTransactions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExpectedTransactions_argsTupleSchemeFactory());
    }

    public int cid; // required
    public List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      TRANSACTIONS((short)2, "transactions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // TRANSACTIONS
            return TRANSACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      tmpMap.put(_Fields.TRANSACTIONS, new org.apache.thrift.meta_data.FieldMetaData("transactions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.contracts.Transaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExpectedTransactions_args.class, metaDataMap);
    }

    public getExpectedTransactions_args() {
    }

    public getExpectedTransactions_args(
      int cid,
      List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.transactions = transactions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExpectedTransactions_args(getExpectedTransactions_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cid = other.cid;
      if (other.isSetTransactions()) {
        List<dk.diku.poets.gen.thrift.contracts.Transaction> __this__transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
        for (dk.diku.poets.gen.thrift.contracts.Transaction other_element : other.transactions) {
          __this__transactions.add(new dk.diku.poets.gen.thrift.contracts.Transaction(other_element));
        }
        this.transactions = __this__transactions;
      }
    }

    public getExpectedTransactions_args deepCopy() {
      return new getExpectedTransactions_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.transactions = null;
    }

    public int getCid() {
      return this.cid;
    }

    public getExpectedTransactions_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bit_vector.clear(__CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return __isset_bit_vector.get(__CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bit_vector.set(__CID_ISSET_ID, value);
    }

    public int getTransactionsSize() {
      return (this.transactions == null) ? 0 : this.transactions.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactionsIterator() {
      return (this.transactions == null) ? null : this.transactions.iterator();
    }

    public void addToTransactions(dk.diku.poets.gen.thrift.contracts.Transaction elem) {
      if (this.transactions == null) {
        this.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
      }
      this.transactions.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactions() {
      return this.transactions;
    }

    public getExpectedTransactions_args setTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) {
      this.transactions = transactions;
      return this;
    }

    public void unsetTransactions() {
      this.transactions = null;
    }

    /** Returns true if field transactions is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactions() {
      return this.transactions != null;
    }

    public void setTransactionsIsSet(boolean value) {
      if (!value) {
        this.transactions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      case TRANSACTIONS:
        if (value == null) {
          unsetTransactions();
        } else {
          setTransactions((List<dk.diku.poets.gen.thrift.contracts.Transaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Integer.valueOf(getCid());

      case TRANSACTIONS:
        return getTransactions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case TRANSACTIONS:
        return isSetTransactions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExpectedTransactions_args)
        return this.equals((getExpectedTransactions_args)that);
      return false;
    }

    public boolean equals(getExpectedTransactions_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_transactions = true && this.isSetTransactions();
      boolean that_present_transactions = true && that.isSetTransactions();
      if (this_present_transactions || that_present_transactions) {
        if (!(this_present_transactions && that_present_transactions))
          return false;
        if (!this.transactions.equals(that.transactions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExpectedTransactions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExpectedTransactions_args typedOther = (getExpectedTransactions_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransactions()).compareTo(typedOther.isSetTransactions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactions, typedOther.transactions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExpectedTransactions_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transactions:");
      if (this.transactions == null) {
        sb.append("null");
      } else {
        sb.append(this.transactions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExpectedTransactions_argsStandardSchemeFactory implements SchemeFactory {
      public getExpectedTransactions_argsStandardScheme getScheme() {
        return new getExpectedTransactions_argsStandardScheme();
      }
    }

    private static class getExpectedTransactions_argsStandardScheme extends StandardScheme<getExpectedTransactions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExpectedTransactions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    dk.diku.poets.gen.thrift.contracts.Transaction _elem18; // required
                    _elem18 = new dk.diku.poets.gen.thrift.contracts.Transaction();
                    _elem18.read(iprot);
                    struct.transactions.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setTransactionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExpectedTransactions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        if (struct.transactions != null) {
          oprot.writeFieldBegin(TRANSACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transactions.size()));
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter19 : struct.transactions)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExpectedTransactions_argsTupleSchemeFactory implements SchemeFactory {
      public getExpectedTransactions_argsTupleScheme getScheme() {
        return new getExpectedTransactions_argsTupleScheme();
      }
    }

    private static class getExpectedTransactions_argsTupleScheme extends TupleScheme<getExpectedTransactions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExpectedTransactions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetTransactions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetTransactions()) {
          {
            oprot.writeI32(struct.transactions.size());
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter20 : struct.transactions)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExpectedTransactions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              dk.diku.poets.gen.thrift.contracts.Transaction _elem23; // required
              _elem23 = new dk.diku.poets.gen.thrift.contracts.Transaction();
              _elem23.read(iprot);
              struct.transactions.add(_elem23);
            }
          }
          struct.setTransactionsIsSet(true);
        }
      }
    }

  }

  public static class getExpectedTransactions_result implements org.apache.thrift.TBase<getExpectedTransactions_result, getExpectedTransactions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExpectedTransactions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField UNEXPECTED_TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unexpectedTransaction", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField OLD_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("oldErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExpectedTransactions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExpectedTransactions_resultTupleSchemeFactory());
    }

    public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr; // required
    public RunTimeException runtimeErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      NOT_FOUND((short)3, "notFound"),
      CONTRACT_BREACH((short)4, "contractBreach"),
      UNEXPECTED_TRANSACTION((short)5, "unexpectedTransaction"),
      TYPE_ERR((short)6, "typeErr"),
      OLD_ERR((short)7, "oldErr"),
      RUNTIME_ERR((short)8, "runtimeErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 5: // UNEXPECTED_TRANSACTION
            return UNEXPECTED_TRANSACTION;
          case 6: // TYPE_ERR
            return TYPE_ERR;
          case 7: // OLD_ERR
            return OLD_ERR;
          case 8: // RUNTIME_ERR
            return RUNTIME_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.contracts.TransactionPattern.class))));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNEXPECTED_TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("unexpectedTransaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OLD_ERR, new org.apache.thrift.meta_data.FieldMetaData("oldErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExpectedTransactions_result.class, metaDataMap);
    }

    public getExpectedTransactions_result() {
    }

    public getExpectedTransactions_result(
      List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr,
      RunTimeException runtimeErr)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.msg = msg;
      this.notFound = notFound;
      this.contractBreach = contractBreach;
      this.unexpectedTransaction = unexpectedTransaction;
      this.typeErr = typeErr;
      this.oldErr = oldErr;
      this.runtimeErr = runtimeErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExpectedTransactions_result(getExpectedTransactions_result other) {
      if (other.isSetSuccess()) {
        List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> __this__success = new ArrayList<dk.diku.poets.gen.thrift.contracts.TransactionPattern>();
        for (dk.diku.poets.gen.thrift.contracts.TransactionPattern other_element : other.success) {
          __this__success.add(new dk.diku.poets.gen.thrift.contracts.TransactionPattern(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetUnexpectedTransaction()) {
        this.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction(other.unexpectedTransaction);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetOldErr()) {
        this.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException(other.oldErr);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
    }

    public getExpectedTransactions_result deepCopy() {
      return new getExpectedTransactions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.msg = null;
      this.notFound = null;
      this.contractBreach = null;
      this.unexpectedTransaction = null;
      this.typeErr = null;
      this.oldErr = null;
      this.runtimeErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.contracts.TransactionPattern> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(dk.diku.poets.gen.thrift.contracts.TransactionPattern elem) {
      if (this.success == null) {
        this.success = new ArrayList<dk.diku.poets.gen.thrift.contracts.TransactionPattern>();
      }
      this.success.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> getSuccess() {
      return this.success;
    }

    public getExpectedTransactions_result setSuccess(List<dk.diku.poets.gen.thrift.contracts.TransactionPattern> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public getExpectedTransactions_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public getExpectedTransactions_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public getExpectedTransactions_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public getExpectedTransactions_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction getUnexpectedTransaction() {
      return this.unexpectedTransaction;
    }

    public getExpectedTransactions_result setUnexpectedTransaction(dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
      this.unexpectedTransaction = unexpectedTransaction;
      return this;
    }

    public void unsetUnexpectedTransaction() {
      this.unexpectedTransaction = null;
    }

    /** Returns true if field unexpectedTransaction is set (has been assigned a value) and false otherwise */
    public boolean isSetUnexpectedTransaction() {
      return this.unexpectedTransaction != null;
    }

    public void setUnexpectedTransactionIsSet(boolean value) {
      if (!value) {
        this.unexpectedTransaction = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public getExpectedTransactions_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException getOldErr() {
      return this.oldErr;
    }

    public getExpectedTransactions_result setOldErr(dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
      this.oldErr = oldErr;
      return this;
    }

    public void unsetOldErr() {
      this.oldErr = null;
    }

    /** Returns true if field oldErr is set (has been assigned a value) and false otherwise */
    public boolean isSetOldErr() {
      return this.oldErr != null;
    }

    public void setOldErrIsSet(boolean value) {
      if (!value) {
        this.oldErr = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public getExpectedTransactions_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<dk.diku.poets.gen.thrift.contracts.TransactionPattern>)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case UNEXPECTED_TRANSACTION:
        if (value == null) {
          unsetUnexpectedTransaction();
        } else {
          setUnexpectedTransaction((dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case OLD_ERR:
        if (value == null) {
          unsetOldErr();
        } else {
          setOldErr((dk.diku.poets.gen.thrift.contracts.TransactionTooOldException)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case NOT_FOUND:
        return getNotFound();

      case CONTRACT_BREACH:
        return getContractBreach();

      case UNEXPECTED_TRANSACTION:
        return getUnexpectedTransaction();

      case TYPE_ERR:
        return getTypeErr();

      case OLD_ERR:
        return getOldErr();

      case RUNTIME_ERR:
        return getRuntimeErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case NOT_FOUND:
        return isSetNotFound();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case UNEXPECTED_TRANSACTION:
        return isSetUnexpectedTransaction();
      case TYPE_ERR:
        return isSetTypeErr();
      case OLD_ERR:
        return isSetOldErr();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExpectedTransactions_result)
        return this.equals((getExpectedTransactions_result)that);
      return false;
    }

    public boolean equals(getExpectedTransactions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_unexpectedTransaction = true && this.isSetUnexpectedTransaction();
      boolean that_present_unexpectedTransaction = true && that.isSetUnexpectedTransaction();
      if (this_present_unexpectedTransaction || that_present_unexpectedTransaction) {
        if (!(this_present_unexpectedTransaction && that_present_unexpectedTransaction))
          return false;
        if (!this.unexpectedTransaction.equals(that.unexpectedTransaction))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_oldErr = true && this.isSetOldErr();
      boolean that_present_oldErr = true && that.isSetOldErr();
      if (this_present_oldErr || that_present_oldErr) {
        if (!(this_present_oldErr && that_present_oldErr))
          return false;
        if (!this.oldErr.equals(that.oldErr))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExpectedTransactions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExpectedTransactions_result typedOther = (getExpectedTransactions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnexpectedTransaction()).compareTo(typedOther.isSetUnexpectedTransaction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnexpectedTransaction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unexpectedTransaction, typedOther.unexpectedTransaction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldErr()).compareTo(typedOther.isSetOldErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldErr, typedOther.oldErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExpectedTransactions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unexpectedTransaction:");
      if (this.unexpectedTransaction == null) {
        sb.append("null");
      } else {
        sb.append(this.unexpectedTransaction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldErr:");
      if (this.oldErr == null) {
        sb.append("null");
      } else {
        sb.append(this.oldErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExpectedTransactions_resultStandardSchemeFactory implements SchemeFactory {
      public getExpectedTransactions_resultStandardScheme getScheme() {
        return new getExpectedTransactions_resultStandardScheme();
      }
    }

    private static class getExpectedTransactions_resultStandardScheme extends StandardScheme<getExpectedTransactions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExpectedTransactions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<dk.diku.poets.gen.thrift.contracts.TransactionPattern>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    dk.diku.poets.gen.thrift.contracts.TransactionPattern _elem26; // required
                    _elem26 = new dk.diku.poets.gen.thrift.contracts.TransactionPattern();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // UNEXPECTED_TRANSACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
                struct.unexpectedTransaction.read(iprot);
                struct.setUnexpectedTransactionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OLD_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
                struct.oldErr.read(iprot);
                struct.setOldErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExpectedTransactions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (dk.diku.poets.gen.thrift.contracts.TransactionPattern _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unexpectedTransaction != null) {
          oprot.writeFieldBegin(UNEXPECTED_TRANSACTION_FIELD_DESC);
          struct.unexpectedTransaction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oldErr != null) {
          oprot.writeFieldBegin(OLD_ERR_FIELD_DESC);
          struct.oldErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExpectedTransactions_resultTupleSchemeFactory implements SchemeFactory {
      public getExpectedTransactions_resultTupleScheme getScheme() {
        return new getExpectedTransactions_resultTupleScheme();
      }
    }

    private static class getExpectedTransactions_resultTupleScheme extends TupleScheme<getExpectedTransactions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExpectedTransactions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        if (struct.isSetNotFound()) {
          optionals.set(3);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(4);
        }
        if (struct.isSetUnexpectedTransaction()) {
          optionals.set(5);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(6);
        }
        if (struct.isSetOldErr()) {
          optionals.set(7);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (dk.diku.poets.gen.thrift.contracts.TransactionPattern _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetUnexpectedTransaction()) {
          struct.unexpectedTransaction.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetOldErr()) {
          struct.oldErr.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExpectedTransactions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<dk.diku.poets.gen.thrift.contracts.TransactionPattern>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              dk.diku.poets.gen.thrift.contracts.TransactionPattern _elem31; // required
              _elem31 = new dk.diku.poets.gen.thrift.contracts.TransactionPattern();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(3)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(5)) {
          struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
          struct.unexpectedTransaction.read(iprot);
          struct.setUnexpectedTransactionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
          struct.oldErr.read(iprot);
          struct.setOldErrIsSet(true);
        }
        if (incoming.get(8)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
      }
    }

  }

  public static class registerTransactions_args implements org.apache.thrift.TBase<registerTransactions_args, registerTransactions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerTransactions_args");

    private static final org.apache.thrift.protocol.TField TRANSACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("transactions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerTransactions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerTransactions_argsTupleSchemeFactory());
    }

    public List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTIONS((short)1, "transactions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTIONS
            return TRANSACTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTIONS, new org.apache.thrift.meta_data.FieldMetaData("transactions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.contracts.Transaction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerTransactions_args.class, metaDataMap);
    }

    public registerTransactions_args() {
    }

    public registerTransactions_args(
      List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions)
    {
      this();
      this.transactions = transactions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerTransactions_args(registerTransactions_args other) {
      if (other.isSetTransactions()) {
        List<dk.diku.poets.gen.thrift.contracts.Transaction> __this__transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
        for (dk.diku.poets.gen.thrift.contracts.Transaction other_element : other.transactions) {
          __this__transactions.add(new dk.diku.poets.gen.thrift.contracts.Transaction(other_element));
        }
        this.transactions = __this__transactions;
      }
    }

    public registerTransactions_args deepCopy() {
      return new registerTransactions_args(this);
    }

    @Override
    public void clear() {
      this.transactions = null;
    }

    public int getTransactionsSize() {
      return (this.transactions == null) ? 0 : this.transactions.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactionsIterator() {
      return (this.transactions == null) ? null : this.transactions.iterator();
    }

    public void addToTransactions(dk.diku.poets.gen.thrift.contracts.Transaction elem) {
      if (this.transactions == null) {
        this.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>();
      }
      this.transactions.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.contracts.Transaction> getTransactions() {
      return this.transactions;
    }

    public registerTransactions_args setTransactions(List<dk.diku.poets.gen.thrift.contracts.Transaction> transactions) {
      this.transactions = transactions;
      return this;
    }

    public void unsetTransactions() {
      this.transactions = null;
    }

    /** Returns true if field transactions is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactions() {
      return this.transactions != null;
    }

    public void setTransactionsIsSet(boolean value) {
      if (!value) {
        this.transactions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTIONS:
        if (value == null) {
          unsetTransactions();
        } else {
          setTransactions((List<dk.diku.poets.gen.thrift.contracts.Transaction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTIONS:
        return getTransactions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTIONS:
        return isSetTransactions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerTransactions_args)
        return this.equals((registerTransactions_args)that);
      return false;
    }

    public boolean equals(registerTransactions_args that) {
      if (that == null)
        return false;

      boolean this_present_transactions = true && this.isSetTransactions();
      boolean that_present_transactions = true && that.isSetTransactions();
      if (this_present_transactions || that_present_transactions) {
        if (!(this_present_transactions && that_present_transactions))
          return false;
        if (!this.transactions.equals(that.transactions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerTransactions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerTransactions_args typedOther = (registerTransactions_args)other;

      lastComparison = Boolean.valueOf(isSetTransactions()).compareTo(typedOther.isSetTransactions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactions, typedOther.transactions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerTransactions_args(");
      boolean first = true;

      sb.append("transactions:");
      if (this.transactions == null) {
        sb.append("null");
      } else {
        sb.append(this.transactions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerTransactions_argsStandardSchemeFactory implements SchemeFactory {
      public registerTransactions_argsStandardScheme getScheme() {
        return new registerTransactions_argsStandardScheme();
      }
    }

    private static class registerTransactions_argsStandardScheme extends StandardScheme<registerTransactions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerTransactions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    dk.diku.poets.gen.thrift.contracts.Transaction _elem34; // required
                    _elem34 = new dk.diku.poets.gen.thrift.contracts.Transaction();
                    _elem34.read(iprot);
                    struct.transactions.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setTransactionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerTransactions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactions != null) {
          oprot.writeFieldBegin(TRANSACTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transactions.size()));
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter35 : struct.transactions)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerTransactions_argsTupleSchemeFactory implements SchemeFactory {
      public registerTransactions_argsTupleScheme getScheme() {
        return new registerTransactions_argsTupleScheme();
      }
    }

    private static class registerTransactions_argsTupleScheme extends TupleScheme<registerTransactions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerTransactions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransactions()) {
          {
            oprot.writeI32(struct.transactions.size());
            for (dk.diku.poets.gen.thrift.contracts.Transaction _iter36 : struct.transactions)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerTransactions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.transactions = new ArrayList<dk.diku.poets.gen.thrift.contracts.Transaction>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              dk.diku.poets.gen.thrift.contracts.Transaction _elem39; // required
              _elem39 = new dk.diku.poets.gen.thrift.contracts.Transaction();
              _elem39.read(iprot);
              struct.transactions.add(_elem39);
            }
          }
          struct.setTransactionsIsSet(true);
        }
      }
    }

  }

  public static class registerTransactions_result implements org.apache.thrift.TBase<registerTransactions_result, registerTransactions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerTransactions_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField UNEXPECTED_TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unexpectedTransaction", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField OLD_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("oldErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)8);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)9);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdDeleted", org.apache.thrift.protocol.TType.STRUCT, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerTransactions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerTransactions_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr; // required
    public RunTimeException runtimeErr; // required
    public dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound; // required
    public dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      NOT_FOUND((short)3, "notFound"),
      CONTRACT_BREACH((short)4, "contractBreach"),
      UNEXPECTED_TRANSACTION((short)5, "unexpectedTransaction"),
      TYPE_ERR((short)6, "typeErr"),
      OLD_ERR((short)7, "oldErr"),
      RUNTIME_ERR((short)8, "runtimeErr"),
      ENTITY_ID_NOT_FOUND((short)9, "entityIdNotFound"),
      ENTITY_ID_DELETED((short)10, "entityIdDeleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 5: // UNEXPECTED_TRANSACTION
            return UNEXPECTED_TRANSACTION;
          case 6: // TYPE_ERR
            return TYPE_ERR;
          case 7: // OLD_ERR
            return OLD_ERR;
          case 8: // RUNTIME_ERR
            return RUNTIME_ERR;
          case 9: // ENTITY_ID_NOT_FOUND
            return ENTITY_ID_NOT_FOUND;
          case 10: // ENTITY_ID_DELETED
            return ENTITY_ID_DELETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNEXPECTED_TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("unexpectedTransaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.OLD_ERR, new org.apache.thrift.meta_data.FieldMetaData("oldErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("entityIdNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_DELETED, new org.apache.thrift.meta_data.FieldMetaData("entityIdDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerTransactions_result.class, metaDataMap);
    }

    public registerTransactions_result() {
    }

    public registerTransactions_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr,
      RunTimeException runtimeErr,
      dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound,
      dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted)
    {
      this();
      this.arg = arg;
      this.msg = msg;
      this.notFound = notFound;
      this.contractBreach = contractBreach;
      this.unexpectedTransaction = unexpectedTransaction;
      this.typeErr = typeErr;
      this.oldErr = oldErr;
      this.runtimeErr = runtimeErr;
      this.entityIdNotFound = entityIdNotFound;
      this.entityIdDeleted = entityIdDeleted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerTransactions_result(registerTransactions_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetUnexpectedTransaction()) {
        this.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction(other.unexpectedTransaction);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetOldErr()) {
        this.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException(other.oldErr);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
      if (other.isSetEntityIdNotFound()) {
        this.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound(other.entityIdNotFound);
      }
      if (other.isSetEntityIdDeleted()) {
        this.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted(other.entityIdDeleted);
      }
    }

    public registerTransactions_result deepCopy() {
      return new registerTransactions_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.msg = null;
      this.notFound = null;
      this.contractBreach = null;
      this.unexpectedTransaction = null;
      this.typeErr = null;
      this.oldErr = null;
      this.runtimeErr = null;
      this.entityIdNotFound = null;
      this.entityIdDeleted = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public registerTransactions_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public registerTransactions_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public registerTransactions_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public registerTransactions_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction getUnexpectedTransaction() {
      return this.unexpectedTransaction;
    }

    public registerTransactions_result setUnexpectedTransaction(dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
      this.unexpectedTransaction = unexpectedTransaction;
      return this;
    }

    public void unsetUnexpectedTransaction() {
      this.unexpectedTransaction = null;
    }

    /** Returns true if field unexpectedTransaction is set (has been assigned a value) and false otherwise */
    public boolean isSetUnexpectedTransaction() {
      return this.unexpectedTransaction != null;
    }

    public void setUnexpectedTransactionIsSet(boolean value) {
      if (!value) {
        this.unexpectedTransaction = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public registerTransactions_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TransactionTooOldException getOldErr() {
      return this.oldErr;
    }

    public registerTransactions_result setOldErr(dk.diku.poets.gen.thrift.contracts.TransactionTooOldException oldErr) {
      this.oldErr = oldErr;
      return this;
    }

    public void unsetOldErr() {
      this.oldErr = null;
    }

    /** Returns true if field oldErr is set (has been assigned a value) and false otherwise */
    public boolean isSetOldErr() {
      return this.oldErr != null;
    }

    public void setOldErrIsSet(boolean value) {
      if (!value) {
        this.oldErr = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public registerTransactions_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityNotFound getEntityIdNotFound() {
      return this.entityIdNotFound;
    }

    public registerTransactions_result setEntityIdNotFound(dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
      this.entityIdNotFound = entityIdNotFound;
      return this;
    }

    public void unsetEntityIdNotFound() {
      this.entityIdNotFound = null;
    }

    /** Returns true if field entityIdNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdNotFound() {
      return this.entityIdNotFound != null;
    }

    public void setEntityIdNotFoundIsSet(boolean value) {
      if (!value) {
        this.entityIdNotFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityDeleted getEntityIdDeleted() {
      return this.entityIdDeleted;
    }

    public registerTransactions_result setEntityIdDeleted(dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
      this.entityIdDeleted = entityIdDeleted;
      return this;
    }

    public void unsetEntityIdDeleted() {
      this.entityIdDeleted = null;
    }

    /** Returns true if field entityIdDeleted is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdDeleted() {
      return this.entityIdDeleted != null;
    }

    public void setEntityIdDeletedIsSet(boolean value) {
      if (!value) {
        this.entityIdDeleted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case UNEXPECTED_TRANSACTION:
        if (value == null) {
          unsetUnexpectedTransaction();
        } else {
          setUnexpectedTransaction((dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case OLD_ERR:
        if (value == null) {
          unsetOldErr();
        } else {
          setOldErr((dk.diku.poets.gen.thrift.contracts.TransactionTooOldException)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      case ENTITY_ID_NOT_FOUND:
        if (value == null) {
          unsetEntityIdNotFound();
        } else {
          setEntityIdNotFound((dk.diku.poets.gen.thrift.entities.EntityNotFound)value);
        }
        break;

      case ENTITY_ID_DELETED:
        if (value == null) {
          unsetEntityIdDeleted();
        } else {
          setEntityIdDeleted((dk.diku.poets.gen.thrift.entities.EntityDeleted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case NOT_FOUND:
        return getNotFound();

      case CONTRACT_BREACH:
        return getContractBreach();

      case UNEXPECTED_TRANSACTION:
        return getUnexpectedTransaction();

      case TYPE_ERR:
        return getTypeErr();

      case OLD_ERR:
        return getOldErr();

      case RUNTIME_ERR:
        return getRuntimeErr();

      case ENTITY_ID_NOT_FOUND:
        return getEntityIdNotFound();

      case ENTITY_ID_DELETED:
        return getEntityIdDeleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case NOT_FOUND:
        return isSetNotFound();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case UNEXPECTED_TRANSACTION:
        return isSetUnexpectedTransaction();
      case TYPE_ERR:
        return isSetTypeErr();
      case OLD_ERR:
        return isSetOldErr();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      case ENTITY_ID_NOT_FOUND:
        return isSetEntityIdNotFound();
      case ENTITY_ID_DELETED:
        return isSetEntityIdDeleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerTransactions_result)
        return this.equals((registerTransactions_result)that);
      return false;
    }

    public boolean equals(registerTransactions_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_unexpectedTransaction = true && this.isSetUnexpectedTransaction();
      boolean that_present_unexpectedTransaction = true && that.isSetUnexpectedTransaction();
      if (this_present_unexpectedTransaction || that_present_unexpectedTransaction) {
        if (!(this_present_unexpectedTransaction && that_present_unexpectedTransaction))
          return false;
        if (!this.unexpectedTransaction.equals(that.unexpectedTransaction))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_oldErr = true && this.isSetOldErr();
      boolean that_present_oldErr = true && that.isSetOldErr();
      if (this_present_oldErr || that_present_oldErr) {
        if (!(this_present_oldErr && that_present_oldErr))
          return false;
        if (!this.oldErr.equals(that.oldErr))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      boolean this_present_entityIdNotFound = true && this.isSetEntityIdNotFound();
      boolean that_present_entityIdNotFound = true && that.isSetEntityIdNotFound();
      if (this_present_entityIdNotFound || that_present_entityIdNotFound) {
        if (!(this_present_entityIdNotFound && that_present_entityIdNotFound))
          return false;
        if (!this.entityIdNotFound.equals(that.entityIdNotFound))
          return false;
      }

      boolean this_present_entityIdDeleted = true && this.isSetEntityIdDeleted();
      boolean that_present_entityIdDeleted = true && that.isSetEntityIdDeleted();
      if (this_present_entityIdDeleted || that_present_entityIdDeleted) {
        if (!(this_present_entityIdDeleted && that_present_entityIdDeleted))
          return false;
        if (!this.entityIdDeleted.equals(that.entityIdDeleted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerTransactions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerTransactions_result typedOther = (registerTransactions_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnexpectedTransaction()).compareTo(typedOther.isSetUnexpectedTransaction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnexpectedTransaction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unexpectedTransaction, typedOther.unexpectedTransaction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldErr()).compareTo(typedOther.isSetOldErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldErr, typedOther.oldErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdNotFound()).compareTo(typedOther.isSetEntityIdNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdNotFound, typedOther.entityIdNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdDeleted()).compareTo(typedOther.isSetEntityIdDeleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdDeleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdDeleted, typedOther.entityIdDeleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerTransactions_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unexpectedTransaction:");
      if (this.unexpectedTransaction == null) {
        sb.append("null");
      } else {
        sb.append(this.unexpectedTransaction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldErr:");
      if (this.oldErr == null) {
        sb.append("null");
      } else {
        sb.append(this.oldErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdNotFound:");
      if (this.entityIdNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdDeleted:");
      if (this.entityIdDeleted == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdDeleted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerTransactions_resultStandardSchemeFactory implements SchemeFactory {
      public registerTransactions_resultStandardScheme getScheme() {
        return new registerTransactions_resultStandardScheme();
      }
    }

    private static class registerTransactions_resultStandardScheme extends StandardScheme<registerTransactions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerTransactions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // UNEXPECTED_TRANSACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
                struct.unexpectedTransaction.read(iprot);
                struct.setUnexpectedTransactionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OLD_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
                struct.oldErr.read(iprot);
                struct.setOldErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // ENTITY_ID_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
                struct.entityIdNotFound.read(iprot);
                struct.setEntityIdNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ENTITY_ID_DELETED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
                struct.entityIdDeleted.read(iprot);
                struct.setEntityIdDeletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerTransactions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unexpectedTransaction != null) {
          oprot.writeFieldBegin(UNEXPECTED_TRANSACTION_FIELD_DESC);
          struct.unexpectedTransaction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oldErr != null) {
          oprot.writeFieldBegin(OLD_ERR_FIELD_DESC);
          struct.oldErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdNotFound != null) {
          oprot.writeFieldBegin(ENTITY_ID_NOT_FOUND_FIELD_DESC);
          struct.entityIdNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdDeleted != null) {
          oprot.writeFieldBegin(ENTITY_ID_DELETED_FIELD_DESC);
          struct.entityIdDeleted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerTransactions_resultTupleSchemeFactory implements SchemeFactory {
      public registerTransactions_resultTupleScheme getScheme() {
        return new registerTransactions_resultTupleScheme();
      }
    }

    private static class registerTransactions_resultTupleScheme extends TupleScheme<registerTransactions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerTransactions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        if (struct.isSetNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(3);
        }
        if (struct.isSetUnexpectedTransaction()) {
          optionals.set(4);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(5);
        }
        if (struct.isSetOldErr()) {
          optionals.set(6);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(7);
        }
        if (struct.isSetEntityIdNotFound()) {
          optionals.set(8);
        }
        if (struct.isSetEntityIdDeleted()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetUnexpectedTransaction()) {
          struct.unexpectedTransaction.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetOldErr()) {
          struct.oldErr.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
        if (struct.isSetEntityIdNotFound()) {
          struct.entityIdNotFound.write(oprot);
        }
        if (struct.isSetEntityIdDeleted()) {
          struct.entityIdDeleted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerTransactions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(4)) {
          struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
          struct.unexpectedTransaction.read(iprot);
          struct.setUnexpectedTransactionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.oldErr = new dk.diku.poets.gen.thrift.contracts.TransactionTooOldException();
          struct.oldErr.read(iprot);
          struct.setOldErrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
        if (incoming.get(8)) {
          struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
          struct.entityIdNotFound.read(iprot);
          struct.setEntityIdNotFoundIsSet(true);
        }
        if (incoming.get(9)) {
          struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
          struct.entityIdDeleted.read(iprot);
          struct.setEntityIdDeletedIsSet(true);
        }
      }
    }

  }

  public static class instantiateContract_args implements org.apache.thrift.TBase<instantiateContract_args, instantiateContract_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instantiateContract_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("contractMetaData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instantiateContract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instantiateContract_argsTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.value.Value contractMetaData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_META_DATA((short)1, "contractMetaData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_META_DATA
            return CONTRACT_META_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_META_DATA, new org.apache.thrift.meta_data.FieldMetaData("contractMetaData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instantiateContract_args.class, metaDataMap);
    }

    public instantiateContract_args() {
    }

    public instantiateContract_args(
      dk.diku.poets.gen.thrift.value.Value contractMetaData)
    {
      this();
      this.contractMetaData = contractMetaData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instantiateContract_args(instantiateContract_args other) {
      if (other.isSetContractMetaData()) {
        this.contractMetaData = new dk.diku.poets.gen.thrift.value.Value(other.contractMetaData);
      }
    }

    public instantiateContract_args deepCopy() {
      return new instantiateContract_args(this);
    }

    @Override
    public void clear() {
      this.contractMetaData = null;
    }

    public dk.diku.poets.gen.thrift.value.Value getContractMetaData() {
      return this.contractMetaData;
    }

    public instantiateContract_args setContractMetaData(dk.diku.poets.gen.thrift.value.Value contractMetaData) {
      this.contractMetaData = contractMetaData;
      return this;
    }

    public void unsetContractMetaData() {
      this.contractMetaData = null;
    }

    /** Returns true if field contractMetaData is set (has been assigned a value) and false otherwise */
    public boolean isSetContractMetaData() {
      return this.contractMetaData != null;
    }

    public void setContractMetaDataIsSet(boolean value) {
      if (!value) {
        this.contractMetaData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_META_DATA:
        if (value == null) {
          unsetContractMetaData();
        } else {
          setContractMetaData((dk.diku.poets.gen.thrift.value.Value)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_META_DATA:
        return getContractMetaData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_META_DATA:
        return isSetContractMetaData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instantiateContract_args)
        return this.equals((instantiateContract_args)that);
      return false;
    }

    public boolean equals(instantiateContract_args that) {
      if (that == null)
        return false;

      boolean this_present_contractMetaData = true && this.isSetContractMetaData();
      boolean that_present_contractMetaData = true && that.isSetContractMetaData();
      if (this_present_contractMetaData || that_present_contractMetaData) {
        if (!(this_present_contractMetaData && that_present_contractMetaData))
          return false;
        if (!this.contractMetaData.equals(that.contractMetaData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instantiateContract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instantiateContract_args typedOther = (instantiateContract_args)other;

      lastComparison = Boolean.valueOf(isSetContractMetaData()).compareTo(typedOther.isSetContractMetaData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractMetaData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractMetaData, typedOther.contractMetaData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instantiateContract_args(");
      boolean first = true;

      sb.append("contractMetaData:");
      if (this.contractMetaData == null) {
        sb.append("null");
      } else {
        sb.append(this.contractMetaData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instantiateContract_argsStandardSchemeFactory implements SchemeFactory {
      public instantiateContract_argsStandardScheme getScheme() {
        return new instantiateContract_argsStandardScheme();
      }
    }

    private static class instantiateContract_argsStandardScheme extends StandardScheme<instantiateContract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instantiateContract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_META_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractMetaData = new dk.diku.poets.gen.thrift.value.Value();
                struct.contractMetaData.read(iprot);
                struct.setContractMetaDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instantiateContract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractMetaData != null) {
          oprot.writeFieldBegin(CONTRACT_META_DATA_FIELD_DESC);
          struct.contractMetaData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instantiateContract_argsTupleSchemeFactory implements SchemeFactory {
      public instantiateContract_argsTupleScheme getScheme() {
        return new instantiateContract_argsTupleScheme();
      }
    }

    private static class instantiateContract_argsTupleScheme extends TupleScheme<instantiateContract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instantiateContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractMetaData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractMetaData()) {
          struct.contractMetaData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instantiateContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractMetaData = new dk.diku.poets.gen.thrift.value.Value();
          struct.contractMetaData.read(iprot);
          struct.setContractMetaDataIsSet(true);
        }
      }
    }

  }

  public static class instantiateContract_result implements org.apache.thrift.TBase<instantiateContract_result, instantiateContract_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("instantiateContract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TEMPLATE_NOT_FOUND_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("templateNotFoundErr", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTypeErr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)8);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdDeleted", org.apache.thrift.protocol.TType.STRUCT, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new instantiateContract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new instantiateContract_resultTupleSchemeFactory());
    }

    public int success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr; // required
    public dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public RunTimeException runtimeErr; // required
    public dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound; // required
    public dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      TYPE_ERR((short)3, "typeErr"),
      TEMPLATE_NOT_FOUND_ERR((short)4, "templateNotFoundErr"),
      TEMPLATE_TYPE_ERR((short)5, "templateTypeErr"),
      CONTRACT_BREACH((short)6, "contractBreach"),
      RUNTIME_ERR((short)7, "runtimeErr"),
      ENTITY_ID_NOT_FOUND((short)8, "entityIdNotFound"),
      ENTITY_ID_DELETED((short)9, "entityIdDeleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // TYPE_ERR
            return TYPE_ERR;
          case 4: // TEMPLATE_NOT_FOUND_ERR
            return TEMPLATE_NOT_FOUND_ERR;
          case 5: // TEMPLATE_TYPE_ERR
            return TEMPLATE_TYPE_ERR;
          case 6: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 7: // RUNTIME_ERR
            return RUNTIME_ERR;
          case 8: // ENTITY_ID_NOT_FOUND
            return ENTITY_ID_NOT_FOUND;
          case 9: // ENTITY_ID_DELETED
            return ENTITY_ID_DELETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TEMPLATE_NOT_FOUND_ERR, new org.apache.thrift.meta_data.FieldMetaData("templateNotFoundErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TEMPLATE_TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("templateTypeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("entityIdNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_DELETED, new org.apache.thrift.meta_data.FieldMetaData("entityIdDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instantiateContract_result.class, metaDataMap);
    }

    public instantiateContract_result() {
    }

    public instantiateContract_result(
      int success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr,
      dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      RunTimeException runtimeErr,
      dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound,
      dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
      this.msg = msg;
      this.typeErr = typeErr;
      this.templateNotFoundErr = templateNotFoundErr;
      this.templateTypeErr = templateTypeErr;
      this.contractBreach = contractBreach;
      this.runtimeErr = runtimeErr;
      this.entityIdNotFound = entityIdNotFound;
      this.entityIdDeleted = entityIdDeleted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public instantiateContract_result(instantiateContract_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetTemplateNotFoundErr()) {
        this.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException(other.templateNotFoundErr);
      }
      if (other.isSetTemplateTypeErr()) {
        this.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException(other.templateTypeErr);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
      if (other.isSetEntityIdNotFound()) {
        this.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound(other.entityIdNotFound);
      }
      if (other.isSetEntityIdDeleted()) {
        this.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted(other.entityIdDeleted);
      }
    }

    public instantiateContract_result deepCopy() {
      return new instantiateContract_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.arg = null;
      this.msg = null;
      this.typeErr = null;
      this.templateNotFoundErr = null;
      this.templateTypeErr = null;
      this.contractBreach = null;
      this.runtimeErr = null;
      this.entityIdNotFound = null;
      this.entityIdDeleted = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public instantiateContract_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public instantiateContract_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public instantiateContract_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public instantiateContract_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException getTemplateNotFoundErr() {
      return this.templateNotFoundErr;
    }

    public instantiateContract_result setTemplateNotFoundErr(dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr) {
      this.templateNotFoundErr = templateNotFoundErr;
      return this;
    }

    public void unsetTemplateNotFoundErr() {
      this.templateNotFoundErr = null;
    }

    /** Returns true if field templateNotFoundErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateNotFoundErr() {
      return this.templateNotFoundErr != null;
    }

    public void setTemplateNotFoundErrIsSet(boolean value) {
      if (!value) {
        this.templateNotFoundErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException getTemplateTypeErr() {
      return this.templateTypeErr;
    }

    public instantiateContract_result setTemplateTypeErr(dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr) {
      this.templateTypeErr = templateTypeErr;
      return this;
    }

    public void unsetTemplateTypeErr() {
      this.templateTypeErr = null;
    }

    /** Returns true if field templateTypeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateTypeErr() {
      return this.templateTypeErr != null;
    }

    public void setTemplateTypeErrIsSet(boolean value) {
      if (!value) {
        this.templateTypeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public instantiateContract_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public instantiateContract_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityNotFound getEntityIdNotFound() {
      return this.entityIdNotFound;
    }

    public instantiateContract_result setEntityIdNotFound(dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
      this.entityIdNotFound = entityIdNotFound;
      return this;
    }

    public void unsetEntityIdNotFound() {
      this.entityIdNotFound = null;
    }

    /** Returns true if field entityIdNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdNotFound() {
      return this.entityIdNotFound != null;
    }

    public void setEntityIdNotFoundIsSet(boolean value) {
      if (!value) {
        this.entityIdNotFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityDeleted getEntityIdDeleted() {
      return this.entityIdDeleted;
    }

    public instantiateContract_result setEntityIdDeleted(dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
      this.entityIdDeleted = entityIdDeleted;
      return this;
    }

    public void unsetEntityIdDeleted() {
      this.entityIdDeleted = null;
    }

    /** Returns true if field entityIdDeleted is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdDeleted() {
      return this.entityIdDeleted != null;
    }

    public void setEntityIdDeletedIsSet(boolean value) {
      if (!value) {
        this.entityIdDeleted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case TEMPLATE_NOT_FOUND_ERR:
        if (value == null) {
          unsetTemplateNotFoundErr();
        } else {
          setTemplateNotFoundErr((dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException)value);
        }
        break;

      case TEMPLATE_TYPE_ERR:
        if (value == null) {
          unsetTemplateTypeErr();
        } else {
          setTemplateTypeErr((dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      case ENTITY_ID_NOT_FOUND:
        if (value == null) {
          unsetEntityIdNotFound();
        } else {
          setEntityIdNotFound((dk.diku.poets.gen.thrift.entities.EntityNotFound)value);
        }
        break;

      case ENTITY_ID_DELETED:
        if (value == null) {
          unsetEntityIdDeleted();
        } else {
          setEntityIdDeleted((dk.diku.poets.gen.thrift.entities.EntityDeleted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case TYPE_ERR:
        return getTypeErr();

      case TEMPLATE_NOT_FOUND_ERR:
        return getTemplateNotFoundErr();

      case TEMPLATE_TYPE_ERR:
        return getTemplateTypeErr();

      case CONTRACT_BREACH:
        return getContractBreach();

      case RUNTIME_ERR:
        return getRuntimeErr();

      case ENTITY_ID_NOT_FOUND:
        return getEntityIdNotFound();

      case ENTITY_ID_DELETED:
        return getEntityIdDeleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case TYPE_ERR:
        return isSetTypeErr();
      case TEMPLATE_NOT_FOUND_ERR:
        return isSetTemplateNotFoundErr();
      case TEMPLATE_TYPE_ERR:
        return isSetTemplateTypeErr();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      case ENTITY_ID_NOT_FOUND:
        return isSetEntityIdNotFound();
      case ENTITY_ID_DELETED:
        return isSetEntityIdDeleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof instantiateContract_result)
        return this.equals((instantiateContract_result)that);
      return false;
    }

    public boolean equals(instantiateContract_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_templateNotFoundErr = true && this.isSetTemplateNotFoundErr();
      boolean that_present_templateNotFoundErr = true && that.isSetTemplateNotFoundErr();
      if (this_present_templateNotFoundErr || that_present_templateNotFoundErr) {
        if (!(this_present_templateNotFoundErr && that_present_templateNotFoundErr))
          return false;
        if (!this.templateNotFoundErr.equals(that.templateNotFoundErr))
          return false;
      }

      boolean this_present_templateTypeErr = true && this.isSetTemplateTypeErr();
      boolean that_present_templateTypeErr = true && that.isSetTemplateTypeErr();
      if (this_present_templateTypeErr || that_present_templateTypeErr) {
        if (!(this_present_templateTypeErr && that_present_templateTypeErr))
          return false;
        if (!this.templateTypeErr.equals(that.templateTypeErr))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      boolean this_present_entityIdNotFound = true && this.isSetEntityIdNotFound();
      boolean that_present_entityIdNotFound = true && that.isSetEntityIdNotFound();
      if (this_present_entityIdNotFound || that_present_entityIdNotFound) {
        if (!(this_present_entityIdNotFound && that_present_entityIdNotFound))
          return false;
        if (!this.entityIdNotFound.equals(that.entityIdNotFound))
          return false;
      }

      boolean this_present_entityIdDeleted = true && this.isSetEntityIdDeleted();
      boolean that_present_entityIdDeleted = true && that.isSetEntityIdDeleted();
      if (this_present_entityIdDeleted || that_present_entityIdDeleted) {
        if (!(this_present_entityIdDeleted && that_present_entityIdDeleted))
          return false;
        if (!this.entityIdDeleted.equals(that.entityIdDeleted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(instantiateContract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      instantiateContract_result typedOther = (instantiateContract_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateNotFoundErr()).compareTo(typedOther.isSetTemplateNotFoundErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateNotFoundErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateNotFoundErr, typedOther.templateNotFoundErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateTypeErr()).compareTo(typedOther.isSetTemplateTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTypeErr, typedOther.templateTypeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdNotFound()).compareTo(typedOther.isSetEntityIdNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdNotFound, typedOther.entityIdNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdDeleted()).compareTo(typedOther.isSetEntityIdDeleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdDeleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdDeleted, typedOther.entityIdDeleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("instantiateContract_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateNotFoundErr:");
      if (this.templateNotFoundErr == null) {
        sb.append("null");
      } else {
        sb.append(this.templateNotFoundErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateTypeErr:");
      if (this.templateTypeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.templateTypeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdNotFound:");
      if (this.entityIdNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdDeleted:");
      if (this.entityIdDeleted == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdDeleted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class instantiateContract_resultStandardSchemeFactory implements SchemeFactory {
      public instantiateContract_resultStandardScheme getScheme() {
        return new instantiateContract_resultStandardScheme();
      }
    }

    private static class instantiateContract_resultStandardScheme extends StandardScheme<instantiateContract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, instantiateContract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TEMPLATE_NOT_FOUND_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException();
                struct.templateNotFoundErr.read(iprot);
                struct.setTemplateNotFoundErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TEMPLATE_TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException();
                struct.templateTypeErr.read(iprot);
                struct.setTemplateTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ENTITY_ID_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
                struct.entityIdNotFound.read(iprot);
                struct.setEntityIdNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // ENTITY_ID_DELETED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
                struct.entityIdDeleted.read(iprot);
                struct.setEntityIdDeletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, instantiateContract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateNotFoundErr != null) {
          oprot.writeFieldBegin(TEMPLATE_NOT_FOUND_ERR_FIELD_DESC);
          struct.templateNotFoundErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateTypeErr != null) {
          oprot.writeFieldBegin(TEMPLATE_TYPE_ERR_FIELD_DESC);
          struct.templateTypeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdNotFound != null) {
          oprot.writeFieldBegin(ENTITY_ID_NOT_FOUND_FIELD_DESC);
          struct.entityIdNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdDeleted != null) {
          oprot.writeFieldBegin(ENTITY_ID_DELETED_FIELD_DESC);
          struct.entityIdDeleted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class instantiateContract_resultTupleSchemeFactory implements SchemeFactory {
      public instantiateContract_resultTupleScheme getScheme() {
        return new instantiateContract_resultTupleScheme();
      }
    }

    private static class instantiateContract_resultTupleScheme extends TupleScheme<instantiateContract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, instantiateContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(3);
        }
        if (struct.isSetTemplateNotFoundErr()) {
          optionals.set(4);
        }
        if (struct.isSetTemplateTypeErr()) {
          optionals.set(5);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(6);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(7);
        }
        if (struct.isSetEntityIdNotFound()) {
          optionals.set(8);
        }
        if (struct.isSetEntityIdDeleted()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetTemplateNotFoundErr()) {
          struct.templateNotFoundErr.write(oprot);
        }
        if (struct.isSetTemplateTypeErr()) {
          struct.templateTypeErr.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
        if (struct.isSetEntityIdNotFound()) {
          struct.entityIdNotFound.write(oprot);
        }
        if (struct.isSetEntityIdDeleted()) {
          struct.entityIdDeleted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, instantiateContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException();
          struct.templateNotFoundErr.read(iprot);
          struct.setTemplateNotFoundErrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException();
          struct.templateTypeErr.read(iprot);
          struct.setTemplateTypeErrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(7)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
        if (incoming.get(8)) {
          struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
          struct.entityIdNotFound.read(iprot);
          struct.setEntityIdNotFoundIsSet(true);
        }
        if (incoming.get(9)) {
          struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
          struct.entityIdDeleted.read(iprot);
          struct.setEntityIdDeletedIsSet(true);
        }
      }
    }

  }

  public static class updateContract_args implements org.apache.thrift.TBase<updateContract_args, updateContract_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContract_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("contractMetaData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContract_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContract_argsTupleSchemeFactory());
    }

    public int contractId; // required
    public dk.diku.poets.gen.thrift.value.Value contractMetaData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_ID((short)1, "contractId"),
      CONTRACT_META_DATA((short)2, "contractMetaData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_ID
            return CONTRACT_ID;
          case 2: // CONTRACT_META_DATA
            return CONTRACT_META_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTRACTID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      tmpMap.put(_Fields.CONTRACT_META_DATA, new org.apache.thrift.meta_data.FieldMetaData("contractMetaData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContract_args.class, metaDataMap);
    }

    public updateContract_args() {
    }

    public updateContract_args(
      int contractId,
      dk.diku.poets.gen.thrift.value.Value contractMetaData)
    {
      this();
      this.contractId = contractId;
      setContractIdIsSet(true);
      this.contractMetaData = contractMetaData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContract_args(updateContract_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.contractId = other.contractId;
      if (other.isSetContractMetaData()) {
        this.contractMetaData = new dk.diku.poets.gen.thrift.value.Value(other.contractMetaData);
      }
    }

    public updateContract_args deepCopy() {
      return new updateContract_args(this);
    }

    @Override
    public void clear() {
      setContractIdIsSet(false);
      this.contractId = 0;
      this.contractMetaData = null;
    }

    public int getContractId() {
      return this.contractId;
    }

    public updateContract_args setContractId(int contractId) {
      this.contractId = contractId;
      setContractIdIsSet(true);
      return this;
    }

    public void unsetContractId() {
      __isset_bit_vector.clear(__CONTRACTID_ISSET_ID);
    }

    /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
    public boolean isSetContractId() {
      return __isset_bit_vector.get(__CONTRACTID_ISSET_ID);
    }

    public void setContractIdIsSet(boolean value) {
      __isset_bit_vector.set(__CONTRACTID_ISSET_ID, value);
    }

    public dk.diku.poets.gen.thrift.value.Value getContractMetaData() {
      return this.contractMetaData;
    }

    public updateContract_args setContractMetaData(dk.diku.poets.gen.thrift.value.Value contractMetaData) {
      this.contractMetaData = contractMetaData;
      return this;
    }

    public void unsetContractMetaData() {
      this.contractMetaData = null;
    }

    /** Returns true if field contractMetaData is set (has been assigned a value) and false otherwise */
    public boolean isSetContractMetaData() {
      return this.contractMetaData != null;
    }

    public void setContractMetaDataIsSet(boolean value) {
      if (!value) {
        this.contractMetaData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_ID:
        if (value == null) {
          unsetContractId();
        } else {
          setContractId((Integer)value);
        }
        break;

      case CONTRACT_META_DATA:
        if (value == null) {
          unsetContractMetaData();
        } else {
          setContractMetaData((dk.diku.poets.gen.thrift.value.Value)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_ID:
        return Integer.valueOf(getContractId());

      case CONTRACT_META_DATA:
        return getContractMetaData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_ID:
        return isSetContractId();
      case CONTRACT_META_DATA:
        return isSetContractMetaData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContract_args)
        return this.equals((updateContract_args)that);
      return false;
    }

    public boolean equals(updateContract_args that) {
      if (that == null)
        return false;

      boolean this_present_contractId = true;
      boolean that_present_contractId = true;
      if (this_present_contractId || that_present_contractId) {
        if (!(this_present_contractId && that_present_contractId))
          return false;
        if (this.contractId != that.contractId)
          return false;
      }

      boolean this_present_contractMetaData = true && this.isSetContractMetaData();
      boolean that_present_contractMetaData = true && that.isSetContractMetaData();
      if (this_present_contractMetaData || that_present_contractMetaData) {
        if (!(this_present_contractMetaData && that_present_contractMetaData))
          return false;
        if (!this.contractMetaData.equals(that.contractMetaData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateContract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateContract_args typedOther = (updateContract_args)other;

      lastComparison = Boolean.valueOf(isSetContractId()).compareTo(typedOther.isSetContractId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, typedOther.contractId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractMetaData()).compareTo(typedOther.isSetContractMetaData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractMetaData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractMetaData, typedOther.contractMetaData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContract_args(");
      boolean first = true;

      sb.append("contractId:");
      sb.append(this.contractId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractMetaData:");
      if (this.contractMetaData == null) {
        sb.append("null");
      } else {
        sb.append(this.contractMetaData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContract_argsStandardSchemeFactory implements SchemeFactory {
      public updateContract_argsStandardScheme getScheme() {
        return new updateContract_argsStandardScheme();
      }
    }

    private static class updateContract_argsStandardScheme extends StandardScheme<updateContract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.contractId = iprot.readI32();
                struct.setContractIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_META_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractMetaData = new dk.diku.poets.gen.thrift.value.Value();
                struct.contractMetaData.read(iprot);
                struct.setContractMetaDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.contractId);
        oprot.writeFieldEnd();
        if (struct.contractMetaData != null) {
          oprot.writeFieldBegin(CONTRACT_META_DATA_FIELD_DESC);
          struct.contractMetaData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContract_argsTupleSchemeFactory implements SchemeFactory {
      public updateContract_argsTupleScheme getScheme() {
        return new updateContract_argsTupleScheme();
      }
    }

    private static class updateContract_argsTupleScheme extends TupleScheme<updateContract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractId()) {
          optionals.set(0);
        }
        if (struct.isSetContractMetaData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContractId()) {
          oprot.writeI32(struct.contractId);
        }
        if (struct.isSetContractMetaData()) {
          struct.contractMetaData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContract_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.contractId = iprot.readI32();
          struct.setContractIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contractMetaData = new dk.diku.poets.gen.thrift.value.Value();
          struct.contractMetaData.read(iprot);
          struct.setContractMetaDataIsSet(true);
        }
      }
    }

  }

  public static class updateContract_result implements org.apache.thrift.TBase<updateContract_result, updateContract_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContract_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TEMPLATE_NOT_FOUND_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("templateNotFoundErr", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("templateTypeErr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField UPDATE_TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTypeErr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)8);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)9);
    private static final org.apache.thrift.protocol.TField UNEXPECTED_TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("unexpectedTransaction", org.apache.thrift.protocol.TType.STRUCT, (short)10);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)11);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdDeleted", org.apache.thrift.protocol.TType.STRUCT, (short)12);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContract_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContract_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr; // required
    public dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr; // required
    public dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch updateTypeErr; // required
    public RunTimeException runtimeErr; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction; // required
    public dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound; // required
    public dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      TYPE_ERR((short)3, "typeErr"),
      TEMPLATE_NOT_FOUND_ERR((short)4, "templateNotFoundErr"),
      TEMPLATE_TYPE_ERR((short)5, "templateTypeErr"),
      UPDATE_TYPE_ERR((short)6, "updateTypeErr"),
      RUNTIME_ERR((short)7, "runtimeErr"),
      NOT_FOUND((short)8, "notFound"),
      CONTRACT_BREACH((short)9, "contractBreach"),
      UNEXPECTED_TRANSACTION((short)10, "unexpectedTransaction"),
      ENTITY_ID_NOT_FOUND((short)11, "entityIdNotFound"),
      ENTITY_ID_DELETED((short)12, "entityIdDeleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // TYPE_ERR
            return TYPE_ERR;
          case 4: // TEMPLATE_NOT_FOUND_ERR
            return TEMPLATE_NOT_FOUND_ERR;
          case 5: // TEMPLATE_TYPE_ERR
            return TEMPLATE_TYPE_ERR;
          case 6: // UPDATE_TYPE_ERR
            return UPDATE_TYPE_ERR;
          case 7: // RUNTIME_ERR
            return RUNTIME_ERR;
          case 8: // NOT_FOUND
            return NOT_FOUND;
          case 9: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 10: // UNEXPECTED_TRANSACTION
            return UNEXPECTED_TRANSACTION;
          case 11: // ENTITY_ID_NOT_FOUND
            return ENTITY_ID_NOT_FOUND;
          case 12: // ENTITY_ID_DELETED
            return ENTITY_ID_DELETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TEMPLATE_NOT_FOUND_ERR, new org.apache.thrift.meta_data.FieldMetaData("templateNotFoundErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TEMPLATE_TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("templateTypeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UPDATE_TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("updateTypeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNEXPECTED_TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("unexpectedTransaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("entityIdNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_DELETED, new org.apache.thrift.meta_data.FieldMetaData("entityIdDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContract_result.class, metaDataMap);
    }

    public updateContract_result() {
    }

    public updateContract_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr,
      dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr,
      dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch updateTypeErr,
      RunTimeException runtimeErr,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction,
      dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound,
      dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted)
    {
      this();
      this.arg = arg;
      this.msg = msg;
      this.typeErr = typeErr;
      this.templateNotFoundErr = templateNotFoundErr;
      this.templateTypeErr = templateTypeErr;
      this.updateTypeErr = updateTypeErr;
      this.runtimeErr = runtimeErr;
      this.notFound = notFound;
      this.contractBreach = contractBreach;
      this.unexpectedTransaction = unexpectedTransaction;
      this.entityIdNotFound = entityIdNotFound;
      this.entityIdDeleted = entityIdDeleted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContract_result(updateContract_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetTemplateNotFoundErr()) {
        this.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException(other.templateNotFoundErr);
      }
      if (other.isSetTemplateTypeErr()) {
        this.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException(other.templateTypeErr);
      }
      if (other.isSetUpdateTypeErr()) {
        this.updateTypeErr = new dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch(other.updateTypeErr);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetUnexpectedTransaction()) {
        this.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction(other.unexpectedTransaction);
      }
      if (other.isSetEntityIdNotFound()) {
        this.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound(other.entityIdNotFound);
      }
      if (other.isSetEntityIdDeleted()) {
        this.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted(other.entityIdDeleted);
      }
    }

    public updateContract_result deepCopy() {
      return new updateContract_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.msg = null;
      this.typeErr = null;
      this.templateNotFoundErr = null;
      this.templateTypeErr = null;
      this.updateTypeErr = null;
      this.runtimeErr = null;
      this.notFound = null;
      this.contractBreach = null;
      this.unexpectedTransaction = null;
      this.entityIdNotFound = null;
      this.entityIdDeleted = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public updateContract_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public updateContract_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public updateContract_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException getTemplateNotFoundErr() {
      return this.templateNotFoundErr;
    }

    public updateContract_result setTemplateNotFoundErr(dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException templateNotFoundErr) {
      this.templateNotFoundErr = templateNotFoundErr;
      return this;
    }

    public void unsetTemplateNotFoundErr() {
      this.templateNotFoundErr = null;
    }

    /** Returns true if field templateNotFoundErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateNotFoundErr() {
      return this.templateNotFoundErr != null;
    }

    public void setTemplateNotFoundErrIsSet(boolean value) {
      if (!value) {
        this.templateNotFoundErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException getTemplateTypeErr() {
      return this.templateTypeErr;
    }

    public updateContract_result setTemplateTypeErr(dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException templateTypeErr) {
      this.templateTypeErr = templateTypeErr;
      return this;
    }

    public void unsetTemplateTypeErr() {
      this.templateTypeErr = null;
    }

    /** Returns true if field templateTypeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTemplateTypeErr() {
      return this.templateTypeErr != null;
    }

    public void setTemplateTypeErrIsSet(boolean value) {
      if (!value) {
        this.templateTypeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch getUpdateTypeErr() {
      return this.updateTypeErr;
    }

    public updateContract_result setUpdateTypeErr(dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch updateTypeErr) {
      this.updateTypeErr = updateTypeErr;
      return this;
    }

    public void unsetUpdateTypeErr() {
      this.updateTypeErr = null;
    }

    /** Returns true if field updateTypeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateTypeErr() {
      return this.updateTypeErr != null;
    }

    public void setUpdateTypeErrIsSet(boolean value) {
      if (!value) {
        this.updateTypeErr = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public updateContract_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public updateContract_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public updateContract_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction getUnexpectedTransaction() {
      return this.unexpectedTransaction;
    }

    public updateContract_result setUnexpectedTransaction(dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction unexpectedTransaction) {
      this.unexpectedTransaction = unexpectedTransaction;
      return this;
    }

    public void unsetUnexpectedTransaction() {
      this.unexpectedTransaction = null;
    }

    /** Returns true if field unexpectedTransaction is set (has been assigned a value) and false otherwise */
    public boolean isSetUnexpectedTransaction() {
      return this.unexpectedTransaction != null;
    }

    public void setUnexpectedTransactionIsSet(boolean value) {
      if (!value) {
        this.unexpectedTransaction = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityNotFound getEntityIdNotFound() {
      return this.entityIdNotFound;
    }

    public updateContract_result setEntityIdNotFound(dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
      this.entityIdNotFound = entityIdNotFound;
      return this;
    }

    public void unsetEntityIdNotFound() {
      this.entityIdNotFound = null;
    }

    /** Returns true if field entityIdNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdNotFound() {
      return this.entityIdNotFound != null;
    }

    public void setEntityIdNotFoundIsSet(boolean value) {
      if (!value) {
        this.entityIdNotFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityDeleted getEntityIdDeleted() {
      return this.entityIdDeleted;
    }

    public updateContract_result setEntityIdDeleted(dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
      this.entityIdDeleted = entityIdDeleted;
      return this;
    }

    public void unsetEntityIdDeleted() {
      this.entityIdDeleted = null;
    }

    /** Returns true if field entityIdDeleted is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdDeleted() {
      return this.entityIdDeleted != null;
    }

    public void setEntityIdDeletedIsSet(boolean value) {
      if (!value) {
        this.entityIdDeleted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case TEMPLATE_NOT_FOUND_ERR:
        if (value == null) {
          unsetTemplateNotFoundErr();
        } else {
          setTemplateNotFoundErr((dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException)value);
        }
        break;

      case TEMPLATE_TYPE_ERR:
        if (value == null) {
          unsetTemplateTypeErr();
        } else {
          setTemplateTypeErr((dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException)value);
        }
        break;

      case UPDATE_TYPE_ERR:
        if (value == null) {
          unsetUpdateTypeErr();
        } else {
          setUpdateTypeErr((dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case UNEXPECTED_TRANSACTION:
        if (value == null) {
          unsetUnexpectedTransaction();
        } else {
          setUnexpectedTransaction((dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction)value);
        }
        break;

      case ENTITY_ID_NOT_FOUND:
        if (value == null) {
          unsetEntityIdNotFound();
        } else {
          setEntityIdNotFound((dk.diku.poets.gen.thrift.entities.EntityNotFound)value);
        }
        break;

      case ENTITY_ID_DELETED:
        if (value == null) {
          unsetEntityIdDeleted();
        } else {
          setEntityIdDeleted((dk.diku.poets.gen.thrift.entities.EntityDeleted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case TYPE_ERR:
        return getTypeErr();

      case TEMPLATE_NOT_FOUND_ERR:
        return getTemplateNotFoundErr();

      case TEMPLATE_TYPE_ERR:
        return getTemplateTypeErr();

      case UPDATE_TYPE_ERR:
        return getUpdateTypeErr();

      case RUNTIME_ERR:
        return getRuntimeErr();

      case NOT_FOUND:
        return getNotFound();

      case CONTRACT_BREACH:
        return getContractBreach();

      case UNEXPECTED_TRANSACTION:
        return getUnexpectedTransaction();

      case ENTITY_ID_NOT_FOUND:
        return getEntityIdNotFound();

      case ENTITY_ID_DELETED:
        return getEntityIdDeleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case TYPE_ERR:
        return isSetTypeErr();
      case TEMPLATE_NOT_FOUND_ERR:
        return isSetTemplateNotFoundErr();
      case TEMPLATE_TYPE_ERR:
        return isSetTemplateTypeErr();
      case UPDATE_TYPE_ERR:
        return isSetUpdateTypeErr();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      case NOT_FOUND:
        return isSetNotFound();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case UNEXPECTED_TRANSACTION:
        return isSetUnexpectedTransaction();
      case ENTITY_ID_NOT_FOUND:
        return isSetEntityIdNotFound();
      case ENTITY_ID_DELETED:
        return isSetEntityIdDeleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContract_result)
        return this.equals((updateContract_result)that);
      return false;
    }

    public boolean equals(updateContract_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_templateNotFoundErr = true && this.isSetTemplateNotFoundErr();
      boolean that_present_templateNotFoundErr = true && that.isSetTemplateNotFoundErr();
      if (this_present_templateNotFoundErr || that_present_templateNotFoundErr) {
        if (!(this_present_templateNotFoundErr && that_present_templateNotFoundErr))
          return false;
        if (!this.templateNotFoundErr.equals(that.templateNotFoundErr))
          return false;
      }

      boolean this_present_templateTypeErr = true && this.isSetTemplateTypeErr();
      boolean that_present_templateTypeErr = true && that.isSetTemplateTypeErr();
      if (this_present_templateTypeErr || that_present_templateTypeErr) {
        if (!(this_present_templateTypeErr && that_present_templateTypeErr))
          return false;
        if (!this.templateTypeErr.equals(that.templateTypeErr))
          return false;
      }

      boolean this_present_updateTypeErr = true && this.isSetUpdateTypeErr();
      boolean that_present_updateTypeErr = true && that.isSetUpdateTypeErr();
      if (this_present_updateTypeErr || that_present_updateTypeErr) {
        if (!(this_present_updateTypeErr && that_present_updateTypeErr))
          return false;
        if (!this.updateTypeErr.equals(that.updateTypeErr))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_unexpectedTransaction = true && this.isSetUnexpectedTransaction();
      boolean that_present_unexpectedTransaction = true && that.isSetUnexpectedTransaction();
      if (this_present_unexpectedTransaction || that_present_unexpectedTransaction) {
        if (!(this_present_unexpectedTransaction && that_present_unexpectedTransaction))
          return false;
        if (!this.unexpectedTransaction.equals(that.unexpectedTransaction))
          return false;
      }

      boolean this_present_entityIdNotFound = true && this.isSetEntityIdNotFound();
      boolean that_present_entityIdNotFound = true && that.isSetEntityIdNotFound();
      if (this_present_entityIdNotFound || that_present_entityIdNotFound) {
        if (!(this_present_entityIdNotFound && that_present_entityIdNotFound))
          return false;
        if (!this.entityIdNotFound.equals(that.entityIdNotFound))
          return false;
      }

      boolean this_present_entityIdDeleted = true && this.isSetEntityIdDeleted();
      boolean that_present_entityIdDeleted = true && that.isSetEntityIdDeleted();
      if (this_present_entityIdDeleted || that_present_entityIdDeleted) {
        if (!(this_present_entityIdDeleted && that_present_entityIdDeleted))
          return false;
        if (!this.entityIdDeleted.equals(that.entityIdDeleted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateContract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateContract_result typedOther = (updateContract_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateNotFoundErr()).compareTo(typedOther.isSetTemplateNotFoundErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateNotFoundErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateNotFoundErr, typedOther.templateNotFoundErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTemplateTypeErr()).compareTo(typedOther.isSetTemplateTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemplateTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateTypeErr, typedOther.templateTypeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpdateTypeErr()).compareTo(typedOther.isSetUpdateTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTypeErr, typedOther.updateTypeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnexpectedTransaction()).compareTo(typedOther.isSetUnexpectedTransaction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnexpectedTransaction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unexpectedTransaction, typedOther.unexpectedTransaction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdNotFound()).compareTo(typedOther.isSetEntityIdNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdNotFound, typedOther.entityIdNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdDeleted()).compareTo(typedOther.isSetEntityIdDeleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdDeleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdDeleted, typedOther.entityIdDeleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContract_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateNotFoundErr:");
      if (this.templateNotFoundErr == null) {
        sb.append("null");
      } else {
        sb.append(this.templateNotFoundErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("templateTypeErr:");
      if (this.templateTypeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.templateTypeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateTypeErr:");
      if (this.updateTypeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTypeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unexpectedTransaction:");
      if (this.unexpectedTransaction == null) {
        sb.append("null");
      } else {
        sb.append(this.unexpectedTransaction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdNotFound:");
      if (this.entityIdNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdDeleted:");
      if (this.entityIdDeleted == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdDeleted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContract_resultStandardSchemeFactory implements SchemeFactory {
      public updateContract_resultStandardScheme getScheme() {
        return new updateContract_resultStandardScheme();
      }
    }

    private static class updateContract_resultStandardScheme extends StandardScheme<updateContract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TEMPLATE_NOT_FOUND_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException();
                struct.templateNotFoundErr.read(iprot);
                struct.setTemplateNotFoundErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TEMPLATE_TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException();
                struct.templateTypeErr.read(iprot);
                struct.setTemplateTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // UPDATE_TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateTypeErr = new dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch();
                struct.updateTypeErr.read(iprot);
                struct.setUpdateTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // UNEXPECTED_TRANSACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
                struct.unexpectedTransaction.read(iprot);
                struct.setUnexpectedTransactionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // ENTITY_ID_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
                struct.entityIdNotFound.read(iprot);
                struct.setEntityIdNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // ENTITY_ID_DELETED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
                struct.entityIdDeleted.read(iprot);
                struct.setEntityIdDeletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateNotFoundErr != null) {
          oprot.writeFieldBegin(TEMPLATE_NOT_FOUND_ERR_FIELD_DESC);
          struct.templateNotFoundErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.templateTypeErr != null) {
          oprot.writeFieldBegin(TEMPLATE_TYPE_ERR_FIELD_DESC);
          struct.templateTypeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.updateTypeErr != null) {
          oprot.writeFieldBegin(UPDATE_TYPE_ERR_FIELD_DESC);
          struct.updateTypeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unexpectedTransaction != null) {
          oprot.writeFieldBegin(UNEXPECTED_TRANSACTION_FIELD_DESC);
          struct.unexpectedTransaction.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdNotFound != null) {
          oprot.writeFieldBegin(ENTITY_ID_NOT_FOUND_FIELD_DESC);
          struct.entityIdNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdDeleted != null) {
          oprot.writeFieldBegin(ENTITY_ID_DELETED_FIELD_DESC);
          struct.entityIdDeleted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContract_resultTupleSchemeFactory implements SchemeFactory {
      public updateContract_resultTupleScheme getScheme() {
        return new updateContract_resultTupleScheme();
      }
    }

    private static class updateContract_resultTupleScheme extends TupleScheme<updateContract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(2);
        }
        if (struct.isSetTemplateNotFoundErr()) {
          optionals.set(3);
        }
        if (struct.isSetTemplateTypeErr()) {
          optionals.set(4);
        }
        if (struct.isSetUpdateTypeErr()) {
          optionals.set(5);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(6);
        }
        if (struct.isSetNotFound()) {
          optionals.set(7);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(8);
        }
        if (struct.isSetUnexpectedTransaction()) {
          optionals.set(9);
        }
        if (struct.isSetEntityIdNotFound()) {
          optionals.set(10);
        }
        if (struct.isSetEntityIdDeleted()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetTemplateNotFoundErr()) {
          struct.templateNotFoundErr.write(oprot);
        }
        if (struct.isSetTemplateTypeErr()) {
          struct.templateTypeErr.write(oprot);
        }
        if (struct.isSetUpdateTypeErr()) {
          struct.updateTypeErr.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetUnexpectedTransaction()) {
          struct.unexpectedTransaction.write(oprot);
        }
        if (struct.isSetEntityIdNotFound()) {
          struct.entityIdNotFound.write(oprot);
        }
        if (struct.isSetEntityIdDeleted()) {
          struct.entityIdDeleted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContract_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.templateNotFoundErr = new dk.diku.poets.gen.thrift.contracts.TemplateNotFoundException();
          struct.templateNotFoundErr.read(iprot);
          struct.setTemplateNotFoundErrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.templateTypeErr = new dk.diku.poets.gen.thrift.contracts.TemplateTypeMismatchException();
          struct.templateTypeErr.read(iprot);
          struct.setTemplateTypeErrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.updateTypeErr = new dk.diku.poets.gen.thrift.contracts.UpdateTypeMismatch();
          struct.updateTypeErr.read(iprot);
          struct.setUpdateTypeErrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(8)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(9)) {
          struct.unexpectedTransaction = new dk.diku.poets.gen.thrift.contracts.UnexpectedTransaction();
          struct.unexpectedTransaction.read(iprot);
          struct.setUnexpectedTransactionIsSet(true);
        }
        if (incoming.get(10)) {
          struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
          struct.entityIdNotFound.read(iprot);
          struct.setEntityIdNotFoundIsSet(true);
        }
        if (incoming.get(11)) {
          struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
          struct.entityIdDeleted.read(iprot);
          struct.setEntityIdDeletedIsSet(true);
        }
      }
    }

  }

  public static class isConcludable_args implements org.apache.thrift.TBase<isConcludable_args, isConcludable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isConcludable_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isConcludable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isConcludable_argsTupleSchemeFactory());
    }

    public int cid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isConcludable_args.class, metaDataMap);
    }

    public isConcludable_args() {
    }

    public isConcludable_args(
      int cid)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isConcludable_args(isConcludable_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cid = other.cid;
    }

    public isConcludable_args deepCopy() {
      return new isConcludable_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
    }

    public int getCid() {
      return this.cid;
    }

    public isConcludable_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bit_vector.clear(__CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return __isset_bit_vector.get(__CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bit_vector.set(__CID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Integer.valueOf(getCid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isConcludable_args)
        return this.equals((isConcludable_args)that);
      return false;
    }

    public boolean equals(isConcludable_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isConcludable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isConcludable_args typedOther = (isConcludable_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isConcludable_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isConcludable_argsStandardSchemeFactory implements SchemeFactory {
      public isConcludable_argsStandardScheme getScheme() {
        return new isConcludable_argsStandardScheme();
      }
    }

    private static class isConcludable_argsStandardScheme extends StandardScheme<isConcludable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isConcludable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isConcludable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isConcludable_argsTupleSchemeFactory implements SchemeFactory {
      public isConcludable_argsTupleScheme getScheme() {
        return new isConcludable_argsTupleScheme();
      }
    }

    private static class isConcludable_argsTupleScheme extends TupleScheme<isConcludable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isConcludable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isConcludable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
      }
    }

  }

  public static class isConcludable_result implements org.apache.thrift.TBase<isConcludable_result, isConcludable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isConcludable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isConcludable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isConcludable_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public RunTimeException runtimeErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      NOT_FOUND((short)2, "notFound"),
      CONTRACT_BREACH((short)3, "contractBreach"),
      RUNTIME_ERR((short)4, "runtimeErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // NOT_FOUND
            return NOT_FOUND;
          case 3: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 4: // RUNTIME_ERR
            return RUNTIME_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isConcludable_result.class, metaDataMap);
    }

    public isConcludable_result() {
    }

    public isConcludable_result(
      boolean success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      RunTimeException runtimeErr)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
      this.notFound = notFound;
      this.contractBreach = contractBreach;
      this.runtimeErr = runtimeErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isConcludable_result(isConcludable_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
    }

    public isConcludable_result deepCopy() {
      return new isConcludable_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.arg = null;
      this.notFound = null;
      this.contractBreach = null;
      this.runtimeErr = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isConcludable_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public isConcludable_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public isConcludable_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public isConcludable_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public isConcludable_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ARG:
        return getArg();

      case NOT_FOUND:
        return getNotFound();

      case CONTRACT_BREACH:
        return getContractBreach();

      case RUNTIME_ERR:
        return getRuntimeErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case NOT_FOUND:
        return isSetNotFound();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isConcludable_result)
        return this.equals((isConcludable_result)that);
      return false;
    }

    public boolean equals(isConcludable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(isConcludable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      isConcludable_result typedOther = (isConcludable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isConcludable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isConcludable_resultStandardSchemeFactory implements SchemeFactory {
      public isConcludable_resultStandardScheme getScheme() {
        return new isConcludable_resultStandardScheme();
      }
    }

    private static class isConcludable_resultStandardScheme extends StandardScheme<isConcludable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isConcludable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isConcludable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isConcludable_resultTupleSchemeFactory implements SchemeFactory {
      public isConcludable_resultTupleScheme getScheme() {
        return new isConcludable_resultTupleScheme();
      }
    }

    private static class isConcludable_resultTupleScheme extends TupleScheme<isConcludable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isConcludable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(3);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isConcludable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(4)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
      }
    }

  }

  public static class conclude_args implements org.apache.thrift.TBase<conclude_args, conclude_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conclude_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new conclude_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new conclude_argsTupleSchemeFactory());
    }

    public int cid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "ContractId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conclude_args.class, metaDataMap);
    }

    public conclude_args() {
    }

    public conclude_args(
      int cid)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conclude_args(conclude_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.cid = other.cid;
    }

    public conclude_args deepCopy() {
      return new conclude_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
    }

    public int getCid() {
      return this.cid;
    }

    public conclude_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bit_vector.clear(__CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return __isset_bit_vector.get(__CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bit_vector.set(__CID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Integer.valueOf(getCid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof conclude_args)
        return this.equals((conclude_args)that);
      return false;
    }

    public boolean equals(conclude_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(conclude_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      conclude_args typedOther = (conclude_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("conclude_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conclude_argsStandardSchemeFactory implements SchemeFactory {
      public conclude_argsStandardScheme getScheme() {
        return new conclude_argsStandardScheme();
      }
    }

    private static class conclude_argsStandardScheme extends StandardScheme<conclude_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, conclude_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, conclude_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conclude_argsTupleSchemeFactory implements SchemeFactory {
      public conclude_argsTupleScheme getScheme() {
        return new conclude_argsTupleScheme();
      }
    }

    private static class conclude_argsTupleScheme extends TupleScheme<conclude_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conclude_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conclude_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
      }
    }

  }

  public static class conclude_result implements org.apache.thrift.TBase<conclude_result, conclude_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conclude_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_CONCLUDABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("notConcludable", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_BREACH_FIELD_DESC = new org.apache.thrift.protocol.TField("contractBreach", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField RUNTIME_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeErr", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new conclude_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new conclude_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound; // required
    public dk.diku.poets.gen.thrift.contracts.ContractNotConcludable notConcludable; // required
    public dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach; // required
    public RunTimeException runtimeErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      NOT_FOUND((short)2, "notFound"),
      NOT_CONCLUDABLE((short)3, "notConcludable"),
      CONTRACT_BREACH((short)4, "contractBreach"),
      RUNTIME_ERR((short)5, "runtimeErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // NOT_FOUND
            return NOT_FOUND;
          case 3: // NOT_CONCLUDABLE
            return NOT_CONCLUDABLE;
          case 4: // CONTRACT_BREACH
            return CONTRACT_BREACH;
          case 5: // RUNTIME_ERR
            return RUNTIME_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_CONCLUDABLE, new org.apache.thrift.meta_data.FieldMetaData("notConcludable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_BREACH, new org.apache.thrift.meta_data.FieldMetaData("contractBreach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME_ERR, new org.apache.thrift.meta_data.FieldMetaData("runtimeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conclude_result.class, metaDataMap);
    }

    public conclude_result() {
    }

    public conclude_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound,
      dk.diku.poets.gen.thrift.contracts.ContractNotConcludable notConcludable,
      dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach,
      RunTimeException runtimeErr)
    {
      this();
      this.arg = arg;
      this.notFound = notFound;
      this.notConcludable = notConcludable;
      this.contractBreach = contractBreach;
      this.runtimeErr = runtimeErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conclude_result(conclude_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException(other.notFound);
      }
      if (other.isSetNotConcludable()) {
        this.notConcludable = new dk.diku.poets.gen.thrift.contracts.ContractNotConcludable(other.notConcludable);
      }
      if (other.isSetContractBreach()) {
        this.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach(other.contractBreach);
      }
      if (other.isSetRuntimeErr()) {
        this.runtimeErr = new RunTimeException(other.runtimeErr);
      }
    }

    public conclude_result deepCopy() {
      return new conclude_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.notFound = null;
      this.notConcludable = null;
      this.contractBreach = null;
      this.runtimeErr = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public conclude_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotFoundException getNotFound() {
      return this.notFound;
    }

    public conclude_result setNotFound(dk.diku.poets.gen.thrift.contracts.ContractNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractNotConcludable getNotConcludable() {
      return this.notConcludable;
    }

    public conclude_result setNotConcludable(dk.diku.poets.gen.thrift.contracts.ContractNotConcludable notConcludable) {
      this.notConcludable = notConcludable;
      return this;
    }

    public void unsetNotConcludable() {
      this.notConcludable = null;
    }

    /** Returns true if field notConcludable is set (has been assigned a value) and false otherwise */
    public boolean isSetNotConcludable() {
      return this.notConcludable != null;
    }

    public void setNotConcludableIsSet(boolean value) {
      if (!value) {
        this.notConcludable = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractBreach getContractBreach() {
      return this.contractBreach;
    }

    public conclude_result setContractBreach(dk.diku.poets.gen.thrift.contracts.ContractBreach contractBreach) {
      this.contractBreach = contractBreach;
      return this;
    }

    public void unsetContractBreach() {
      this.contractBreach = null;
    }

    /** Returns true if field contractBreach is set (has been assigned a value) and false otherwise */
    public boolean isSetContractBreach() {
      return this.contractBreach != null;
    }

    public void setContractBreachIsSet(boolean value) {
      if (!value) {
        this.contractBreach = null;
      }
    }

    public RunTimeException getRuntimeErr() {
      return this.runtimeErr;
    }

    public conclude_result setRuntimeErr(RunTimeException runtimeErr) {
      this.runtimeErr = runtimeErr;
      return this;
    }

    public void unsetRuntimeErr() {
      this.runtimeErr = null;
    }

    /** Returns true if field runtimeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeErr() {
      return this.runtimeErr != null;
    }

    public void setRuntimeErrIsSet(boolean value) {
      if (!value) {
        this.runtimeErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.contracts.ContractNotFoundException)value);
        }
        break;

      case NOT_CONCLUDABLE:
        if (value == null) {
          unsetNotConcludable();
        } else {
          setNotConcludable((dk.diku.poets.gen.thrift.contracts.ContractNotConcludable)value);
        }
        break;

      case CONTRACT_BREACH:
        if (value == null) {
          unsetContractBreach();
        } else {
          setContractBreach((dk.diku.poets.gen.thrift.contracts.ContractBreach)value);
        }
        break;

      case RUNTIME_ERR:
        if (value == null) {
          unsetRuntimeErr();
        } else {
          setRuntimeErr((RunTimeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case NOT_FOUND:
        return getNotFound();

      case NOT_CONCLUDABLE:
        return getNotConcludable();

      case CONTRACT_BREACH:
        return getContractBreach();

      case RUNTIME_ERR:
        return getRuntimeErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case NOT_FOUND:
        return isSetNotFound();
      case NOT_CONCLUDABLE:
        return isSetNotConcludable();
      case CONTRACT_BREACH:
        return isSetContractBreach();
      case RUNTIME_ERR:
        return isSetRuntimeErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof conclude_result)
        return this.equals((conclude_result)that);
      return false;
    }

    public boolean equals(conclude_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_notConcludable = true && this.isSetNotConcludable();
      boolean that_present_notConcludable = true && that.isSetNotConcludable();
      if (this_present_notConcludable || that_present_notConcludable) {
        if (!(this_present_notConcludable && that_present_notConcludable))
          return false;
        if (!this.notConcludable.equals(that.notConcludable))
          return false;
      }

      boolean this_present_contractBreach = true && this.isSetContractBreach();
      boolean that_present_contractBreach = true && that.isSetContractBreach();
      if (this_present_contractBreach || that_present_contractBreach) {
        if (!(this_present_contractBreach && that_present_contractBreach))
          return false;
        if (!this.contractBreach.equals(that.contractBreach))
          return false;
      }

      boolean this_present_runtimeErr = true && this.isSetRuntimeErr();
      boolean that_present_runtimeErr = true && that.isSetRuntimeErr();
      if (this_present_runtimeErr || that_present_runtimeErr) {
        if (!(this_present_runtimeErr && that_present_runtimeErr))
          return false;
        if (!this.runtimeErr.equals(that.runtimeErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(conclude_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      conclude_result typedOther = (conclude_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotConcludable()).compareTo(typedOther.isSetNotConcludable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotConcludable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notConcludable, typedOther.notConcludable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractBreach()).compareTo(typedOther.isSetContractBreach());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractBreach()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractBreach, typedOther.contractBreach);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntimeErr()).compareTo(typedOther.isSetRuntimeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeErr, typedOther.runtimeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("conclude_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notConcludable:");
      if (this.notConcludable == null) {
        sb.append("null");
      } else {
        sb.append(this.notConcludable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractBreach:");
      if (this.contractBreach == null) {
        sb.append("null");
      } else {
        sb.append(this.contractBreach);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeErr:");
      if (this.runtimeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conclude_resultStandardSchemeFactory implements SchemeFactory {
      public conclude_resultStandardScheme getScheme() {
        return new conclude_resultStandardScheme();
      }
    }

    private static class conclude_resultStandardScheme extends StandardScheme<conclude_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, conclude_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_CONCLUDABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notConcludable = new dk.diku.poets.gen.thrift.contracts.ContractNotConcludable();
                struct.notConcludable.read(iprot);
                struct.setNotConcludableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_BREACH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
                struct.contractBreach.read(iprot);
                struct.setContractBreachIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // RUNTIME_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtimeErr = new RunTimeException();
                struct.runtimeErr.read(iprot);
                struct.setRuntimeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, conclude_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notConcludable != null) {
          oprot.writeFieldBegin(NOT_CONCLUDABLE_FIELD_DESC);
          struct.notConcludable.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractBreach != null) {
          oprot.writeFieldBegin(CONTRACT_BREACH_FIELD_DESC);
          struct.contractBreach.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeErr != null) {
          oprot.writeFieldBegin(RUNTIME_ERR_FIELD_DESC);
          struct.runtimeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conclude_resultTupleSchemeFactory implements SchemeFactory {
      public conclude_resultTupleScheme getScheme() {
        return new conclude_resultTupleScheme();
      }
    }

    private static class conclude_resultTupleScheme extends TupleScheme<conclude_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conclude_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetNotConcludable()) {
          optionals.set(2);
        }
        if (struct.isSetContractBreach()) {
          optionals.set(3);
        }
        if (struct.isSetRuntimeErr()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetNotConcludable()) {
          struct.notConcludable.write(oprot);
        }
        if (struct.isSetContractBreach()) {
          struct.contractBreach.write(oprot);
        }
        if (struct.isSetRuntimeErr()) {
          struct.runtimeErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conclude_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.notFound = new dk.diku.poets.gen.thrift.contracts.ContractNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notConcludable = new dk.diku.poets.gen.thrift.contracts.ContractNotConcludable();
          struct.notConcludable.read(iprot);
          struct.setNotConcludableIsSet(true);
        }
        if (incoming.get(3)) {
          struct.contractBreach = new dk.diku.poets.gen.thrift.contracts.ContractBreach();
          struct.contractBreach.read(iprot);
          struct.setContractBreachIsSet(true);
        }
        if (incoming.get(4)) {
          struct.runtimeErr = new RunTimeException();
          struct.runtimeErr.read(iprot);
          struct.setRuntimeErrIsSet(true);
        }
      }
    }

  }

  public static class createContractDefinition_args implements org.apache.thrift.TBase<createContractDefinition_args, createContractDefinition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContractDefinition_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_DEF_FIELD_DESC = new org.apache.thrift.protocol.TField("contractDef", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContractDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContractDefinition_argsTupleSchemeFactory());
    }

    public String contractDef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_DEF((short)1, "contractDef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_DEF
            return CONTRACT_DEF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_DEF, new org.apache.thrift.meta_data.FieldMetaData("contractDef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CSL")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContractDefinition_args.class, metaDataMap);
    }

    public createContractDefinition_args() {
    }

    public createContractDefinition_args(
      String contractDef)
    {
      this();
      this.contractDef = contractDef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContractDefinition_args(createContractDefinition_args other) {
      if (other.isSetContractDef()) {
        this.contractDef = other.contractDef;
      }
    }

    public createContractDefinition_args deepCopy() {
      return new createContractDefinition_args(this);
    }

    @Override
    public void clear() {
      this.contractDef = null;
    }

    public String getContractDef() {
      return this.contractDef;
    }

    public createContractDefinition_args setContractDef(String contractDef) {
      this.contractDef = contractDef;
      return this;
    }

    public void unsetContractDef() {
      this.contractDef = null;
    }

    /** Returns true if field contractDef is set (has been assigned a value) and false otherwise */
    public boolean isSetContractDef() {
      return this.contractDef != null;
    }

    public void setContractDefIsSet(boolean value) {
      if (!value) {
        this.contractDef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_DEF:
        if (value == null) {
          unsetContractDef();
        } else {
          setContractDef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_DEF:
        return getContractDef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_DEF:
        return isSetContractDef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContractDefinition_args)
        return this.equals((createContractDefinition_args)that);
      return false;
    }

    public boolean equals(createContractDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_contractDef = true && this.isSetContractDef();
      boolean that_present_contractDef = true && that.isSetContractDef();
      if (this_present_contractDef || that_present_contractDef) {
        if (!(this_present_contractDef && that_present_contractDef))
          return false;
        if (!this.contractDef.equals(that.contractDef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createContractDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createContractDefinition_args typedOther = (createContractDefinition_args)other;

      lastComparison = Boolean.valueOf(isSetContractDef()).compareTo(typedOther.isSetContractDef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractDef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractDef, typedOther.contractDef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContractDefinition_args(");
      boolean first = true;

      sb.append("contractDef:");
      if (this.contractDef == null) {
        sb.append("null");
      } else {
        sb.append(this.contractDef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContractDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public createContractDefinition_argsStandardScheme getScheme() {
        return new createContractDefinition_argsStandardScheme();
      }
    }

    private static class createContractDefinition_argsStandardScheme extends StandardScheme<createContractDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContractDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_DEF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractDef = iprot.readString();
                struct.setContractDefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContractDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractDef != null) {
          oprot.writeFieldBegin(CONTRACT_DEF_FIELD_DESC);
          oprot.writeString(struct.contractDef);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContractDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public createContractDefinition_argsTupleScheme getScheme() {
        return new createContractDefinition_argsTupleScheme();
      }
    }

    private static class createContractDefinition_argsTupleScheme extends TupleScheme<createContractDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractDef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractDef()) {
          oprot.writeString(struct.contractDef);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractDef = iprot.readString();
          struct.setContractDefIsSet(true);
        }
      }
    }

  }

  public static class createContractDefinition_result implements org.apache.thrift.TBase<createContractDefinition_result, createContractDefinition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContractDefinition_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARSE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("parseException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField GUARDEDNESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("guardednessException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CONTRACT_DEF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contractDefExists", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContractDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContractDefinition_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.ParseException parseException; // required
    public dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException; // required
    public dk.diku.poets.gen.thrift.contracts.ContractDefExistsException contractDefExists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      TYPE_ERR((short)2, "typeErr"),
      PARSE_EXCEPTION((short)3, "parseException"),
      GUARDEDNESS_EXCEPTION((short)4, "guardednessException"),
      CONTRACT_DEF_EXISTS((short)5, "contractDefExists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // TYPE_ERR
            return TYPE_ERR;
          case 3: // PARSE_EXCEPTION
            return PARSE_EXCEPTION;
          case 4: // GUARDEDNESS_EXCEPTION
            return GUARDEDNESS_EXCEPTION;
          case 5: // CONTRACT_DEF_EXISTS
            return CONTRACT_DEF_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PARSE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("parseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.GUARDEDNESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("guardednessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_DEF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("contractDefExists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContractDefinition_result.class, metaDataMap);
    }

    public createContractDefinition_result() {
    }

    public createContractDefinition_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.ParseException parseException,
      dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException,
      dk.diku.poets.gen.thrift.contracts.ContractDefExistsException contractDefExists)
    {
      this();
      this.arg = arg;
      this.typeErr = typeErr;
      this.parseException = parseException;
      this.guardednessException = guardednessException;
      this.contractDefExists = contractDefExists;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContractDefinition_result(createContractDefinition_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetParseException()) {
        this.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException(other.parseException);
      }
      if (other.isSetGuardednessException()) {
        this.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException(other.guardednessException);
      }
      if (other.isSetContractDefExists()) {
        this.contractDefExists = new dk.diku.poets.gen.thrift.contracts.ContractDefExistsException(other.contractDefExists);
      }
    }

    public createContractDefinition_result deepCopy() {
      return new createContractDefinition_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.typeErr = null;
      this.parseException = null;
      this.guardednessException = null;
      this.contractDefExists = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public createContractDefinition_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public createContractDefinition_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ParseException getParseException() {
      return this.parseException;
    }

    public createContractDefinition_result setParseException(dk.diku.poets.gen.thrift.contracts.ParseException parseException) {
      this.parseException = parseException;
      return this;
    }

    public void unsetParseException() {
      this.parseException = null;
    }

    /** Returns true if field parseException is set (has been assigned a value) and false otherwise */
    public boolean isSetParseException() {
      return this.parseException != null;
    }

    public void setParseExceptionIsSet(boolean value) {
      if (!value) {
        this.parseException = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.GuardednessException getGuardednessException() {
      return this.guardednessException;
    }

    public createContractDefinition_result setGuardednessException(dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException) {
      this.guardednessException = guardednessException;
      return this;
    }

    public void unsetGuardednessException() {
      this.guardednessException = null;
    }

    /** Returns true if field guardednessException is set (has been assigned a value) and false otherwise */
    public boolean isSetGuardednessException() {
      return this.guardednessException != null;
    }

    public void setGuardednessExceptionIsSet(boolean value) {
      if (!value) {
        this.guardednessException = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractDefExistsException getContractDefExists() {
      return this.contractDefExists;
    }

    public createContractDefinition_result setContractDefExists(dk.diku.poets.gen.thrift.contracts.ContractDefExistsException contractDefExists) {
      this.contractDefExists = contractDefExists;
      return this;
    }

    public void unsetContractDefExists() {
      this.contractDefExists = null;
    }

    /** Returns true if field contractDefExists is set (has been assigned a value) and false otherwise */
    public boolean isSetContractDefExists() {
      return this.contractDefExists != null;
    }

    public void setContractDefExistsIsSet(boolean value) {
      if (!value) {
        this.contractDefExists = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case PARSE_EXCEPTION:
        if (value == null) {
          unsetParseException();
        } else {
          setParseException((dk.diku.poets.gen.thrift.contracts.ParseException)value);
        }
        break;

      case GUARDEDNESS_EXCEPTION:
        if (value == null) {
          unsetGuardednessException();
        } else {
          setGuardednessException((dk.diku.poets.gen.thrift.contracts.GuardednessException)value);
        }
        break;

      case CONTRACT_DEF_EXISTS:
        if (value == null) {
          unsetContractDefExists();
        } else {
          setContractDefExists((dk.diku.poets.gen.thrift.contracts.ContractDefExistsException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case TYPE_ERR:
        return getTypeErr();

      case PARSE_EXCEPTION:
        return getParseException();

      case GUARDEDNESS_EXCEPTION:
        return getGuardednessException();

      case CONTRACT_DEF_EXISTS:
        return getContractDefExists();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case TYPE_ERR:
        return isSetTypeErr();
      case PARSE_EXCEPTION:
        return isSetParseException();
      case GUARDEDNESS_EXCEPTION:
        return isSetGuardednessException();
      case CONTRACT_DEF_EXISTS:
        return isSetContractDefExists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContractDefinition_result)
        return this.equals((createContractDefinition_result)that);
      return false;
    }

    public boolean equals(createContractDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_parseException = true && this.isSetParseException();
      boolean that_present_parseException = true && that.isSetParseException();
      if (this_present_parseException || that_present_parseException) {
        if (!(this_present_parseException && that_present_parseException))
          return false;
        if (!this.parseException.equals(that.parseException))
          return false;
      }

      boolean this_present_guardednessException = true && this.isSetGuardednessException();
      boolean that_present_guardednessException = true && that.isSetGuardednessException();
      if (this_present_guardednessException || that_present_guardednessException) {
        if (!(this_present_guardednessException && that_present_guardednessException))
          return false;
        if (!this.guardednessException.equals(that.guardednessException))
          return false;
      }

      boolean this_present_contractDefExists = true && this.isSetContractDefExists();
      boolean that_present_contractDefExists = true && that.isSetContractDefExists();
      if (this_present_contractDefExists || that_present_contractDefExists) {
        if (!(this_present_contractDefExists && that_present_contractDefExists))
          return false;
        if (!this.contractDefExists.equals(that.contractDefExists))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createContractDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createContractDefinition_result typedOther = (createContractDefinition_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParseException()).compareTo(typedOther.isSetParseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseException, typedOther.parseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuardednessException()).compareTo(typedOther.isSetGuardednessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuardednessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guardednessException, typedOther.guardednessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractDefExists()).compareTo(typedOther.isSetContractDefExists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractDefExists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractDefExists, typedOther.contractDefExists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContractDefinition_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parseException:");
      if (this.parseException == null) {
        sb.append("null");
      } else {
        sb.append(this.parseException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guardednessException:");
      if (this.guardednessException == null) {
        sb.append("null");
      } else {
        sb.append(this.guardednessException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractDefExists:");
      if (this.contractDefExists == null) {
        sb.append("null");
      } else {
        sb.append(this.contractDefExists);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContractDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public createContractDefinition_resultStandardScheme getScheme() {
        return new createContractDefinition_resultStandardScheme();
      }
    }

    private static class createContractDefinition_resultStandardScheme extends StandardScheme<createContractDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContractDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARSE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException();
                struct.parseException.read(iprot);
                struct.setParseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GUARDEDNESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException();
                struct.guardednessException.read(iprot);
                struct.setGuardednessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTRACT_DEF_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractDefExists = new dk.diku.poets.gen.thrift.contracts.ContractDefExistsException();
                struct.contractDefExists.read(iprot);
                struct.setContractDefExistsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContractDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parseException != null) {
          oprot.writeFieldBegin(PARSE_EXCEPTION_FIELD_DESC);
          struct.parseException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.guardednessException != null) {
          oprot.writeFieldBegin(GUARDEDNESS_EXCEPTION_FIELD_DESC);
          struct.guardednessException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractDefExists != null) {
          oprot.writeFieldBegin(CONTRACT_DEF_EXISTS_FIELD_DESC);
          struct.contractDefExists.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContractDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public createContractDefinition_resultTupleScheme getScheme() {
        return new createContractDefinition_resultTupleScheme();
      }
    }

    private static class createContractDefinition_resultTupleScheme extends TupleScheme<createContractDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(1);
        }
        if (struct.isSetParseException()) {
          optionals.set(2);
        }
        if (struct.isSetGuardednessException()) {
          optionals.set(3);
        }
        if (struct.isSetContractDefExists()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetParseException()) {
          struct.parseException.write(oprot);
        }
        if (struct.isSetGuardednessException()) {
          struct.guardednessException.write(oprot);
        }
        if (struct.isSetContractDefExists()) {
          struct.contractDefExists.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException();
          struct.parseException.read(iprot);
          struct.setParseExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException();
          struct.guardednessException.read(iprot);
          struct.setGuardednessExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contractDefExists = new dk.diku.poets.gen.thrift.contracts.ContractDefExistsException();
          struct.contractDefExists.read(iprot);
          struct.setContractDefExistsIsSet(true);
        }
      }
    }

  }

  public static class updateContractDefinition_args implements org.apache.thrift.TBase<updateContractDefinition_args, updateContractDefinition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractDefinition_args");

    private static final org.apache.thrift.protocol.TField CONTRACT_DEF_FIELD_DESC = new org.apache.thrift.protocol.TField("contractDef", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractDefinition_argsTupleSchemeFactory());
    }

    public String contractDef; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTRACT_DEF((short)1, "contractDef");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTRACT_DEF
            return CONTRACT_DEF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTRACT_DEF, new org.apache.thrift.meta_data.FieldMetaData("contractDef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CSL")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractDefinition_args.class, metaDataMap);
    }

    public updateContractDefinition_args() {
    }

    public updateContractDefinition_args(
      String contractDef)
    {
      this();
      this.contractDef = contractDef;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractDefinition_args(updateContractDefinition_args other) {
      if (other.isSetContractDef()) {
        this.contractDef = other.contractDef;
      }
    }

    public updateContractDefinition_args deepCopy() {
      return new updateContractDefinition_args(this);
    }

    @Override
    public void clear() {
      this.contractDef = null;
    }

    public String getContractDef() {
      return this.contractDef;
    }

    public updateContractDefinition_args setContractDef(String contractDef) {
      this.contractDef = contractDef;
      return this;
    }

    public void unsetContractDef() {
      this.contractDef = null;
    }

    /** Returns true if field contractDef is set (has been assigned a value) and false otherwise */
    public boolean isSetContractDef() {
      return this.contractDef != null;
    }

    public void setContractDefIsSet(boolean value) {
      if (!value) {
        this.contractDef = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTRACT_DEF:
        if (value == null) {
          unsetContractDef();
        } else {
          setContractDef((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTRACT_DEF:
        return getContractDef();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTRACT_DEF:
        return isSetContractDef();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractDefinition_args)
        return this.equals((updateContractDefinition_args)that);
      return false;
    }

    public boolean equals(updateContractDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_contractDef = true && this.isSetContractDef();
      boolean that_present_contractDef = true && that.isSetContractDef();
      if (this_present_contractDef || that_present_contractDef) {
        if (!(this_present_contractDef && that_present_contractDef))
          return false;
        if (!this.contractDef.equals(that.contractDef))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateContractDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateContractDefinition_args typedOther = (updateContractDefinition_args)other;

      lastComparison = Boolean.valueOf(isSetContractDef()).compareTo(typedOther.isSetContractDef());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractDef()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractDef, typedOther.contractDef);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractDefinition_args(");
      boolean first = true;

      sb.append("contractDef:");
      if (this.contractDef == null) {
        sb.append("null");
      } else {
        sb.append(this.contractDef);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public updateContractDefinition_argsStandardScheme getScheme() {
        return new updateContractDefinition_argsStandardScheme();
      }
    }

    private static class updateContractDefinition_argsStandardScheme extends StandardScheme<updateContractDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTRACT_DEF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractDef = iprot.readString();
                struct.setContractDefIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.contractDef != null) {
          oprot.writeFieldBegin(CONTRACT_DEF_FIELD_DESC);
          oprot.writeString(struct.contractDef);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public updateContractDefinition_argsTupleScheme getScheme() {
        return new updateContractDefinition_argsTupleScheme();
      }
    }

    private static class updateContractDefinition_argsTupleScheme extends TupleScheme<updateContractDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContractDef()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetContractDef()) {
          oprot.writeString(struct.contractDef);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.contractDef = iprot.readString();
          struct.setContractDefIsSet(true);
        }
      }
    }

  }

  public static class updateContractDefinition_result implements org.apache.thrift.TBase<updateContractDefinition_result, updateContractDefinition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateContractDefinition_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARSE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("parseException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField GUARDEDNESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("guardednessException", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CONTRACT_DEF_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("contractDefNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateContractDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateContractDefinition_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.contracts.ParseException parseException; // required
    public dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException; // required
    public dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      TYPE_ERR((short)2, "typeErr"),
      PARSE_EXCEPTION((short)3, "parseException"),
      GUARDEDNESS_EXCEPTION((short)4, "guardednessException"),
      CONTRACT_DEF_NOT_FOUND((short)5, "contractDefNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // TYPE_ERR
            return TYPE_ERR;
          case 3: // PARSE_EXCEPTION
            return PARSE_EXCEPTION;
          case 4: // GUARDEDNESS_EXCEPTION
            return GUARDEDNESS_EXCEPTION;
          case 5: // CONTRACT_DEF_NOT_FOUND
            return CONTRACT_DEF_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PARSE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("parseException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.GUARDEDNESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("guardednessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_DEF_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("contractDefNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateContractDefinition_result.class, metaDataMap);
    }

    public updateContractDefinition_result() {
    }

    public updateContractDefinition_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.contracts.ParseException parseException,
      dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException,
      dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound)
    {
      this();
      this.arg = arg;
      this.typeErr = typeErr;
      this.parseException = parseException;
      this.guardednessException = guardednessException;
      this.contractDefNotFound = contractDefNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContractDefinition_result(updateContractDefinition_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetParseException()) {
        this.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException(other.parseException);
      }
      if (other.isSetGuardednessException()) {
        this.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException(other.guardednessException);
      }
      if (other.isSetContractDefNotFound()) {
        this.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException(other.contractDefNotFound);
      }
    }

    public updateContractDefinition_result deepCopy() {
      return new updateContractDefinition_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.typeErr = null;
      this.parseException = null;
      this.guardednessException = null;
      this.contractDefNotFound = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public updateContractDefinition_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public updateContractDefinition_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ParseException getParseException() {
      return this.parseException;
    }

    public updateContractDefinition_result setParseException(dk.diku.poets.gen.thrift.contracts.ParseException parseException) {
      this.parseException = parseException;
      return this;
    }

    public void unsetParseException() {
      this.parseException = null;
    }

    /** Returns true if field parseException is set (has been assigned a value) and false otherwise */
    public boolean isSetParseException() {
      return this.parseException != null;
    }

    public void setParseExceptionIsSet(boolean value) {
      if (!value) {
        this.parseException = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.GuardednessException getGuardednessException() {
      return this.guardednessException;
    }

    public updateContractDefinition_result setGuardednessException(dk.diku.poets.gen.thrift.contracts.GuardednessException guardednessException) {
      this.guardednessException = guardednessException;
      return this;
    }

    public void unsetGuardednessException() {
      this.guardednessException = null;
    }

    /** Returns true if field guardednessException is set (has been assigned a value) and false otherwise */
    public boolean isSetGuardednessException() {
      return this.guardednessException != null;
    }

    public void setGuardednessExceptionIsSet(boolean value) {
      if (!value) {
        this.guardednessException = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException getContractDefNotFound() {
      return this.contractDefNotFound;
    }

    public updateContractDefinition_result setContractDefNotFound(dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound) {
      this.contractDefNotFound = contractDefNotFound;
      return this;
    }

    public void unsetContractDefNotFound() {
      this.contractDefNotFound = null;
    }

    /** Returns true if field contractDefNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetContractDefNotFound() {
      return this.contractDefNotFound != null;
    }

    public void setContractDefNotFoundIsSet(boolean value) {
      if (!value) {
        this.contractDefNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case PARSE_EXCEPTION:
        if (value == null) {
          unsetParseException();
        } else {
          setParseException((dk.diku.poets.gen.thrift.contracts.ParseException)value);
        }
        break;

      case GUARDEDNESS_EXCEPTION:
        if (value == null) {
          unsetGuardednessException();
        } else {
          setGuardednessException((dk.diku.poets.gen.thrift.contracts.GuardednessException)value);
        }
        break;

      case CONTRACT_DEF_NOT_FOUND:
        if (value == null) {
          unsetContractDefNotFound();
        } else {
          setContractDefNotFound((dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case TYPE_ERR:
        return getTypeErr();

      case PARSE_EXCEPTION:
        return getParseException();

      case GUARDEDNESS_EXCEPTION:
        return getGuardednessException();

      case CONTRACT_DEF_NOT_FOUND:
        return getContractDefNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case TYPE_ERR:
        return isSetTypeErr();
      case PARSE_EXCEPTION:
        return isSetParseException();
      case GUARDEDNESS_EXCEPTION:
        return isSetGuardednessException();
      case CONTRACT_DEF_NOT_FOUND:
        return isSetContractDefNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContractDefinition_result)
        return this.equals((updateContractDefinition_result)that);
      return false;
    }

    public boolean equals(updateContractDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_parseException = true && this.isSetParseException();
      boolean that_present_parseException = true && that.isSetParseException();
      if (this_present_parseException || that_present_parseException) {
        if (!(this_present_parseException && that_present_parseException))
          return false;
        if (!this.parseException.equals(that.parseException))
          return false;
      }

      boolean this_present_guardednessException = true && this.isSetGuardednessException();
      boolean that_present_guardednessException = true && that.isSetGuardednessException();
      if (this_present_guardednessException || that_present_guardednessException) {
        if (!(this_present_guardednessException && that_present_guardednessException))
          return false;
        if (!this.guardednessException.equals(that.guardednessException))
          return false;
      }

      boolean this_present_contractDefNotFound = true && this.isSetContractDefNotFound();
      boolean that_present_contractDefNotFound = true && that.isSetContractDefNotFound();
      if (this_present_contractDefNotFound || that_present_contractDefNotFound) {
        if (!(this_present_contractDefNotFound && that_present_contractDefNotFound))
          return false;
        if (!this.contractDefNotFound.equals(that.contractDefNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateContractDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateContractDefinition_result typedOther = (updateContractDefinition_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParseException()).compareTo(typedOther.isSetParseException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseException, typedOther.parseException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGuardednessException()).compareTo(typedOther.isSetGuardednessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuardednessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guardednessException, typedOther.guardednessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractDefNotFound()).compareTo(typedOther.isSetContractDefNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractDefNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractDefNotFound, typedOther.contractDefNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateContractDefinition_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parseException:");
      if (this.parseException == null) {
        sb.append("null");
      } else {
        sb.append(this.parseException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guardednessException:");
      if (this.guardednessException == null) {
        sb.append("null");
      } else {
        sb.append(this.guardednessException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractDefNotFound:");
      if (this.contractDefNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.contractDefNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateContractDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public updateContractDefinition_resultStandardScheme getScheme() {
        return new updateContractDefinition_resultStandardScheme();
      }
    }

    private static class updateContractDefinition_resultStandardScheme extends StandardScheme<updateContractDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateContractDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARSE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException();
                struct.parseException.read(iprot);
                struct.setParseExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GUARDEDNESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException();
                struct.guardednessException.read(iprot);
                struct.setGuardednessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTRACT_DEF_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException();
                struct.contractDefNotFound.read(iprot);
                struct.setContractDefNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateContractDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parseException != null) {
          oprot.writeFieldBegin(PARSE_EXCEPTION_FIELD_DESC);
          struct.parseException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.guardednessException != null) {
          oprot.writeFieldBegin(GUARDEDNESS_EXCEPTION_FIELD_DESC);
          struct.guardednessException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractDefNotFound != null) {
          oprot.writeFieldBegin(CONTRACT_DEF_NOT_FOUND_FIELD_DESC);
          struct.contractDefNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateContractDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public updateContractDefinition_resultTupleScheme getScheme() {
        return new updateContractDefinition_resultTupleScheme();
      }
    }

    private static class updateContractDefinition_resultTupleScheme extends TupleScheme<updateContractDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(1);
        }
        if (struct.isSetParseException()) {
          optionals.set(2);
        }
        if (struct.isSetGuardednessException()) {
          optionals.set(3);
        }
        if (struct.isSetContractDefNotFound()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetParseException()) {
          struct.parseException.write(oprot);
        }
        if (struct.isSetGuardednessException()) {
          struct.guardednessException.write(oprot);
        }
        if (struct.isSetContractDefNotFound()) {
          struct.contractDefNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parseException = new dk.diku.poets.gen.thrift.contracts.ParseException();
          struct.parseException.read(iprot);
          struct.setParseExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.guardednessException = new dk.diku.poets.gen.thrift.contracts.GuardednessException();
          struct.guardednessException.read(iprot);
          struct.setGuardednessExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException();
          struct.contractDefNotFound.read(iprot);
          struct.setContractDefNotFoundIsSet(true);
        }
      }
    }

  }

  public static class deleteContractDefinition_args implements org.apache.thrift.TBase<deleteContractDefinition_args, deleteContractDefinition_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteContractDefinition_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteContractDefinition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteContractDefinition_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteContractDefinition_args.class, metaDataMap);
    }

    public deleteContractDefinition_args() {
    }

    public deleteContractDefinition_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteContractDefinition_args(deleteContractDefinition_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public deleteContractDefinition_args deepCopy() {
      return new deleteContractDefinition_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public deleteContractDefinition_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteContractDefinition_args)
        return this.equals((deleteContractDefinition_args)that);
      return false;
    }

    public boolean equals(deleteContractDefinition_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteContractDefinition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteContractDefinition_args typedOther = (deleteContractDefinition_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteContractDefinition_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteContractDefinition_argsStandardSchemeFactory implements SchemeFactory {
      public deleteContractDefinition_argsStandardScheme getScheme() {
        return new deleteContractDefinition_argsStandardScheme();
      }
    }

    private static class deleteContractDefinition_argsStandardScheme extends StandardScheme<deleteContractDefinition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteContractDefinition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteContractDefinition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteContractDefinition_argsTupleSchemeFactory implements SchemeFactory {
      public deleteContractDefinition_argsTupleScheme getScheme() {
        return new deleteContractDefinition_argsTupleScheme();
      }
    }

    private static class deleteContractDefinition_argsTupleScheme extends TupleScheme<deleteContractDefinition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteContractDefinition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class deleteContractDefinition_result implements org.apache.thrift.TBase<deleteContractDefinition_result, deleteContractDefinition_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteContractDefinition_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_DEF_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("contractDefNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteContractDefinition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteContractDefinition_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      CONTRACT_DEF_NOT_FOUND((short)2, "contractDefNotFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // CONTRACT_DEF_NOT_FOUND
            return CONTRACT_DEF_NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CONTRACT_DEF_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("contractDefNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteContractDefinition_result.class, metaDataMap);
    }

    public deleteContractDefinition_result() {
    }

    public deleteContractDefinition_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound)
    {
      this();
      this.arg = arg;
      this.contractDefNotFound = contractDefNotFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteContractDefinition_result(deleteContractDefinition_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetContractDefNotFound()) {
        this.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException(other.contractDefNotFound);
      }
    }

    public deleteContractDefinition_result deepCopy() {
      return new deleteContractDefinition_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.contractDefNotFound = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public deleteContractDefinition_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException getContractDefNotFound() {
      return this.contractDefNotFound;
    }

    public deleteContractDefinition_result setContractDefNotFound(dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException contractDefNotFound) {
      this.contractDefNotFound = contractDefNotFound;
      return this;
    }

    public void unsetContractDefNotFound() {
      this.contractDefNotFound = null;
    }

    /** Returns true if field contractDefNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetContractDefNotFound() {
      return this.contractDefNotFound != null;
    }

    public void setContractDefNotFoundIsSet(boolean value) {
      if (!value) {
        this.contractDefNotFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case CONTRACT_DEF_NOT_FOUND:
        if (value == null) {
          unsetContractDefNotFound();
        } else {
          setContractDefNotFound((dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case CONTRACT_DEF_NOT_FOUND:
        return getContractDefNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case CONTRACT_DEF_NOT_FOUND:
        return isSetContractDefNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteContractDefinition_result)
        return this.equals((deleteContractDefinition_result)that);
      return false;
    }

    public boolean equals(deleteContractDefinition_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_contractDefNotFound = true && this.isSetContractDefNotFound();
      boolean that_present_contractDefNotFound = true && that.isSetContractDefNotFound();
      if (this_present_contractDefNotFound || that_present_contractDefNotFound) {
        if (!(this_present_contractDefNotFound && that_present_contractDefNotFound))
          return false;
        if (!this.contractDefNotFound.equals(that.contractDefNotFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteContractDefinition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteContractDefinition_result typedOther = (deleteContractDefinition_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContractDefNotFound()).compareTo(typedOther.isSetContractDefNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractDefNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractDefNotFound, typedOther.contractDefNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteContractDefinition_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractDefNotFound:");
      if (this.contractDefNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.contractDefNotFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteContractDefinition_resultStandardSchemeFactory implements SchemeFactory {
      public deleteContractDefinition_resultStandardScheme getScheme() {
        return new deleteContractDefinition_resultStandardScheme();
      }
    }

    private static class deleteContractDefinition_resultStandardScheme extends StandardScheme<deleteContractDefinition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteContractDefinition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_DEF_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException();
                struct.contractDefNotFound.read(iprot);
                struct.setContractDefNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteContractDefinition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.contractDefNotFound != null) {
          oprot.writeFieldBegin(CONTRACT_DEF_NOT_FOUND_FIELD_DESC);
          struct.contractDefNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteContractDefinition_resultTupleSchemeFactory implements SchemeFactory {
      public deleteContractDefinition_resultTupleScheme getScheme() {
        return new deleteContractDefinition_resultTupleScheme();
      }
    }

    private static class deleteContractDefinition_resultTupleScheme extends TupleScheme<deleteContractDefinition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetContractDefNotFound()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetContractDefNotFound()) {
          struct.contractDefNotFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteContractDefinition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contractDefNotFound = new dk.diku.poets.gen.thrift.contracts.ContractDefNotFoundException();
          struct.contractDefNotFound.read(iprot);
          struct.setContractDefNotFoundIsSet(true);
        }
      }
    }

  }

  public static class createEntity_args implements org.apache.thrift.TBase<createEntity_args, createEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEntity_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEntity_argsTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.value.Value data; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "RecordName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEntity_args.class, metaDataMap);
    }

    public createEntity_args() {
    }

    public createEntity_args(
      dk.diku.poets.gen.thrift.value.Value data,
      String type)
    {
      this();
      this.data = data;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEntity_args(createEntity_args other) {
      if (other.isSetData()) {
        this.data = new dk.diku.poets.gen.thrift.value.Value(other.data);
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public createEntity_args deepCopy() {
      return new createEntity_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      this.type = null;
    }

    public dk.diku.poets.gen.thrift.value.Value getData() {
      return this.data;
    }

    public createEntity_args setData(dk.diku.poets.gen.thrift.value.Value data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public createEntity_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((dk.diku.poets.gen.thrift.value.Value)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEntity_args)
        return this.equals((createEntity_args)that);
      return false;
    }

    public boolean equals(createEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createEntity_args typedOther = (createEntity_args)other;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEntity_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEntity_argsStandardSchemeFactory implements SchemeFactory {
      public createEntity_argsStandardScheme getScheme() {
        return new createEntity_argsStandardScheme();
      }
    }

    private static class createEntity_argsStandardScheme extends StandardScheme<createEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new dk.diku.poets.gen.thrift.value.Value();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEntity_argsTupleSchemeFactory implements SchemeFactory {
      public createEntity_argsTupleScheme getScheme() {
        return new createEntity_argsTupleScheme();
      }
    }

    private static class createEntity_argsTupleScheme extends TupleScheme<createEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.data = new dk.diku.poets.gen.thrift.value.Value();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class createEntity_result implements org.apache.thrift.TBase<createEntity_result, createEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEntity_resultTupleSchemeFactory());
    }

    public int success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      TYPE_ERR((short)3, "typeErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // TYPE_ERR
            return TYPE_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "EntityId")));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEntity_result.class, metaDataMap);
    }

    public createEntity_result() {
    }

    public createEntity_result(
      int success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
      this.msg = msg;
      this.typeErr = typeErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEntity_result(createEntity_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
    }

    public createEntity_result deepCopy() {
      return new createEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.arg = null;
      this.msg = null;
      this.typeErr = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public createEntity_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public createEntity_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public createEntity_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public createEntity_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case TYPE_ERR:
        return getTypeErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case TYPE_ERR:
        return isSetTypeErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEntity_result)
        return this.equals((createEntity_result)that);
      return false;
    }

    public boolean equals(createEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createEntity_result typedOther = (createEntity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEntity_resultStandardSchemeFactory implements SchemeFactory {
      public createEntity_resultStandardScheme getScheme() {
        return new createEntity_resultStandardScheme();
      }
    }

    private static class createEntity_resultStandardScheme extends StandardScheme<createEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEntity_resultTupleSchemeFactory implements SchemeFactory {
      public createEntity_resultTupleScheme getScheme() {
        return new createEntity_resultTupleScheme();
      }
    }

    private static class createEntity_resultTupleScheme extends TupleScheme<createEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
      }
    }

  }

  public static class updateEntity_args implements org.apache.thrift.TBase<updateEntity_args, updateEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEntity_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEntity_argsTupleSchemeFactory());
    }

    public int entityId; // required
    public dk.diku.poets.gen.thrift.value.Value data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entityId"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITYID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "EntityId")));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEntity_args.class, metaDataMap);
    }

    public updateEntity_args() {
    }

    public updateEntity_args(
      int entityId,
      dk.diku.poets.gen.thrift.value.Value data)
    {
      this();
      this.entityId = entityId;
      setEntityIdIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEntity_args(updateEntity_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.entityId = other.entityId;
      if (other.isSetData()) {
        this.data = new dk.diku.poets.gen.thrift.value.Value(other.data);
      }
    }

    public updateEntity_args deepCopy() {
      return new updateEntity_args(this);
    }

    @Override
    public void clear() {
      setEntityIdIsSet(false);
      this.entityId = 0;
      this.data = null;
    }

    public int getEntityId() {
      return this.entityId;
    }

    public updateEntity_args setEntityId(int entityId) {
      this.entityId = entityId;
      setEntityIdIsSet(true);
      return this;
    }

    public void unsetEntityId() {
      __isset_bit_vector.clear(__ENTITYID_ISSET_ID);
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return __isset_bit_vector.get(__ENTITYID_ISSET_ID);
    }

    public void setEntityIdIsSet(boolean value) {
      __isset_bit_vector.set(__ENTITYID_ISSET_ID, value);
    }

    public dk.diku.poets.gen.thrift.value.Value getData() {
      return this.data;
    }

    public updateEntity_args setData(dk.diku.poets.gen.thrift.value.Value data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((dk.diku.poets.gen.thrift.value.Value)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return Integer.valueOf(getEntityId());

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntityId();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEntity_args)
        return this.equals((updateEntity_args)that);
      return false;
    }

    public boolean equals(updateEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_entityId = true;
      boolean that_present_entityId = true;
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (this.entityId != that.entityId)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateEntity_args typedOther = (updateEntity_args)other;

      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(typedOther.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, typedOther.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEntity_args(");
      boolean first = true;

      sb.append("entityId:");
      sb.append(this.entityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEntity_argsStandardSchemeFactory implements SchemeFactory {
      public updateEntity_argsStandardScheme getScheme() {
        return new updateEntity_argsStandardScheme();
      }
    }

    private static class updateEntity_argsStandardScheme extends StandardScheme<updateEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityId = iprot.readI32();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new dk.diku.poets.gen.thrift.value.Value();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.entityId);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEntity_argsTupleSchemeFactory implements SchemeFactory {
      public updateEntity_argsTupleScheme getScheme() {
        return new updateEntity_argsTupleScheme();
      }
    }

    private static class updateEntity_argsTupleScheme extends TupleScheme<updateEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityId()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntityId()) {
          oprot.writeI32(struct.entityId);
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.entityId = iprot.readI32();
          struct.setEntityIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = new dk.diku.poets.gen.thrift.value.Value();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class updateEntity_result implements org.apache.thrift.TBase<updateEntity_result, updateEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEntity_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("typeErr", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdDeleted", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEntity_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.value.DecodeException msg; // required
    public dk.diku.poets.gen.thrift.value.TypeException typeErr; // required
    public dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound; // required
    public dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      MSG((short)2, "msg"),
      TYPE_ERR((short)3, "typeErr"),
      ENTITY_ID_NOT_FOUND((short)4, "entityIdNotFound"),
      ENTITY_ID_DELETED((short)5, "entityIdDeleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // MSG
            return MSG;
          case 3: // TYPE_ERR
            return TYPE_ERR;
          case 4: // ENTITY_ID_NOT_FOUND
            return ENTITY_ID_NOT_FOUND;
          case 5: // ENTITY_ID_DELETED
            return ENTITY_ID_DELETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE_ERR, new org.apache.thrift.meta_data.FieldMetaData("typeErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("entityIdNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_DELETED, new org.apache.thrift.meta_data.FieldMetaData("entityIdDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEntity_result.class, metaDataMap);
    }

    public updateEntity_result() {
    }

    public updateEntity_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.value.DecodeException msg,
      dk.diku.poets.gen.thrift.value.TypeException typeErr,
      dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound,
      dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted)
    {
      this();
      this.arg = arg;
      this.msg = msg;
      this.typeErr = typeErr;
      this.entityIdNotFound = entityIdNotFound;
      this.entityIdDeleted = entityIdDeleted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEntity_result(updateEntity_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetMsg()) {
        this.msg = new dk.diku.poets.gen.thrift.value.DecodeException(other.msg);
      }
      if (other.isSetTypeErr()) {
        this.typeErr = new dk.diku.poets.gen.thrift.value.TypeException(other.typeErr);
      }
      if (other.isSetEntityIdNotFound()) {
        this.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound(other.entityIdNotFound);
      }
      if (other.isSetEntityIdDeleted()) {
        this.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted(other.entityIdDeleted);
      }
    }

    public updateEntity_result deepCopy() {
      return new updateEntity_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.msg = null;
      this.typeErr = null;
      this.entityIdNotFound = null;
      this.entityIdDeleted = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public updateEntity_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getMsg() {
      return this.msg;
    }

    public updateEntity_result setMsg(dk.diku.poets.gen.thrift.value.DecodeException msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getTypeErr() {
      return this.typeErr;
    }

    public updateEntity_result setTypeErr(dk.diku.poets.gen.thrift.value.TypeException typeErr) {
      this.typeErr = typeErr;
      return this;
    }

    public void unsetTypeErr() {
      this.typeErr = null;
    }

    /** Returns true if field typeErr is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeErr() {
      return this.typeErr != null;
    }

    public void setTypeErrIsSet(boolean value) {
      if (!value) {
        this.typeErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityNotFound getEntityIdNotFound() {
      return this.entityIdNotFound;
    }

    public updateEntity_result setEntityIdNotFound(dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
      this.entityIdNotFound = entityIdNotFound;
      return this;
    }

    public void unsetEntityIdNotFound() {
      this.entityIdNotFound = null;
    }

    /** Returns true if field entityIdNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdNotFound() {
      return this.entityIdNotFound != null;
    }

    public void setEntityIdNotFoundIsSet(boolean value) {
      if (!value) {
        this.entityIdNotFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityDeleted getEntityIdDeleted() {
      return this.entityIdDeleted;
    }

    public updateEntity_result setEntityIdDeleted(dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
      this.entityIdDeleted = entityIdDeleted;
      return this;
    }

    public void unsetEntityIdDeleted() {
      this.entityIdDeleted = null;
    }

    /** Returns true if field entityIdDeleted is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdDeleted() {
      return this.entityIdDeleted != null;
    }

    public void setEntityIdDeletedIsSet(boolean value) {
      if (!value) {
        this.entityIdDeleted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case TYPE_ERR:
        if (value == null) {
          unsetTypeErr();
        } else {
          setTypeErr((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      case ENTITY_ID_NOT_FOUND:
        if (value == null) {
          unsetEntityIdNotFound();
        } else {
          setEntityIdNotFound((dk.diku.poets.gen.thrift.entities.EntityNotFound)value);
        }
        break;

      case ENTITY_ID_DELETED:
        if (value == null) {
          unsetEntityIdDeleted();
        } else {
          setEntityIdDeleted((dk.diku.poets.gen.thrift.entities.EntityDeleted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case MSG:
        return getMsg();

      case TYPE_ERR:
        return getTypeErr();

      case ENTITY_ID_NOT_FOUND:
        return getEntityIdNotFound();

      case ENTITY_ID_DELETED:
        return getEntityIdDeleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case MSG:
        return isSetMsg();
      case TYPE_ERR:
        return isSetTypeErr();
      case ENTITY_ID_NOT_FOUND:
        return isSetEntityIdNotFound();
      case ENTITY_ID_DELETED:
        return isSetEntityIdDeleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEntity_result)
        return this.equals((updateEntity_result)that);
      return false;
    }

    public boolean equals(updateEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_typeErr = true && this.isSetTypeErr();
      boolean that_present_typeErr = true && that.isSetTypeErr();
      if (this_present_typeErr || that_present_typeErr) {
        if (!(this_present_typeErr && that_present_typeErr))
          return false;
        if (!this.typeErr.equals(that.typeErr))
          return false;
      }

      boolean this_present_entityIdNotFound = true && this.isSetEntityIdNotFound();
      boolean that_present_entityIdNotFound = true && that.isSetEntityIdNotFound();
      if (this_present_entityIdNotFound || that_present_entityIdNotFound) {
        if (!(this_present_entityIdNotFound && that_present_entityIdNotFound))
          return false;
        if (!this.entityIdNotFound.equals(that.entityIdNotFound))
          return false;
      }

      boolean this_present_entityIdDeleted = true && this.isSetEntityIdDeleted();
      boolean that_present_entityIdDeleted = true && that.isSetEntityIdDeleted();
      if (this_present_entityIdDeleted || that_present_entityIdDeleted) {
        if (!(this_present_entityIdDeleted && that_present_entityIdDeleted))
          return false;
        if (!this.entityIdDeleted.equals(that.entityIdDeleted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateEntity_result typedOther = (updateEntity_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeErr()).compareTo(typedOther.isSetTypeErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeErr, typedOther.typeErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdNotFound()).compareTo(typedOther.isSetEntityIdNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdNotFound, typedOther.entityIdNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdDeleted()).compareTo(typedOther.isSetEntityIdDeleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdDeleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdDeleted, typedOther.entityIdDeleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEntity_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeErr:");
      if (this.typeErr == null) {
        sb.append("null");
      } else {
        sb.append(this.typeErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdNotFound:");
      if (this.entityIdNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdDeleted:");
      if (this.entityIdDeleted == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdDeleted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEntity_resultStandardSchemeFactory implements SchemeFactory {
      public updateEntity_resultStandardScheme getScheme() {
        return new updateEntity_resultStandardScheme();
      }
    }

    private static class updateEntity_resultStandardScheme extends StandardScheme<updateEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.typeErr.read(iprot);
                struct.setTypeErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENTITY_ID_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
                struct.entityIdNotFound.read(iprot);
                struct.setEntityIdNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENTITY_ID_DELETED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
                struct.entityIdDeleted.read(iprot);
                struct.setEntityIdDeletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.typeErr != null) {
          oprot.writeFieldBegin(TYPE_ERR_FIELD_DESC);
          struct.typeErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdNotFound != null) {
          oprot.writeFieldBegin(ENTITY_ID_NOT_FOUND_FIELD_DESC);
          struct.entityIdNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdDeleted != null) {
          oprot.writeFieldBegin(ENTITY_ID_DELETED_FIELD_DESC);
          struct.entityIdDeleted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEntity_resultTupleSchemeFactory implements SchemeFactory {
      public updateEntity_resultTupleScheme getScheme() {
        return new updateEntity_resultTupleScheme();
      }
    }

    private static class updateEntity_resultTupleScheme extends TupleScheme<updateEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        if (struct.isSetTypeErr()) {
          optionals.set(2);
        }
        if (struct.isSetEntityIdNotFound()) {
          optionals.set(3);
        }
        if (struct.isSetEntityIdDeleted()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetTypeErr()) {
          struct.typeErr.write(oprot);
        }
        if (struct.isSetEntityIdNotFound()) {
          struct.entityIdNotFound.write(oprot);
        }
        if (struct.isSetEntityIdDeleted()) {
          struct.entityIdDeleted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeErr = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.typeErr.read(iprot);
          struct.setTypeErrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
          struct.entityIdNotFound.read(iprot);
          struct.setEntityIdNotFoundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
          struct.entityIdDeleted.read(iprot);
          struct.setEntityIdDeletedIsSet(true);
        }
      }
    }

  }

  public static class deleteEntity_args implements org.apache.thrift.TBase<deleteEntity_args, deleteEntity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEntity_args");

    private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEntity_argsTupleSchemeFactory());
    }

    public int entityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTITY_ID((short)1, "entityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTITY_ID
            return ENTITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTITYID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "EntityId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEntity_args.class, metaDataMap);
    }

    public deleteEntity_args() {
    }

    public deleteEntity_args(
      int entityId)
    {
      this();
      this.entityId = entityId;
      setEntityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEntity_args(deleteEntity_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.entityId = other.entityId;
    }

    public deleteEntity_args deepCopy() {
      return new deleteEntity_args(this);
    }

    @Override
    public void clear() {
      setEntityIdIsSet(false);
      this.entityId = 0;
    }

    public int getEntityId() {
      return this.entityId;
    }

    public deleteEntity_args setEntityId(int entityId) {
      this.entityId = entityId;
      setEntityIdIsSet(true);
      return this;
    }

    public void unsetEntityId() {
      __isset_bit_vector.clear(__ENTITYID_ISSET_ID);
    }

    /** Returns true if field entityId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityId() {
      return __isset_bit_vector.get(__ENTITYID_ISSET_ID);
    }

    public void setEntityIdIsSet(boolean value) {
      __isset_bit_vector.set(__ENTITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTITY_ID:
        if (value == null) {
          unsetEntityId();
        } else {
          setEntityId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTITY_ID:
        return Integer.valueOf(getEntityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTITY_ID:
        return isSetEntityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEntity_args)
        return this.equals((deleteEntity_args)that);
      return false;
    }

    public boolean equals(deleteEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_entityId = true;
      boolean that_present_entityId = true;
      if (this_present_entityId || that_present_entityId) {
        if (!(this_present_entityId && that_present_entityId))
          return false;
        if (this.entityId != that.entityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteEntity_args typedOther = (deleteEntity_args)other;

      lastComparison = Boolean.valueOf(isSetEntityId()).compareTo(typedOther.isSetEntityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityId, typedOther.entityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEntity_args(");
      boolean first = true;

      sb.append("entityId:");
      sb.append(this.entityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEntity_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEntity_argsStandardScheme getScheme() {
        return new deleteEntity_argsStandardScheme();
      }
    }

    private static class deleteEntity_argsStandardScheme extends StandardScheme<deleteEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entityId = iprot.readI32();
                struct.setEntityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.entityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEntity_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEntity_argsTupleScheme getScheme() {
        return new deleteEntity_argsTupleScheme();
      }
    }

    private static class deleteEntity_argsTupleScheme extends TupleScheme<deleteEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntityId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntityId()) {
          oprot.writeI32(struct.entityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entityId = iprot.readI32();
          struct.setEntityIdIsSet(true);
        }
      }
    }

  }

  public static class deleteEntity_result implements org.apache.thrift.TBase<deleteEntity_result, deleteEntity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEntity_result");

    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ENTITY_ID_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("entityIdDeleted", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEntity_resultTupleSchemeFactory());
    }

    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound; // required
    public dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG((short)1, "arg"),
      ENTITY_ID_NOT_FOUND((short)2, "entityIdNotFound"),
      ENTITY_ID_DELETED((short)3, "entityIdDeleted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG
            return ARG;
          case 2: // ENTITY_ID_NOT_FOUND
            return ENTITY_ID_NOT_FOUND;
          case 3: // ENTITY_ID_DELETED
            return ENTITY_ID_DELETED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("entityIdNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ENTITY_ID_DELETED, new org.apache.thrift.meta_data.FieldMetaData("entityIdDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEntity_result.class, metaDataMap);
    }

    public deleteEntity_result() {
    }

    public deleteEntity_result(
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound,
      dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted)
    {
      this();
      this.arg = arg;
      this.entityIdNotFound = entityIdNotFound;
      this.entityIdDeleted = entityIdDeleted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEntity_result(deleteEntity_result other) {
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetEntityIdNotFound()) {
        this.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound(other.entityIdNotFound);
      }
      if (other.isSetEntityIdDeleted()) {
        this.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted(other.entityIdDeleted);
      }
    }

    public deleteEntity_result deepCopy() {
      return new deleteEntity_result(this);
    }

    @Override
    public void clear() {
      this.arg = null;
      this.entityIdNotFound = null;
      this.entityIdDeleted = null;
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public deleteEntity_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityNotFound getEntityIdNotFound() {
      return this.entityIdNotFound;
    }

    public deleteEntity_result setEntityIdNotFound(dk.diku.poets.gen.thrift.entities.EntityNotFound entityIdNotFound) {
      this.entityIdNotFound = entityIdNotFound;
      return this;
    }

    public void unsetEntityIdNotFound() {
      this.entityIdNotFound = null;
    }

    /** Returns true if field entityIdNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdNotFound() {
      return this.entityIdNotFound != null;
    }

    public void setEntityIdNotFoundIsSet(boolean value) {
      if (!value) {
        this.entityIdNotFound = null;
      }
    }

    public dk.diku.poets.gen.thrift.entities.EntityDeleted getEntityIdDeleted() {
      return this.entityIdDeleted;
    }

    public deleteEntity_result setEntityIdDeleted(dk.diku.poets.gen.thrift.entities.EntityDeleted entityIdDeleted) {
      this.entityIdDeleted = entityIdDeleted;
      return this;
    }

    public void unsetEntityIdDeleted() {
      this.entityIdDeleted = null;
    }

    /** Returns true if field entityIdDeleted is set (has been assigned a value) and false otherwise */
    public boolean isSetEntityIdDeleted() {
      return this.entityIdDeleted != null;
    }

    public void setEntityIdDeletedIsSet(boolean value) {
      if (!value) {
        this.entityIdDeleted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case ENTITY_ID_NOT_FOUND:
        if (value == null) {
          unsetEntityIdNotFound();
        } else {
          setEntityIdNotFound((dk.diku.poets.gen.thrift.entities.EntityNotFound)value);
        }
        break;

      case ENTITY_ID_DELETED:
        if (value == null) {
          unsetEntityIdDeleted();
        } else {
          setEntityIdDeleted((dk.diku.poets.gen.thrift.entities.EntityDeleted)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG:
        return getArg();

      case ENTITY_ID_NOT_FOUND:
        return getEntityIdNotFound();

      case ENTITY_ID_DELETED:
        return getEntityIdDeleted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG:
        return isSetArg();
      case ENTITY_ID_NOT_FOUND:
        return isSetEntityIdNotFound();
      case ENTITY_ID_DELETED:
        return isSetEntityIdDeleted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEntity_result)
        return this.equals((deleteEntity_result)that);
      return false;
    }

    public boolean equals(deleteEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_entityIdNotFound = true && this.isSetEntityIdNotFound();
      boolean that_present_entityIdNotFound = true && that.isSetEntityIdNotFound();
      if (this_present_entityIdNotFound || that_present_entityIdNotFound) {
        if (!(this_present_entityIdNotFound && that_present_entityIdNotFound))
          return false;
        if (!this.entityIdNotFound.equals(that.entityIdNotFound))
          return false;
      }

      boolean this_present_entityIdDeleted = true && this.isSetEntityIdDeleted();
      boolean that_present_entityIdDeleted = true && that.isSetEntityIdDeleted();
      if (this_present_entityIdDeleted || that_present_entityIdDeleted) {
        if (!(this_present_entityIdDeleted && that_present_entityIdDeleted))
          return false;
        if (!this.entityIdDeleted.equals(that.entityIdDeleted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteEntity_result typedOther = (deleteEntity_result)other;

      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdNotFound()).compareTo(typedOther.isSetEntityIdNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdNotFound, typedOther.entityIdNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntityIdDeleted()).compareTo(typedOther.isSetEntityIdDeleted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntityIdDeleted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityIdDeleted, typedOther.entityIdDeleted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEntity_result(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdNotFound:");
      if (this.entityIdNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entityIdDeleted:");
      if (this.entityIdDeleted == null) {
        sb.append("null");
      } else {
        sb.append(this.entityIdDeleted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEntity_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEntity_resultStandardScheme getScheme() {
        return new deleteEntity_resultStandardScheme();
      }
    }

    private static class deleteEntity_resultStandardScheme extends StandardScheme<deleteEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTITY_ID_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
                struct.entityIdNotFound.read(iprot);
                struct.setEntityIdNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTITY_ID_DELETED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
                struct.entityIdDeleted.read(iprot);
                struct.setEntityIdDeletedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdNotFound != null) {
          oprot.writeFieldBegin(ENTITY_ID_NOT_FOUND_FIELD_DESC);
          struct.entityIdNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.entityIdDeleted != null) {
          oprot.writeFieldBegin(ENTITY_ID_DELETED_FIELD_DESC);
          struct.entityIdDeleted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEntity_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEntity_resultTupleScheme getScheme() {
        return new deleteEntity_resultTupleScheme();
      }
    }

    private static class deleteEntity_resultTupleScheme extends TupleScheme<deleteEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg()) {
          optionals.set(0);
        }
        if (struct.isSetEntityIdNotFound()) {
          optionals.set(1);
        }
        if (struct.isSetEntityIdDeleted()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetEntityIdNotFound()) {
          struct.entityIdNotFound.write(oprot);
        }
        if (struct.isSetEntityIdDeleted()) {
          struct.entityIdDeleted.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entityIdNotFound = new dk.diku.poets.gen.thrift.entities.EntityNotFound();
          struct.entityIdNotFound.read(iprot);
          struct.setEntityIdNotFoundIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entityIdDeleted = new dk.diku.poets.gen.thrift.entities.EntityDeleted();
          struct.entityIdDeleted.read(iprot);
          struct.setEntityIdDeletedIsSet(true);
        }
      }
    }

  }

  public static class getReport_args implements org.apache.thrift.TBase<getReport_args, getReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReport_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReport_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ReportName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReport_args.class, metaDataMap);
    }

    public getReport_args() {
    }

    public getReport_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReport_args(getReport_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getReport_args deepCopy() {
      return new getReport_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public getReport_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReport_args)
        return this.equals((getReport_args)that);
      return false;
    }

    public boolean equals(getReport_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReport_args typedOther = (getReport_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReport_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReport_argsStandardSchemeFactory implements SchemeFactory {
      public getReport_argsStandardScheme getScheme() {
        return new getReport_argsStandardScheme();
      }
    }

    private static class getReport_argsStandardScheme extends StandardScheme<getReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReport_argsTupleSchemeFactory implements SchemeFactory {
      public getReport_argsTupleScheme getScheme() {
        return new getReport_argsTupleScheme();
      }
    }

    private static class getReport_argsTupleScheme extends TupleScheme<getReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class getReport_result implements org.apache.thrift.TBase<getReport_result, getReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReport_resultTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.reporting.Report success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      NOT_FOUND((short)2, "notFound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // NOT_FOUND
            return NOT_FOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.reporting.Report.class)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReport_result.class, metaDataMap);
    }

    public getReport_result() {
    }

    public getReport_result(
      dk.diku.poets.gen.thrift.reporting.Report success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.notFound = notFound;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReport_result(getReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new dk.diku.poets.gen.thrift.reporting.Report(other.success);
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException(other.notFound);
      }
    }

    public getReport_result deepCopy() {
      return new getReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.notFound = null;
    }

    public dk.diku.poets.gen.thrift.reporting.Report getSuccess() {
      return this.success;
    }

    public getReport_result setSuccess(dk.diku.poets.gen.thrift.reporting.Report success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public getReport_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.reporting.ReportNotFoundException getNotFound() {
      return this.notFound;
    }

    public getReport_result setNotFound(dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((dk.diku.poets.gen.thrift.reporting.Report)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.reporting.ReportNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case NOT_FOUND:
        return getNotFound();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case NOT_FOUND:
        return isSetNotFound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReport_result)
        return this.equals((getReport_result)that);
      return false;
    }

    public boolean equals(getReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReport_result typedOther = (getReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReport_resultStandardSchemeFactory implements SchemeFactory {
      public getReport_resultStandardScheme getScheme() {
        return new getReport_resultStandardScheme();
      }
    }

    private static class getReport_resultStandardScheme extends StandardScheme<getReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new dk.diku.poets.gen.thrift.reporting.Report();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReport_resultTupleSchemeFactory implements SchemeFactory {
      public getReport_resultTupleScheme getScheme() {
        return new getReport_resultTupleScheme();
      }
    }

    private static class getReport_resultTupleScheme extends TupleScheme<getReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetNotFound()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new dk.diku.poets.gen.thrift.reporting.Report();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
      }
    }

  }

  public static class addReport_args implements org.apache.thrift.TBase<addReport_args, addReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReport_args");

    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addReport_argsTupleSchemeFactory());
    }

    public String spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPEC((short)1, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ReportSpecification")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReport_args.class, metaDataMap);
    }

    public addReport_args() {
    }

    public addReport_args(
      String spec)
    {
      this();
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addReport_args(addReport_args other) {
      if (other.isSetSpec()) {
        this.spec = other.spec;
      }
    }

    public addReport_args deepCopy() {
      return new addReport_args(this);
    }

    @Override
    public void clear() {
      this.spec = null;
    }

    public String getSpec() {
      return this.spec;
    }

    public addReport_args setSpec(String spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addReport_args)
        return this.equals((addReport_args)that);
      return false;
    }

    public boolean equals(addReport_args that) {
      if (that == null)
        return false;

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addReport_args typedOther = (addReport_args)other;

      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(typedOther.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, typedOther.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addReport_args(");
      boolean first = true;

      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addReport_argsStandardSchemeFactory implements SchemeFactory {
      public addReport_argsStandardScheme getScheme() {
        return new addReport_argsStandardScheme();
      }
    }

    private static class addReport_argsStandardScheme extends StandardScheme<addReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spec = iprot.readString();
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          oprot.writeString(struct.spec);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReport_argsTupleSchemeFactory implements SchemeFactory {
      public addReport_argsTupleScheme getScheme() {
        return new addReport_argsTupleScheme();
      }
    }

    private static class addReport_argsTupleScheme extends TupleScheme<addReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpec()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpec()) {
          oprot.writeString(struct.spec);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.spec = iprot.readString();
          struct.setSpecIsSet(true);
        }
      }
    }

  }

  public static class addReport_result implements org.apache.thrift.TBase<addReport_result, addReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("init", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addReport_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.reporting.ReportInitException init; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      INIT((short)2, "init");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // INIT
            return INIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INIT, new org.apache.thrift.meta_data.FieldMetaData("init", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addReport_result.class, metaDataMap);
    }

    public addReport_result() {
    }

    public addReport_result(
      boolean success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.reporting.ReportInitException init)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
      this.init = init;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addReport_result(addReport_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetInit()) {
        this.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException(other.init);
      }
    }

    public addReport_result deepCopy() {
      return new addReport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.arg = null;
      this.init = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addReport_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public addReport_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.reporting.ReportInitException getInit() {
      return this.init;
    }

    public addReport_result setInit(dk.diku.poets.gen.thrift.reporting.ReportInitException init) {
      this.init = init;
      return this;
    }

    public void unsetInit() {
      this.init = null;
    }

    /** Returns true if field init is set (has been assigned a value) and false otherwise */
    public boolean isSetInit() {
      return this.init != null;
    }

    public void setInitIsSet(boolean value) {
      if (!value) {
        this.init = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case INIT:
        if (value == null) {
          unsetInit();
        } else {
          setInit((dk.diku.poets.gen.thrift.reporting.ReportInitException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ARG:
        return getArg();

      case INIT:
        return getInit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case INIT:
        return isSetInit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addReport_result)
        return this.equals((addReport_result)that);
      return false;
    }

    public boolean equals(addReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_init = true && this.isSetInit();
      boolean that_present_init = true && that.isSetInit();
      if (this_present_init || that_present_init) {
        if (!(this_present_init && that_present_init))
          return false;
        if (!this.init.equals(that.init))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addReport_result typedOther = (addReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInit()).compareTo(typedOther.isSetInit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init, typedOther.init);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addReport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("init:");
      if (this.init == null) {
        sb.append("null");
      } else {
        sb.append(this.init);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addReport_resultStandardSchemeFactory implements SchemeFactory {
      public addReport_resultStandardScheme getScheme() {
        return new addReport_resultStandardScheme();
      }
    }

    private static class addReport_resultStandardScheme extends StandardScheme<addReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException();
                struct.init.read(iprot);
                struct.setInitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.init != null) {
          oprot.writeFieldBegin(INIT_FIELD_DESC);
          struct.init.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addReport_resultTupleSchemeFactory implements SchemeFactory {
      public addReport_resultTupleScheme getScheme() {
        return new addReport_resultTupleScheme();
      }
    }

    private static class addReport_resultTupleScheme extends TupleScheme<addReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetInit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetInit()) {
          struct.init.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException();
          struct.init.read(iprot);
          struct.setInitIsSet(true);
        }
      }
    }

  }

  public static class modifyReport_args implements org.apache.thrift.TBase<modifyReport_args, modifyReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyReport_args");

    private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyReport_argsTupleSchemeFactory());
    }

    public String spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPEC((short)1, "spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPEC
            return SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ReportSpecification")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyReport_args.class, metaDataMap);
    }

    public modifyReport_args() {
    }

    public modifyReport_args(
      String spec)
    {
      this();
      this.spec = spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyReport_args(modifyReport_args other) {
      if (other.isSetSpec()) {
        this.spec = other.spec;
      }
    }

    public modifyReport_args deepCopy() {
      return new modifyReport_args(this);
    }

    @Override
    public void clear() {
      this.spec = null;
    }

    public String getSpec() {
      return this.spec;
    }

    public modifyReport_args setSpec(String spec) {
      this.spec = spec;
      return this;
    }

    public void unsetSpec() {
      this.spec = null;
    }

    /** Returns true if field spec is set (has been assigned a value) and false otherwise */
    public boolean isSetSpec() {
      return this.spec != null;
    }

    public void setSpecIsSet(boolean value) {
      if (!value) {
        this.spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPEC:
        if (value == null) {
          unsetSpec();
        } else {
          setSpec((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPEC:
        return getSpec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPEC:
        return isSetSpec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyReport_args)
        return this.equals((modifyReport_args)that);
      return false;
    }

    public boolean equals(modifyReport_args that) {
      if (that == null)
        return false;

      boolean this_present_spec = true && this.isSetSpec();
      boolean that_present_spec = true && that.isSetSpec();
      if (this_present_spec || that_present_spec) {
        if (!(this_present_spec && that_present_spec))
          return false;
        if (!this.spec.equals(that.spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyReport_args typedOther = (modifyReport_args)other;

      lastComparison = Boolean.valueOf(isSetSpec()).compareTo(typedOther.isSetSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, typedOther.spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyReport_args(");
      boolean first = true;

      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyReport_argsStandardSchemeFactory implements SchemeFactory {
      public modifyReport_argsStandardScheme getScheme() {
        return new modifyReport_argsStandardScheme();
      }
    }

    private static class modifyReport_argsStandardScheme extends StandardScheme<modifyReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spec = iprot.readString();
                struct.setSpecIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spec != null) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          oprot.writeString(struct.spec);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyReport_argsTupleSchemeFactory implements SchemeFactory {
      public modifyReport_argsTupleScheme getScheme() {
        return new modifyReport_argsTupleScheme();
      }
    }

    private static class modifyReport_argsTupleScheme extends TupleScheme<modifyReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpec()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpec()) {
          oprot.writeString(struct.spec);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.spec = iprot.readString();
          struct.setSpecIsSet(true);
        }
      }
    }

  }

  public static class modifyReport_result implements org.apache.thrift.TBase<modifyReport_result, modifyReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("init", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyReport_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.reporting.ReportInitException init; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      INIT((short)2, "init");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // INIT
            return INIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INIT, new org.apache.thrift.meta_data.FieldMetaData("init", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyReport_result.class, metaDataMap);
    }

    public modifyReport_result() {
    }

    public modifyReport_result(
      boolean success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.reporting.ReportInitException init)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
      this.init = init;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyReport_result(modifyReport_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetInit()) {
        this.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException(other.init);
      }
    }

    public modifyReport_result deepCopy() {
      return new modifyReport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.arg = null;
      this.init = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public modifyReport_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public modifyReport_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.reporting.ReportInitException getInit() {
      return this.init;
    }

    public modifyReport_result setInit(dk.diku.poets.gen.thrift.reporting.ReportInitException init) {
      this.init = init;
      return this;
    }

    public void unsetInit() {
      this.init = null;
    }

    /** Returns true if field init is set (has been assigned a value) and false otherwise */
    public boolean isSetInit() {
      return this.init != null;
    }

    public void setInitIsSet(boolean value) {
      if (!value) {
        this.init = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case INIT:
        if (value == null) {
          unsetInit();
        } else {
          setInit((dk.diku.poets.gen.thrift.reporting.ReportInitException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ARG:
        return getArg();

      case INIT:
        return getInit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case INIT:
        return isSetInit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyReport_result)
        return this.equals((modifyReport_result)that);
      return false;
    }

    public boolean equals(modifyReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_init = true && this.isSetInit();
      boolean that_present_init = true && that.isSetInit();
      if (this_present_init || that_present_init) {
        if (!(this_present_init && that_present_init))
          return false;
        if (!this.init.equals(that.init))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyReport_result typedOther = (modifyReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInit()).compareTo(typedOther.isSetInit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init, typedOther.init);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyReport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("init:");
      if (this.init == null) {
        sb.append("null");
      } else {
        sb.append(this.init);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyReport_resultStandardSchemeFactory implements SchemeFactory {
      public modifyReport_resultStandardScheme getScheme() {
        return new modifyReport_resultStandardScheme();
      }
    }

    private static class modifyReport_resultStandardScheme extends StandardScheme<modifyReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException();
                struct.init.read(iprot);
                struct.setInitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.init != null) {
          oprot.writeFieldBegin(INIT_FIELD_DESC);
          struct.init.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyReport_resultTupleSchemeFactory implements SchemeFactory {
      public modifyReport_resultTupleScheme getScheme() {
        return new modifyReport_resultTupleScheme();
      }
    }

    private static class modifyReport_resultTupleScheme extends TupleScheme<modifyReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetInit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetInit()) {
          struct.init.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.init = new dk.diku.poets.gen.thrift.reporting.ReportInitException();
          struct.init.read(iprot);
          struct.setInitIsSet(true);
        }
      }
    }

  }

  public static class removeReport_args implements org.apache.thrift.TBase<removeReport_args, removeReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeReport_args");

    private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeReport_argsTupleSchemeFactory());
    }

    public String report; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT((short)1, "report");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT
            return REPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ReportName")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeReport_args.class, metaDataMap);
    }

    public removeReport_args() {
    }

    public removeReport_args(
      String report)
    {
      this();
      this.report = report;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeReport_args(removeReport_args other) {
      if (other.isSetReport()) {
        this.report = other.report;
      }
    }

    public removeReport_args deepCopy() {
      return new removeReport_args(this);
    }

    @Override
    public void clear() {
      this.report = null;
    }

    public String getReport() {
      return this.report;
    }

    public removeReport_args setReport(String report) {
      this.report = report;
      return this;
    }

    public void unsetReport() {
      this.report = null;
    }

    /** Returns true if field report is set (has been assigned a value) and false otherwise */
    public boolean isSetReport() {
      return this.report != null;
    }

    public void setReportIsSet(boolean value) {
      if (!value) {
        this.report = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT:
        if (value == null) {
          unsetReport();
        } else {
          setReport((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT:
        return getReport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT:
        return isSetReport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeReport_args)
        return this.equals((removeReport_args)that);
      return false;
    }

    public boolean equals(removeReport_args that) {
      if (that == null)
        return false;

      boolean this_present_report = true && this.isSetReport();
      boolean that_present_report = true && that.isSetReport();
      if (this_present_report || that_present_report) {
        if (!(this_present_report && that_present_report))
          return false;
        if (!this.report.equals(that.report))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeReport_args typedOther = (removeReport_args)other;

      lastComparison = Boolean.valueOf(isSetReport()).compareTo(typedOther.isSetReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, typedOther.report);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeReport_args(");
      boolean first = true;

      sb.append("report:");
      if (this.report == null) {
        sb.append("null");
      } else {
        sb.append(this.report);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeReport_argsStandardSchemeFactory implements SchemeFactory {
      public removeReport_argsStandardScheme getScheme() {
        return new removeReport_argsStandardScheme();
      }
    }

    private static class removeReport_argsStandardScheme extends StandardScheme<removeReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.report = iprot.readString();
                struct.setReportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.report != null) {
          oprot.writeFieldBegin(REPORT_FIELD_DESC);
          oprot.writeString(struct.report);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeReport_argsTupleSchemeFactory implements SchemeFactory {
      public removeReport_argsTupleScheme getScheme() {
        return new removeReport_argsTupleScheme();
      }
    }

    private static class removeReport_argsTupleScheme extends TupleScheme<removeReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReport()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReport()) {
          oprot.writeString(struct.report);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.report = iprot.readString();
          struct.setReportIsSet(true);
        }
      }
    }

  }

  public static class removeReport_result implements org.apache.thrift.TBase<removeReport_result, removeReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeReport_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public EmptyArgument arg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeReport_result.class, metaDataMap);
    }

    public removeReport_result() {
    }

    public removeReport_result(
      boolean success,
      EmptyArgument arg)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.arg = arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeReport_result(removeReport_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
    }

    public removeReport_result deepCopy() {
      return new removeReport_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.arg = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeReport_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public removeReport_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ARG:
        return getArg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeReport_result)
        return this.equals((removeReport_result)that);
      return false;
    }

    public boolean equals(removeReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeReport_result typedOther = (removeReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeReport_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeReport_resultStandardSchemeFactory implements SchemeFactory {
      public removeReport_resultStandardScheme getScheme() {
        return new removeReport_resultStandardScheme();
      }
    }

    private static class removeReport_resultStandardScheme extends StandardScheme<removeReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeReport_resultTupleSchemeFactory implements SchemeFactory {
      public removeReport_resultTupleScheme getScheme() {
        return new removeReport_resultTupleScheme();
      }
    }

    private static class removeReport_resultTupleScheme extends TupleScheme<removeReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
      }
    }

  }

  public static class queryReport_args implements org.apache.thrift.TBase<queryReport_args, queryReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryReport_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryReport_argsTupleSchemeFactory());
    }

    public String name; // required
    public List<dk.diku.poets.gen.thrift.value.Value> events; // required
    public List<dk.diku.poets.gen.thrift.value.Value> arguments; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      EVENTS((short)2, "events"),
      ARGUMENTS((short)3, "arguments");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // EVENTS
            return EVENTS;
          case 3: // ARGUMENTS
            return ARGUMENTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ReportName")));
      tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class))));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryReport_args.class, metaDataMap);
    }

    public queryReport_args() {
    }

    public queryReport_args(
      String name,
      List<dk.diku.poets.gen.thrift.value.Value> events,
      List<dk.diku.poets.gen.thrift.value.Value> arguments)
    {
      this();
      this.name = name;
      this.events = events;
      this.arguments = arguments;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryReport_args(queryReport_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetEvents()) {
        List<dk.diku.poets.gen.thrift.value.Value> __this__events = new ArrayList<dk.diku.poets.gen.thrift.value.Value>();
        for (dk.diku.poets.gen.thrift.value.Value other_element : other.events) {
          __this__events.add(new dk.diku.poets.gen.thrift.value.Value(other_element));
        }
        this.events = __this__events;
      }
      if (other.isSetArguments()) {
        List<dk.diku.poets.gen.thrift.value.Value> __this__arguments = new ArrayList<dk.diku.poets.gen.thrift.value.Value>();
        for (dk.diku.poets.gen.thrift.value.Value other_element : other.arguments) {
          __this__arguments.add(new dk.diku.poets.gen.thrift.value.Value(other_element));
        }
        this.arguments = __this__arguments;
      }
    }

    public queryReport_args deepCopy() {
      return new queryReport_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.events = null;
      this.arguments = null;
    }

    public String getName() {
      return this.name;
    }

    public queryReport_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getEventsSize() {
      return (this.events == null) ? 0 : this.events.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.value.Value> getEventsIterator() {
      return (this.events == null) ? null : this.events.iterator();
    }

    public void addToEvents(dk.diku.poets.gen.thrift.value.Value elem) {
      if (this.events == null) {
        this.events = new ArrayList<dk.diku.poets.gen.thrift.value.Value>();
      }
      this.events.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.value.Value> getEvents() {
      return this.events;
    }

    public queryReport_args setEvents(List<dk.diku.poets.gen.thrift.value.Value> events) {
      this.events = events;
      return this;
    }

    public void unsetEvents() {
      this.events = null;
    }

    /** Returns true if field events is set (has been assigned a value) and false otherwise */
    public boolean isSetEvents() {
      return this.events != null;
    }

    public void setEventsIsSet(boolean value) {
      if (!value) {
        this.events = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public java.util.Iterator<dk.diku.poets.gen.thrift.value.Value> getArgumentsIterator() {
      return (this.arguments == null) ? null : this.arguments.iterator();
    }

    public void addToArguments(dk.diku.poets.gen.thrift.value.Value elem) {
      if (this.arguments == null) {
        this.arguments = new ArrayList<dk.diku.poets.gen.thrift.value.Value>();
      }
      this.arguments.add(elem);
    }

    public List<dk.diku.poets.gen.thrift.value.Value> getArguments() {
      return this.arguments;
    }

    public queryReport_args setArguments(List<dk.diku.poets.gen.thrift.value.Value> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case EVENTS:
        if (value == null) {
          unsetEvents();
        } else {
          setEvents((List<dk.diku.poets.gen.thrift.value.Value>)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((List<dk.diku.poets.gen.thrift.value.Value>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case EVENTS:
        return getEvents();

      case ARGUMENTS:
        return getArguments();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case EVENTS:
        return isSetEvents();
      case ARGUMENTS:
        return isSetArguments();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryReport_args)
        return this.equals((queryReport_args)that);
      return false;
    }

    public boolean equals(queryReport_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_events = true && this.isSetEvents();
      boolean that_present_events = true && that.isSetEvents();
      if (this_present_events || that_present_events) {
        if (!(this_present_events && that_present_events))
          return false;
        if (!this.events.equals(that.events))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryReport_args typedOther = (queryReport_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEvents()).compareTo(typedOther.isSetEvents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvents()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, typedOther.events);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArguments()).compareTo(typedOther.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, typedOther.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryReport_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("events:");
      if (this.events == null) {
        sb.append("null");
      } else {
        sb.append(this.events);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryReport_argsStandardSchemeFactory implements SchemeFactory {
      public queryReport_argsStandardScheme getScheme() {
        return new queryReport_argsStandardScheme();
      }
    }

    private static class queryReport_argsStandardScheme extends StandardScheme<queryReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.events = new ArrayList<dk.diku.poets.gen.thrift.value.Value>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    dk.diku.poets.gen.thrift.value.Value _elem42; // required
                    _elem42 = new dk.diku.poets.gen.thrift.value.Value();
                    _elem42.read(iprot);
                    struct.events.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setEventsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                  struct.arguments = new ArrayList<dk.diku.poets.gen.thrift.value.Value>(_list43.size);
                  for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                  {
                    dk.diku.poets.gen.thrift.value.Value _elem45; // required
                    _elem45 = new dk.diku.poets.gen.thrift.value.Value();
                    _elem45.read(iprot);
                    struct.arguments.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.events != null) {
          oprot.writeFieldBegin(EVENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
            for (dk.diku.poets.gen.thrift.value.Value _iter46 : struct.events)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arguments.size()));
            for (dk.diku.poets.gen.thrift.value.Value _iter47 : struct.arguments)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryReport_argsTupleSchemeFactory implements SchemeFactory {
      public queryReport_argsTupleScheme getScheme() {
        return new queryReport_argsTupleScheme();
      }
    }

    private static class queryReport_argsTupleScheme extends TupleScheme<queryReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetEvents()) {
          optionals.set(1);
        }
        if (struct.isSetArguments()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetEvents()) {
          {
            oprot.writeI32(struct.events.size());
            for (dk.diku.poets.gen.thrift.value.Value _iter48 : struct.events)
            {
              _iter48.write(oprot);
            }
          }
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (dk.diku.poets.gen.thrift.value.Value _iter49 : struct.arguments)
            {
              _iter49.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.events = new ArrayList<dk.diku.poets.gen.thrift.value.Value>(_list50.size);
            for (int _i51 = 0; _i51 < _list50.size; ++_i51)
            {
              dk.diku.poets.gen.thrift.value.Value _elem52; // required
              _elem52 = new dk.diku.poets.gen.thrift.value.Value();
              _elem52.read(iprot);
              struct.events.add(_elem52);
            }
          }
          struct.setEventsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.arguments = new ArrayList<dk.diku.poets.gen.thrift.value.Value>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              dk.diku.poets.gen.thrift.value.Value _elem55; // required
              _elem55 = new dk.diku.poets.gen.thrift.value.Value();
              _elem55.read(iprot);
              struct.arguments.add(_elem55);
            }
          }
          struct.setArgumentsIsSet(true);
        }
      }
    }

  }

  public static class queryReport_result implements org.apache.thrift.TBase<queryReport_result, queryReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("arg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("notFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryReport_resultTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.value.Value success; // required
    public EmptyArgument arg; // required
    public dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound; // required
    public RunTimeException runtime; // required
    public dk.diku.poets.gen.thrift.value.TypeException type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ARG((short)1, "arg"),
      NOT_FOUND((short)2, "notFound"),
      RUNTIME((short)3, "runtime"),
      TYPE((short)4, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ARG
            return ARG;
          case 2: // NOT_FOUND
            return NOT_FOUND;
          case 3: // RUNTIME
            return RUNTIME;
          case 4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
      tmpMap.put(_Fields.ARG, new org.apache.thrift.meta_data.FieldMetaData("arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("notFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("runtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryReport_result.class, metaDataMap);
    }

    public queryReport_result() {
    }

    public queryReport_result(
      dk.diku.poets.gen.thrift.value.Value success,
      EmptyArgument arg,
      dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound,
      RunTimeException runtime,
      dk.diku.poets.gen.thrift.value.TypeException type)
    {
      this();
      this.success = success;
      this.arg = arg;
      this.notFound = notFound;
      this.runtime = runtime;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryReport_result(queryReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new dk.diku.poets.gen.thrift.value.Value(other.success);
      }
      if (other.isSetArg()) {
        this.arg = new EmptyArgument(other.arg);
      }
      if (other.isSetNotFound()) {
        this.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException(other.notFound);
      }
      if (other.isSetRuntime()) {
        this.runtime = new RunTimeException(other.runtime);
      }
      if (other.isSetType()) {
        this.type = new dk.diku.poets.gen.thrift.value.TypeException(other.type);
      }
    }

    public queryReport_result deepCopy() {
      return new queryReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.arg = null;
      this.notFound = null;
      this.runtime = null;
      this.type = null;
    }

    public dk.diku.poets.gen.thrift.value.Value getSuccess() {
      return this.success;
    }

    public queryReport_result setSuccess(dk.diku.poets.gen.thrift.value.Value success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getArg() {
      return this.arg;
    }

    public queryReport_result setArg(EmptyArgument arg) {
      this.arg = arg;
      return this;
    }

    public void unsetArg() {
      this.arg = null;
    }

    /** Returns true if field arg is set (has been assigned a value) and false otherwise */
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setArgIsSet(boolean value) {
      if (!value) {
        this.arg = null;
      }
    }

    public dk.diku.poets.gen.thrift.reporting.ReportNotFoundException getNotFound() {
      return this.notFound;
    }

    public queryReport_result setNotFound(dk.diku.poets.gen.thrift.reporting.ReportNotFoundException notFound) {
      this.notFound = notFound;
      return this;
    }

    public void unsetNotFound() {
      this.notFound = null;
    }

    /** Returns true if field notFound is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFound() {
      return this.notFound != null;
    }

    public void setNotFoundIsSet(boolean value) {
      if (!value) {
        this.notFound = null;
      }
    }

    public RunTimeException getRuntime() {
      return this.runtime;
    }

    public queryReport_result setRuntime(RunTimeException runtime) {
      this.runtime = runtime;
      return this;
    }

    public void unsetRuntime() {
      this.runtime = null;
    }

    /** Returns true if field runtime is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntime() {
      return this.runtime != null;
    }

    public void setRuntimeIsSet(boolean value) {
      if (!value) {
        this.runtime = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.TypeException getType() {
      return this.type;
    }

    public queryReport_result setType(dk.diku.poets.gen.thrift.value.TypeException type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((dk.diku.poets.gen.thrift.value.Value)value);
        }
        break;

      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((EmptyArgument)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNotFound();
        } else {
          setNotFound((dk.diku.poets.gen.thrift.reporting.ReportNotFoundException)value);
        }
        break;

      case RUNTIME:
        if (value == null) {
          unsetRuntime();
        } else {
          setRuntime((RunTimeException)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((dk.diku.poets.gen.thrift.value.TypeException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ARG:
        return getArg();

      case NOT_FOUND:
        return getNotFound();

      case RUNTIME:
        return getRuntime();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ARG:
        return isSetArg();
      case NOT_FOUND:
        return isSetNotFound();
      case RUNTIME:
        return isSetRuntime();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryReport_result)
        return this.equals((queryReport_result)that);
      return false;
    }

    public boolean equals(queryReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      boolean this_present_notFound = true && this.isSetNotFound();
      boolean that_present_notFound = true && that.isSetNotFound();
      if (this_present_notFound || that_present_notFound) {
        if (!(this_present_notFound && that_present_notFound))
          return false;
        if (!this.notFound.equals(that.notFound))
          return false;
      }

      boolean this_present_runtime = true && this.isSetRuntime();
      boolean that_present_runtime = true && that.isSetRuntime();
      if (this_present_runtime || that_present_runtime) {
        if (!(this_present_runtime && that_present_runtime))
          return false;
        if (!this.runtime.equals(that.runtime))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryReport_result typedOther = (queryReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg()).compareTo(typedOther.isSetArg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg, typedOther.arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotFound()).compareTo(typedOther.isSetNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFound, typedOther.notFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuntime()).compareTo(typedOther.isSetRuntime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime, typedOther.runtime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFound:");
      if (this.notFound == null) {
        sb.append("null");
      } else {
        sb.append(this.notFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtime:");
      if (this.runtime == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryReport_resultStandardSchemeFactory implements SchemeFactory {
      public queryReport_resultStandardScheme getScheme() {
        return new queryReport_resultStandardScheme();
      }
    }

    private static class queryReport_resultStandardScheme extends StandardScheme<queryReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new dk.diku.poets.gen.thrift.value.Value();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg = new EmptyArgument();
                struct.arg.read(iprot);
                struct.setArgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException();
                struct.notFound.read(iprot);
                struct.setNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RUNTIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.runtime = new RunTimeException();
                struct.runtime.read(iprot);
                struct.setRuntimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.type = new dk.diku.poets.gen.thrift.value.TypeException();
                struct.type.read(iprot);
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.arg != null) {
          oprot.writeFieldBegin(ARG_FIELD_DESC);
          struct.arg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFound != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.notFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.runtime != null) {
          oprot.writeFieldBegin(RUNTIME_FIELD_DESC);
          struct.runtime.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          struct.type.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryReport_resultTupleSchemeFactory implements SchemeFactory {
      public queryReport_resultTupleScheme getScheme() {
        return new queryReport_resultTupleScheme();
      }
    }

    private static class queryReport_resultTupleScheme extends TupleScheme<queryReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetArg()) {
          optionals.set(1);
        }
        if (struct.isSetNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetRuntime()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetArg()) {
          struct.arg.write(oprot);
        }
        if (struct.isSetNotFound()) {
          struct.notFound.write(oprot);
        }
        if (struct.isSetRuntime()) {
          struct.runtime.write(oprot);
        }
        if (struct.isSetType()) {
          struct.type.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new dk.diku.poets.gen.thrift.value.Value();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg = new EmptyArgument();
          struct.arg.read(iprot);
          struct.setArgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.notFound = new dk.diku.poets.gen.thrift.reporting.ReportNotFoundException();
          struct.notFound.read(iprot);
          struct.setNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.runtime = new RunTimeException();
          struct.runtime.read(iprot);
          struct.setRuntimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = new dk.diku.poets.gen.thrift.value.TypeException();
          struct.type.read(iprot);
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class queryRules_args implements org.apache.thrift.TBase<queryRules_args, queryRules_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRules_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRules_argsTupleSchemeFactory());
    }

    public dk.diku.poets.gen.thrift.rules.QValue query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.rules.QValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRules_args.class, metaDataMap);
    }

    public queryRules_args() {
    }

    public queryRules_args(
      dk.diku.poets.gen.thrift.rules.QValue query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRules_args(queryRules_args other) {
      if (other.isSetQuery()) {
        this.query = new dk.diku.poets.gen.thrift.rules.QValue(other.query);
      }
    }

    public queryRules_args deepCopy() {
      return new queryRules_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
    }

    public dk.diku.poets.gen.thrift.rules.QValue getQuery() {
      return this.query;
    }

    public queryRules_args setQuery(dk.diku.poets.gen.thrift.rules.QValue query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((dk.diku.poets.gen.thrift.rules.QValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRules_args)
        return this.equals((queryRules_args)that);
      return false;
    }

    public boolean equals(queryRules_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryRules_args typedOther = (queryRules_args)other;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRules_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRules_argsStandardSchemeFactory implements SchemeFactory {
      public queryRules_argsStandardScheme getScheme() {
        return new queryRules_argsStandardScheme();
      }
    }

    private static class queryRules_argsStandardScheme extends StandardScheme<queryRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new dk.diku.poets.gen.thrift.rules.QValue();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRules_argsTupleSchemeFactory implements SchemeFactory {
      public queryRules_argsTupleScheme getScheme() {
        return new queryRules_argsTupleScheme();
      }
    }

    private static class queryRules_argsTupleScheme extends TupleScheme<queryRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new dk.diku.poets.gen.thrift.rules.QValue();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  public static class queryRules_result implements org.apache.thrift.TBase<queryRules_result, queryRules_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EMPTY_ARGUMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyArgument", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DECODE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("decodeException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RULES_RUNTIME_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("rulesRuntimeException", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField INCONSISTENT_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("inconsistentErr", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField NO_RULE_SETS_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("noRuleSetsErr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField CANNOT_COMPLETE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("cannotCompleteErr", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField PLEASE_SPECIFY_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("pleaseSpecifyErr", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRules_resultTupleSchemeFactory());
    }

    public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> success; // required
    public EmptyArgument emptyArgument; // required
    public dk.diku.poets.gen.thrift.value.DecodeException decodeException; // required
    public RunTimeException rulesRuntimeException; // required
    public dk.diku.poets.gen.thrift.rules.Inconsistent inconsistentErr; // required
    public dk.diku.poets.gen.thrift.rules.NoRuleSets noRuleSetsErr; // required
    public dk.diku.poets.gen.thrift.rules.CannotComplete cannotCompleteErr; // required
    public dk.diku.poets.gen.thrift.rules.PleaseSpecify pleaseSpecifyErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EMPTY_ARGUMENT((short)1, "emptyArgument"),
      DECODE_EXCEPTION((short)2, "decodeException"),
      RULES_RUNTIME_EXCEPTION((short)3, "rulesRuntimeException"),
      INCONSISTENT_ERR((short)4, "inconsistentErr"),
      NO_RULE_SETS_ERR((short)5, "noRuleSetsErr"),
      CANNOT_COMPLETE_ERR((short)6, "cannotCompleteErr"),
      PLEASE_SPECIFY_ERR((short)7, "pleaseSpecifyErr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EMPTY_ARGUMENT
            return EMPTY_ARGUMENT;
          case 2: // DECODE_EXCEPTION
            return DECODE_EXCEPTION;
          case 3: // RULES_RUNTIME_EXCEPTION
            return RULES_RUNTIME_EXCEPTION;
          case 4: // INCONSISTENT_ERR
            return INCONSISTENT_ERR;
          case 5: // NO_RULE_SETS_ERR
            return NO_RULE_SETS_ERR;
          case 6: // CANNOT_COMPLETE_ERR
            return CANNOT_COMPLETE_ERR;
          case 7: // PLEASE_SPECIFY_ERR
            return PLEASE_SPECIFY_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.rules.QValue.class)))));
      tmpMap.put(_Fields.EMPTY_ARGUMENT, new org.apache.thrift.meta_data.FieldMetaData("emptyArgument", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DECODE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("decodeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULES_RUNTIME_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("rulesRuntimeException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INCONSISTENT_ERR, new org.apache.thrift.meta_data.FieldMetaData("inconsistentErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NO_RULE_SETS_ERR, new org.apache.thrift.meta_data.FieldMetaData("noRuleSetsErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.CANNOT_COMPLETE_ERR, new org.apache.thrift.meta_data.FieldMetaData("cannotCompleteErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.PLEASE_SPECIFY_ERR, new org.apache.thrift.meta_data.FieldMetaData("pleaseSpecifyErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRules_result.class, metaDataMap);
    }

    public queryRules_result() {
    }

    public queryRules_result(
      List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> success,
      EmptyArgument emptyArgument,
      dk.diku.poets.gen.thrift.value.DecodeException decodeException,
      RunTimeException rulesRuntimeException,
      dk.diku.poets.gen.thrift.rules.Inconsistent inconsistentErr,
      dk.diku.poets.gen.thrift.rules.NoRuleSets noRuleSetsErr,
      dk.diku.poets.gen.thrift.rules.CannotComplete cannotCompleteErr,
      dk.diku.poets.gen.thrift.rules.PleaseSpecify pleaseSpecifyErr)
    {
      this();
      this.success = success;
      this.emptyArgument = emptyArgument;
      this.decodeException = decodeException;
      this.rulesRuntimeException = rulesRuntimeException;
      this.inconsistentErr = inconsistentErr;
      this.noRuleSetsErr = noRuleSetsErr;
      this.cannotCompleteErr = cannotCompleteErr;
      this.pleaseSpecifyErr = pleaseSpecifyErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRules_result(queryRules_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> __this__success = new ArrayList<Map<String,dk.diku.poets.gen.thrift.rules.QValue>>();
        for (Map<String,dk.diku.poets.gen.thrift.rules.QValue> other_element : other.success) {
          Map<String,dk.diku.poets.gen.thrift.rules.QValue> __this__success_copy = new HashMap<String,dk.diku.poets.gen.thrift.rules.QValue>();
          for (Map.Entry<String, dk.diku.poets.gen.thrift.rules.QValue> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            dk.diku.poets.gen.thrift.rules.QValue other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            dk.diku.poets.gen.thrift.rules.QValue __this__success_copy_copy_value = new dk.diku.poets.gen.thrift.rules.QValue(other_element_element_value);

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetEmptyArgument()) {
        this.emptyArgument = new EmptyArgument(other.emptyArgument);
      }
      if (other.isSetDecodeException()) {
        this.decodeException = new dk.diku.poets.gen.thrift.value.DecodeException(other.decodeException);
      }
      if (other.isSetRulesRuntimeException()) {
        this.rulesRuntimeException = new RunTimeException(other.rulesRuntimeException);
      }
      if (other.isSetInconsistentErr()) {
        this.inconsistentErr = new dk.diku.poets.gen.thrift.rules.Inconsistent(other.inconsistentErr);
      }
      if (other.isSetNoRuleSetsErr()) {
        this.noRuleSetsErr = new dk.diku.poets.gen.thrift.rules.NoRuleSets(other.noRuleSetsErr);
      }
      if (other.isSetCannotCompleteErr()) {
        this.cannotCompleteErr = new dk.diku.poets.gen.thrift.rules.CannotComplete(other.cannotCompleteErr);
      }
      if (other.isSetPleaseSpecifyErr()) {
        this.pleaseSpecifyErr = new dk.diku.poets.gen.thrift.rules.PleaseSpecify(other.pleaseSpecifyErr);
      }
    }

    public queryRules_result deepCopy() {
      return new queryRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.emptyArgument = null;
      this.decodeException = null;
      this.rulesRuntimeException = null;
      this.inconsistentErr = null;
      this.noRuleSetsErr = null;
      this.cannotCompleteErr = null;
      this.pleaseSpecifyErr = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,dk.diku.poets.gen.thrift.rules.QValue> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,dk.diku.poets.gen.thrift.rules.QValue>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> getSuccess() {
      return this.success;
    }

    public queryRules_result setSuccess(List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public EmptyArgument getEmptyArgument() {
      return this.emptyArgument;
    }

    public queryRules_result setEmptyArgument(EmptyArgument emptyArgument) {
      this.emptyArgument = emptyArgument;
      return this;
    }

    public void unsetEmptyArgument() {
      this.emptyArgument = null;
    }

    /** Returns true if field emptyArgument is set (has been assigned a value) and false otherwise */
    public boolean isSetEmptyArgument() {
      return this.emptyArgument != null;
    }

    public void setEmptyArgumentIsSet(boolean value) {
      if (!value) {
        this.emptyArgument = null;
      }
    }

    public dk.diku.poets.gen.thrift.value.DecodeException getDecodeException() {
      return this.decodeException;
    }

    public queryRules_result setDecodeException(dk.diku.poets.gen.thrift.value.DecodeException decodeException) {
      this.decodeException = decodeException;
      return this;
    }

    public void unsetDecodeException() {
      this.decodeException = null;
    }

    /** Returns true if field decodeException is set (has been assigned a value) and false otherwise */
    public boolean isSetDecodeException() {
      return this.decodeException != null;
    }

    public void setDecodeExceptionIsSet(boolean value) {
      if (!value) {
        this.decodeException = null;
      }
    }

    public RunTimeException getRulesRuntimeException() {
      return this.rulesRuntimeException;
    }

    public queryRules_result setRulesRuntimeException(RunTimeException rulesRuntimeException) {
      this.rulesRuntimeException = rulesRuntimeException;
      return this;
    }

    public void unsetRulesRuntimeException() {
      this.rulesRuntimeException = null;
    }

    /** Returns true if field rulesRuntimeException is set (has been assigned a value) and false otherwise */
    public boolean isSetRulesRuntimeException() {
      return this.rulesRuntimeException != null;
    }

    public void setRulesRuntimeExceptionIsSet(boolean value) {
      if (!value) {
        this.rulesRuntimeException = null;
      }
    }

    public dk.diku.poets.gen.thrift.rules.Inconsistent getInconsistentErr() {
      return this.inconsistentErr;
    }

    public queryRules_result setInconsistentErr(dk.diku.poets.gen.thrift.rules.Inconsistent inconsistentErr) {
      this.inconsistentErr = inconsistentErr;
      return this;
    }

    public void unsetInconsistentErr() {
      this.inconsistentErr = null;
    }

    /** Returns true if field inconsistentErr is set (has been assigned a value) and false otherwise */
    public boolean isSetInconsistentErr() {
      return this.inconsistentErr != null;
    }

    public void setInconsistentErrIsSet(boolean value) {
      if (!value) {
        this.inconsistentErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.rules.NoRuleSets getNoRuleSetsErr() {
      return this.noRuleSetsErr;
    }

    public queryRules_result setNoRuleSetsErr(dk.diku.poets.gen.thrift.rules.NoRuleSets noRuleSetsErr) {
      this.noRuleSetsErr = noRuleSetsErr;
      return this;
    }

    public void unsetNoRuleSetsErr() {
      this.noRuleSetsErr = null;
    }

    /** Returns true if field noRuleSetsErr is set (has been assigned a value) and false otherwise */
    public boolean isSetNoRuleSetsErr() {
      return this.noRuleSetsErr != null;
    }

    public void setNoRuleSetsErrIsSet(boolean value) {
      if (!value) {
        this.noRuleSetsErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.rules.CannotComplete getCannotCompleteErr() {
      return this.cannotCompleteErr;
    }

    public queryRules_result setCannotCompleteErr(dk.diku.poets.gen.thrift.rules.CannotComplete cannotCompleteErr) {
      this.cannotCompleteErr = cannotCompleteErr;
      return this;
    }

    public void unsetCannotCompleteErr() {
      this.cannotCompleteErr = null;
    }

    /** Returns true if field cannotCompleteErr is set (has been assigned a value) and false otherwise */
    public boolean isSetCannotCompleteErr() {
      return this.cannotCompleteErr != null;
    }

    public void setCannotCompleteErrIsSet(boolean value) {
      if (!value) {
        this.cannotCompleteErr = null;
      }
    }

    public dk.diku.poets.gen.thrift.rules.PleaseSpecify getPleaseSpecifyErr() {
      return this.pleaseSpecifyErr;
    }

    public queryRules_result setPleaseSpecifyErr(dk.diku.poets.gen.thrift.rules.PleaseSpecify pleaseSpecifyErr) {
      this.pleaseSpecifyErr = pleaseSpecifyErr;
      return this;
    }

    public void unsetPleaseSpecifyErr() {
      this.pleaseSpecifyErr = null;
    }

    /** Returns true if field pleaseSpecifyErr is set (has been assigned a value) and false otherwise */
    public boolean isSetPleaseSpecifyErr() {
      return this.pleaseSpecifyErr != null;
    }

    public void setPleaseSpecifyErrIsSet(boolean value) {
      if (!value) {
        this.pleaseSpecifyErr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,dk.diku.poets.gen.thrift.rules.QValue>>)value);
        }
        break;

      case EMPTY_ARGUMENT:
        if (value == null) {
          unsetEmptyArgument();
        } else {
          setEmptyArgument((EmptyArgument)value);
        }
        break;

      case DECODE_EXCEPTION:
        if (value == null) {
          unsetDecodeException();
        } else {
          setDecodeException((dk.diku.poets.gen.thrift.value.DecodeException)value);
        }
        break;

      case RULES_RUNTIME_EXCEPTION:
        if (value == null) {
          unsetRulesRuntimeException();
        } else {
          setRulesRuntimeException((RunTimeException)value);
        }
        break;

      case INCONSISTENT_ERR:
        if (value == null) {
          unsetInconsistentErr();
        } else {
          setInconsistentErr((dk.diku.poets.gen.thrift.rules.Inconsistent)value);
        }
        break;

      case NO_RULE_SETS_ERR:
        if (value == null) {
          unsetNoRuleSetsErr();
        } else {
          setNoRuleSetsErr((dk.diku.poets.gen.thrift.rules.NoRuleSets)value);
        }
        break;

      case CANNOT_COMPLETE_ERR:
        if (value == null) {
          unsetCannotCompleteErr();
        } else {
          setCannotCompleteErr((dk.diku.poets.gen.thrift.rules.CannotComplete)value);
        }
        break;

      case PLEASE_SPECIFY_ERR:
        if (value == null) {
          unsetPleaseSpecifyErr();
        } else {
          setPleaseSpecifyErr((dk.diku.poets.gen.thrift.rules.PleaseSpecify)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EMPTY_ARGUMENT:
        return getEmptyArgument();

      case DECODE_EXCEPTION:
        return getDecodeException();

      case RULES_RUNTIME_EXCEPTION:
        return getRulesRuntimeException();

      case INCONSISTENT_ERR:
        return getInconsistentErr();

      case NO_RULE_SETS_ERR:
        return getNoRuleSetsErr();

      case CANNOT_COMPLETE_ERR:
        return getCannotCompleteErr();

      case PLEASE_SPECIFY_ERR:
        return getPleaseSpecifyErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EMPTY_ARGUMENT:
        return isSetEmptyArgument();
      case DECODE_EXCEPTION:
        return isSetDecodeException();
      case RULES_RUNTIME_EXCEPTION:
        return isSetRulesRuntimeException();
      case INCONSISTENT_ERR:
        return isSetInconsistentErr();
      case NO_RULE_SETS_ERR:
        return isSetNoRuleSetsErr();
      case CANNOT_COMPLETE_ERR:
        return isSetCannotCompleteErr();
      case PLEASE_SPECIFY_ERR:
        return isSetPleaseSpecifyErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRules_result)
        return this.equals((queryRules_result)that);
      return false;
    }

    public boolean equals(queryRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_emptyArgument = true && this.isSetEmptyArgument();
      boolean that_present_emptyArgument = true && that.isSetEmptyArgument();
      if (this_present_emptyArgument || that_present_emptyArgument) {
        if (!(this_present_emptyArgument && that_present_emptyArgument))
          return false;
        if (!this.emptyArgument.equals(that.emptyArgument))
          return false;
      }

      boolean this_present_decodeException = true && this.isSetDecodeException();
      boolean that_present_decodeException = true && that.isSetDecodeException();
      if (this_present_decodeException || that_present_decodeException) {
        if (!(this_present_decodeException && that_present_decodeException))
          return false;
        if (!this.decodeException.equals(that.decodeException))
          return false;
      }

      boolean this_present_rulesRuntimeException = true && this.isSetRulesRuntimeException();
      boolean that_present_rulesRuntimeException = true && that.isSetRulesRuntimeException();
      if (this_present_rulesRuntimeException || that_present_rulesRuntimeException) {
        if (!(this_present_rulesRuntimeException && that_present_rulesRuntimeException))
          return false;
        if (!this.rulesRuntimeException.equals(that.rulesRuntimeException))
          return false;
      }

      boolean this_present_inconsistentErr = true && this.isSetInconsistentErr();
      boolean that_present_inconsistentErr = true && that.isSetInconsistentErr();
      if (this_present_inconsistentErr || that_present_inconsistentErr) {
        if (!(this_present_inconsistentErr && that_present_inconsistentErr))
          return false;
        if (!this.inconsistentErr.equals(that.inconsistentErr))
          return false;
      }

      boolean this_present_noRuleSetsErr = true && this.isSetNoRuleSetsErr();
      boolean that_present_noRuleSetsErr = true && that.isSetNoRuleSetsErr();
      if (this_present_noRuleSetsErr || that_present_noRuleSetsErr) {
        if (!(this_present_noRuleSetsErr && that_present_noRuleSetsErr))
          return false;
        if (!this.noRuleSetsErr.equals(that.noRuleSetsErr))
          return false;
      }

      boolean this_present_cannotCompleteErr = true && this.isSetCannotCompleteErr();
      boolean that_present_cannotCompleteErr = true && that.isSetCannotCompleteErr();
      if (this_present_cannotCompleteErr || that_present_cannotCompleteErr) {
        if (!(this_present_cannotCompleteErr && that_present_cannotCompleteErr))
          return false;
        if (!this.cannotCompleteErr.equals(that.cannotCompleteErr))
          return false;
      }

      boolean this_present_pleaseSpecifyErr = true && this.isSetPleaseSpecifyErr();
      boolean that_present_pleaseSpecifyErr = true && that.isSetPleaseSpecifyErr();
      if (this_present_pleaseSpecifyErr || that_present_pleaseSpecifyErr) {
        if (!(this_present_pleaseSpecifyErr && that_present_pleaseSpecifyErr))
          return false;
        if (!this.pleaseSpecifyErr.equals(that.pleaseSpecifyErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryRules_result typedOther = (queryRules_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmptyArgument()).compareTo(typedOther.isSetEmptyArgument());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmptyArgument()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyArgument, typedOther.emptyArgument);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDecodeException()).compareTo(typedOther.isSetDecodeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDecodeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decodeException, typedOther.decodeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRulesRuntimeException()).compareTo(typedOther.isSetRulesRuntimeException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRulesRuntimeException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rulesRuntimeException, typedOther.rulesRuntimeException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInconsistentErr()).compareTo(typedOther.isSetInconsistentErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInconsistentErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inconsistentErr, typedOther.inconsistentErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNoRuleSetsErr()).compareTo(typedOther.isSetNoRuleSetsErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoRuleSetsErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noRuleSetsErr, typedOther.noRuleSetsErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCannotCompleteErr()).compareTo(typedOther.isSetCannotCompleteErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCannotCompleteErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cannotCompleteErr, typedOther.cannotCompleteErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPleaseSpecifyErr()).compareTo(typedOther.isSetPleaseSpecifyErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPleaseSpecifyErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pleaseSpecifyErr, typedOther.pleaseSpecifyErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emptyArgument:");
      if (this.emptyArgument == null) {
        sb.append("null");
      } else {
        sb.append(this.emptyArgument);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("decodeException:");
      if (this.decodeException == null) {
        sb.append("null");
      } else {
        sb.append(this.decodeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rulesRuntimeException:");
      if (this.rulesRuntimeException == null) {
        sb.append("null");
      } else {
        sb.append(this.rulesRuntimeException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inconsistentErr:");
      if (this.inconsistentErr == null) {
        sb.append("null");
      } else {
        sb.append(this.inconsistentErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noRuleSetsErr:");
      if (this.noRuleSetsErr == null) {
        sb.append("null");
      } else {
        sb.append(this.noRuleSetsErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cannotCompleteErr:");
      if (this.cannotCompleteErr == null) {
        sb.append("null");
      } else {
        sb.append(this.cannotCompleteErr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pleaseSpecifyErr:");
      if (this.pleaseSpecifyErr == null) {
        sb.append("null");
      } else {
        sb.append(this.pleaseSpecifyErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRules_resultStandardSchemeFactory implements SchemeFactory {
      public queryRules_resultStandardScheme getScheme() {
        return new queryRules_resultStandardScheme();
      }
    }

    private static class queryRules_resultStandardScheme extends StandardScheme<queryRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,dk.diku.poets.gen.thrift.rules.QValue>>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    Map<String,dk.diku.poets.gen.thrift.rules.QValue> _elem58; // required
                    {
                      org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
                      _elem58 = new HashMap<String,dk.diku.poets.gen.thrift.rules.QValue>(2*_map59.size);
                      for (int _i60 = 0; _i60 < _map59.size; ++_i60)
                      {
                        String _key61; // required
                        dk.diku.poets.gen.thrift.rules.QValue _val62; // required
                        _key61 = iprot.readString();
                        _val62 = new dk.diku.poets.gen.thrift.rules.QValue();
                        _val62.read(iprot);
                        _elem58.put(_key61, _val62);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EMPTY_ARGUMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.emptyArgument = new EmptyArgument();
                struct.emptyArgument.read(iprot);
                struct.setEmptyArgumentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DECODE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.decodeException = new dk.diku.poets.gen.thrift.value.DecodeException();
                struct.decodeException.read(iprot);
                struct.setDecodeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULES_RUNTIME_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rulesRuntimeException = new RunTimeException();
                struct.rulesRuntimeException.read(iprot);
                struct.setRulesRuntimeExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INCONSISTENT_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.inconsistentErr = new dk.diku.poets.gen.thrift.rules.Inconsistent();
                struct.inconsistentErr.read(iprot);
                struct.setInconsistentErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NO_RULE_SETS_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.noRuleSetsErr = new dk.diku.poets.gen.thrift.rules.NoRuleSets();
                struct.noRuleSetsErr.read(iprot);
                struct.setNoRuleSetsErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CANNOT_COMPLETE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cannotCompleteErr = new dk.diku.poets.gen.thrift.rules.CannotComplete();
                struct.cannotCompleteErr.read(iprot);
                struct.setCannotCompleteErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PLEASE_SPECIFY_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pleaseSpecifyErr = new dk.diku.poets.gen.thrift.rules.PleaseSpecify();
                struct.pleaseSpecifyErr.read(iprot);
                struct.setPleaseSpecifyErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,dk.diku.poets.gen.thrift.rules.QValue> _iter63 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter63.size()));
                for (Map.Entry<String, dk.diku.poets.gen.thrift.rules.QValue> _iter64 : _iter63.entrySet())
                {
                  oprot.writeString(_iter64.getKey());
                  _iter64.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.emptyArgument != null) {
          oprot.writeFieldBegin(EMPTY_ARGUMENT_FIELD_DESC);
          struct.emptyArgument.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.decodeException != null) {
          oprot.writeFieldBegin(DECODE_EXCEPTION_FIELD_DESC);
          struct.decodeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rulesRuntimeException != null) {
          oprot.writeFieldBegin(RULES_RUNTIME_EXCEPTION_FIELD_DESC);
          struct.rulesRuntimeException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.inconsistentErr != null) {
          oprot.writeFieldBegin(INCONSISTENT_ERR_FIELD_DESC);
          struct.inconsistentErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.noRuleSetsErr != null) {
          oprot.writeFieldBegin(NO_RULE_SETS_ERR_FIELD_DESC);
          struct.noRuleSetsErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cannotCompleteErr != null) {
          oprot.writeFieldBegin(CANNOT_COMPLETE_ERR_FIELD_DESC);
          struct.cannotCompleteErr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pleaseSpecifyErr != null) {
          oprot.writeFieldBegin(PLEASE_SPECIFY_ERR_FIELD_DESC);
          struct.pleaseSpecifyErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRules_resultTupleSchemeFactory implements SchemeFactory {
      public queryRules_resultTupleScheme getScheme() {
        return new queryRules_resultTupleScheme();
      }
    }

    private static class queryRules_resultTupleScheme extends TupleScheme<queryRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEmptyArgument()) {
          optionals.set(1);
        }
        if (struct.isSetDecodeException()) {
          optionals.set(2);
        }
        if (struct.isSetRulesRuntimeException()) {
          optionals.set(3);
        }
        if (struct.isSetInconsistentErr()) {
          optionals.set(4);
        }
        if (struct.isSetNoRuleSetsErr()) {
          optionals.set(5);
        }
        if (struct.isSetCannotCompleteErr()) {
          optionals.set(6);
        }
        if (struct.isSetPleaseSpecifyErr()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,dk.diku.poets.gen.thrift.rules.QValue> _iter65 : struct.success)
            {
              {
                oprot.writeI32(_iter65.size());
                for (Map.Entry<String, dk.diku.poets.gen.thrift.rules.QValue> _iter66 : _iter65.entrySet())
                {
                  oprot.writeString(_iter66.getKey());
                  _iter66.getValue().write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetEmptyArgument()) {
          struct.emptyArgument.write(oprot);
        }
        if (struct.isSetDecodeException()) {
          struct.decodeException.write(oprot);
        }
        if (struct.isSetRulesRuntimeException()) {
          struct.rulesRuntimeException.write(oprot);
        }
        if (struct.isSetInconsistentErr()) {
          struct.inconsistentErr.write(oprot);
        }
        if (struct.isSetNoRuleSetsErr()) {
          struct.noRuleSetsErr.write(oprot);
        }
        if (struct.isSetCannotCompleteErr()) {
          struct.cannotCompleteErr.write(oprot);
        }
        if (struct.isSetPleaseSpecifyErr()) {
          struct.pleaseSpecifyErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,dk.diku.poets.gen.thrift.rules.QValue>>(_list67.size);
            for (int _i68 = 0; _i68 < _list67.size; ++_i68)
            {
              Map<String,dk.diku.poets.gen.thrift.rules.QValue> _elem69; // required
              {
                org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem69 = new HashMap<String,dk.diku.poets.gen.thrift.rules.QValue>(2*_map70.size);
                for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                {
                  String _key72; // required
                  dk.diku.poets.gen.thrift.rules.QValue _val73; // required
                  _key72 = iprot.readString();
                  _val73 = new dk.diku.poets.gen.thrift.rules.QValue();
                  _val73.read(iprot);
                  _elem69.put(_key72, _val73);
                }
              }
              struct.success.add(_elem69);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emptyArgument = new EmptyArgument();
          struct.emptyArgument.read(iprot);
          struct.setEmptyArgumentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.decodeException = new dk.diku.poets.gen.thrift.value.DecodeException();
          struct.decodeException.read(iprot);
          struct.setDecodeExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rulesRuntimeException = new RunTimeException();
          struct.rulesRuntimeException.read(iprot);
          struct.setRulesRuntimeExceptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.inconsistentErr = new dk.diku.poets.gen.thrift.rules.Inconsistent();
          struct.inconsistentErr.read(iprot);
          struct.setInconsistentErrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.noRuleSetsErr = new dk.diku.poets.gen.thrift.rules.NoRuleSets();
          struct.noRuleSetsErr.read(iprot);
          struct.setNoRuleSetsErrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.cannotCompleteErr = new dk.diku.poets.gen.thrift.rules.CannotComplete();
          struct.cannotCompleteErr.read(iprot);
          struct.setCannotCompleteErrIsSet(true);
        }
        if (incoming.get(7)) {
          struct.pleaseSpecifyErr = new dk.diku.poets.gen.thrift.rules.PleaseSpecify();
          struct.pleaseSpecifyErr.read(iprot);
          struct.setPleaseSpecifyErrIsSet(true);
        }
      }
    }

  }

}
