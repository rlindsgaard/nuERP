/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.rules;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QVal implements org.apache.thrift.TBase<QVal, QVal._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QVal");

  private static final org.apache.thrift.protocol.TField INT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("intVal", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVal", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVal", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_TIME_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTimeVal", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DURATION_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("durationVal", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RECORD_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("recordVal", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField REF_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("refVal", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField LIST_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("listVals", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField Q_VAR_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("qVarVal", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField UNKNOWN_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownVal", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QValStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QValTupleSchemeFactory());
  }

  public int intVal; // required
  public boolean boolVal; // required
  public String stringVal; // required
  public dk.diku.poets.gen.thrift.value.DateTime dateTimeVal; // required
  public dk.diku.poets.gen.thrift.value.Duration durationVal; // required
  public double doubleVal; // required
  public dk.diku.poets.gen.thrift.value.Record recordVal; // required
  public dk.diku.poets.gen.thrift.value.RefVal refVal; // required
  public List<Integer> listVals; // required
  public QVar qVarVal; // required
  public Unknown unknownVal; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_VAL((short)1, "intVal"),
    BOOL_VAL((short)2, "boolVal"),
    STRING_VAL((short)3, "stringVal"),
    DATE_TIME_VAL((short)4, "dateTimeVal"),
    DURATION_VAL((short)5, "durationVal"),
    DOUBLE_VAL((short)6, "doubleVal"),
    RECORD_VAL((short)7, "recordVal"),
    REF_VAL((short)8, "refVal"),
    LIST_VALS((short)9, "listVals"),
    Q_VAR_VAL((short)10, "qVarVal"),
    UNKNOWN_VAL((short)11, "unknownVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_VAL
          return INT_VAL;
        case 2: // BOOL_VAL
          return BOOL_VAL;
        case 3: // STRING_VAL
          return STRING_VAL;
        case 4: // DATE_TIME_VAL
          return DATE_TIME_VAL;
        case 5: // DURATION_VAL
          return DURATION_VAL;
        case 6: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 7: // RECORD_VAL
          return RECORD_VAL;
        case 8: // REF_VAL
          return REF_VAL;
        case 9: // LIST_VALS
          return LIST_VALS;
        case 10: // Q_VAR_VAL
          return Q_VAR_VAL;
        case 11: // UNKNOWN_VAL
          return UNKNOWN_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTVAL_ISSET_ID = 0;
  private static final int __BOOLVAL_ISSET_ID = 1;
  private static final int __DOUBLEVAL_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.INT_VAL,_Fields.BOOL_VAL,_Fields.STRING_VAL,_Fields.DATE_TIME_VAL,_Fields.DURATION_VAL,_Fields.DOUBLE_VAL,_Fields.RECORD_VAL,_Fields.REF_VAL,_Fields.LIST_VALS,_Fields.Q_VAR_VAL,_Fields.UNKNOWN_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_VAL, new org.apache.thrift.meta_data.FieldMetaData("intVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("boolVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("stringVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_TIME_VAL, new org.apache.thrift.meta_data.FieldMetaData("dateTimeVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.DateTime.class)));
    tmpMap.put(_Fields.DURATION_VAL, new org.apache.thrift.meta_data.FieldMetaData("durationVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Duration.class)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("doubleVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_VAL, new org.apache.thrift.meta_data.FieldMetaData("recordVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Record.class)));
    tmpMap.put(_Fields.REF_VAL, new org.apache.thrift.meta_data.FieldMetaData("refVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.RefVal.class)));
    tmpMap.put(_Fields.LIST_VALS, new org.apache.thrift.meta_data.FieldMetaData("listVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "Index"))));
    tmpMap.put(_Fields.Q_VAR_VAL, new org.apache.thrift.meta_data.FieldMetaData("qVarVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QVar.class)));
    tmpMap.put(_Fields.UNKNOWN_VAL, new org.apache.thrift.meta_data.FieldMetaData("unknownVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unknown.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QVal.class, metaDataMap);
  }

  public QVal() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QVal(QVal other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.intVal = other.intVal;
    this.boolVal = other.boolVal;
    if (other.isSetStringVal()) {
      this.stringVal = other.stringVal;
    }
    if (other.isSetDateTimeVal()) {
      this.dateTimeVal = new dk.diku.poets.gen.thrift.value.DateTime(other.dateTimeVal);
    }
    if (other.isSetDurationVal()) {
      this.durationVal = new dk.diku.poets.gen.thrift.value.Duration(other.durationVal);
    }
    this.doubleVal = other.doubleVal;
    if (other.isSetRecordVal()) {
      this.recordVal = new dk.diku.poets.gen.thrift.value.Record(other.recordVal);
    }
    if (other.isSetRefVal()) {
      this.refVal = new dk.diku.poets.gen.thrift.value.RefVal(other.refVal);
    }
    if (other.isSetListVals()) {
      List<Integer> __this__listVals = new ArrayList<Integer>();
      for (Integer other_element : other.listVals) {
        __this__listVals.add(other_element);
      }
      this.listVals = __this__listVals;
    }
    if (other.isSetQVarVal()) {
      this.qVarVal = new QVar(other.qVarVal);
    }
    if (other.isSetUnknownVal()) {
      this.unknownVal = new Unknown(other.unknownVal);
    }
  }

  public QVal deepCopy() {
    return new QVal(this);
  }

  @Override
  public void clear() {
    setIntValIsSet(false);
    this.intVal = 0;
    setBoolValIsSet(false);
    this.boolVal = false;
    this.stringVal = null;
    this.dateTimeVal = null;
    this.durationVal = null;
    setDoubleValIsSet(false);
    this.doubleVal = 0.0;
    this.recordVal = null;
    this.refVal = null;
    this.listVals = null;
    this.qVarVal = null;
    this.unknownVal = null;
  }

  public int getIntVal() {
    return this.intVal;
  }

  public QVal setIntVal(int intVal) {
    this.intVal = intVal;
    setIntValIsSet(true);
    return this;
  }

  public void unsetIntVal() {
    __isset_bit_vector.clear(__INTVAL_ISSET_ID);
  }

  /** Returns true if field intVal is set (has been assigned a value) and false otherwise */
  public boolean isSetIntVal() {
    return __isset_bit_vector.get(__INTVAL_ISSET_ID);
  }

  public void setIntValIsSet(boolean value) {
    __isset_bit_vector.set(__INTVAL_ISSET_ID, value);
  }

  public boolean isBoolVal() {
    return this.boolVal;
  }

  public QVal setBoolVal(boolean boolVal) {
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    return this;
  }

  public void unsetBoolVal() {
    __isset_bit_vector.clear(__BOOLVAL_ISSET_ID);
  }

  /** Returns true if field boolVal is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolVal() {
    return __isset_bit_vector.get(__BOOLVAL_ISSET_ID);
  }

  public void setBoolValIsSet(boolean value) {
    __isset_bit_vector.set(__BOOLVAL_ISSET_ID, value);
  }

  public String getStringVal() {
    return this.stringVal;
  }

  public QVal setStringVal(String stringVal) {
    this.stringVal = stringVal;
    return this;
  }

  public void unsetStringVal() {
    this.stringVal = null;
  }

  /** Returns true if field stringVal is set (has been assigned a value) and false otherwise */
  public boolean isSetStringVal() {
    return this.stringVal != null;
  }

  public void setStringValIsSet(boolean value) {
    if (!value) {
      this.stringVal = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.DateTime getDateTimeVal() {
    return this.dateTimeVal;
  }

  public QVal setDateTimeVal(dk.diku.poets.gen.thrift.value.DateTime dateTimeVal) {
    this.dateTimeVal = dateTimeVal;
    return this;
  }

  public void unsetDateTimeVal() {
    this.dateTimeVal = null;
  }

  /** Returns true if field dateTimeVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTimeVal() {
    return this.dateTimeVal != null;
  }

  public void setDateTimeValIsSet(boolean value) {
    if (!value) {
      this.dateTimeVal = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.Duration getDurationVal() {
    return this.durationVal;
  }

  public QVal setDurationVal(dk.diku.poets.gen.thrift.value.Duration durationVal) {
    this.durationVal = durationVal;
    return this;
  }

  public void unsetDurationVal() {
    this.durationVal = null;
  }

  /** Returns true if field durationVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationVal() {
    return this.durationVal != null;
  }

  public void setDurationValIsSet(boolean value) {
    if (!value) {
      this.durationVal = null;
    }
  }

  public double getDoubleVal() {
    return this.doubleVal;
  }

  public QVal setDoubleVal(double doubleVal) {
    this.doubleVal = doubleVal;
    setDoubleValIsSet(true);
    return this;
  }

  public void unsetDoubleVal() {
    __isset_bit_vector.clear(__DOUBLEVAL_ISSET_ID);
  }

  /** Returns true if field doubleVal is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleVal() {
    return __isset_bit_vector.get(__DOUBLEVAL_ISSET_ID);
  }

  public void setDoubleValIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLEVAL_ISSET_ID, value);
  }

  public dk.diku.poets.gen.thrift.value.Record getRecordVal() {
    return this.recordVal;
  }

  public QVal setRecordVal(dk.diku.poets.gen.thrift.value.Record recordVal) {
    this.recordVal = recordVal;
    return this;
  }

  public void unsetRecordVal() {
    this.recordVal = null;
  }

  /** Returns true if field recordVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordVal() {
    return this.recordVal != null;
  }

  public void setRecordValIsSet(boolean value) {
    if (!value) {
      this.recordVal = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.RefVal getRefVal() {
    return this.refVal;
  }

  public QVal setRefVal(dk.diku.poets.gen.thrift.value.RefVal refVal) {
    this.refVal = refVal;
    return this;
  }

  public void unsetRefVal() {
    this.refVal = null;
  }

  /** Returns true if field refVal is set (has been assigned a value) and false otherwise */
  public boolean isSetRefVal() {
    return this.refVal != null;
  }

  public void setRefValIsSet(boolean value) {
    if (!value) {
      this.refVal = null;
    }
  }

  public int getListValsSize() {
    return (this.listVals == null) ? 0 : this.listVals.size();
  }

  public java.util.Iterator<Integer> getListValsIterator() {
    return (this.listVals == null) ? null : this.listVals.iterator();
  }

  public void addToListVals(int elem) {
    if (this.listVals == null) {
      this.listVals = new ArrayList<Integer>();
    }
    this.listVals.add(elem);
  }

  public List<Integer> getListVals() {
    return this.listVals;
  }

  public QVal setListVals(List<Integer> listVals) {
    this.listVals = listVals;
    return this;
  }

  public void unsetListVals() {
    this.listVals = null;
  }

  /** Returns true if field listVals is set (has been assigned a value) and false otherwise */
  public boolean isSetListVals() {
    return this.listVals != null;
  }

  public void setListValsIsSet(boolean value) {
    if (!value) {
      this.listVals = null;
    }
  }

  public QVar getQVarVal() {
    return this.qVarVal;
  }

  public QVal setQVarVal(QVar qVarVal) {
    this.qVarVal = qVarVal;
    return this;
  }

  public void unsetQVarVal() {
    this.qVarVal = null;
  }

  /** Returns true if field qVarVal is set (has been assigned a value) and false otherwise */
  public boolean isSetQVarVal() {
    return this.qVarVal != null;
  }

  public void setQVarValIsSet(boolean value) {
    if (!value) {
      this.qVarVal = null;
    }
  }

  public Unknown getUnknownVal() {
    return this.unknownVal;
  }

  public QVal setUnknownVal(Unknown unknownVal) {
    this.unknownVal = unknownVal;
    return this;
  }

  public void unsetUnknownVal() {
    this.unknownVal = null;
  }

  /** Returns true if field unknownVal is set (has been assigned a value) and false otherwise */
  public boolean isSetUnknownVal() {
    return this.unknownVal != null;
  }

  public void setUnknownValIsSet(boolean value) {
    if (!value) {
      this.unknownVal = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INT_VAL:
      if (value == null) {
        unsetIntVal();
      } else {
        setIntVal((Integer)value);
      }
      break;

    case BOOL_VAL:
      if (value == null) {
        unsetBoolVal();
      } else {
        setBoolVal((Boolean)value);
      }
      break;

    case STRING_VAL:
      if (value == null) {
        unsetStringVal();
      } else {
        setStringVal((String)value);
      }
      break;

    case DATE_TIME_VAL:
      if (value == null) {
        unsetDateTimeVal();
      } else {
        setDateTimeVal((dk.diku.poets.gen.thrift.value.DateTime)value);
      }
      break;

    case DURATION_VAL:
      if (value == null) {
        unsetDurationVal();
      } else {
        setDurationVal((dk.diku.poets.gen.thrift.value.Duration)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDoubleVal();
      } else {
        setDoubleVal((Double)value);
      }
      break;

    case RECORD_VAL:
      if (value == null) {
        unsetRecordVal();
      } else {
        setRecordVal((dk.diku.poets.gen.thrift.value.Record)value);
      }
      break;

    case REF_VAL:
      if (value == null) {
        unsetRefVal();
      } else {
        setRefVal((dk.diku.poets.gen.thrift.value.RefVal)value);
      }
      break;

    case LIST_VALS:
      if (value == null) {
        unsetListVals();
      } else {
        setListVals((List<Integer>)value);
      }
      break;

    case Q_VAR_VAL:
      if (value == null) {
        unsetQVarVal();
      } else {
        setQVarVal((QVar)value);
      }
      break;

    case UNKNOWN_VAL:
      if (value == null) {
        unsetUnknownVal();
      } else {
        setUnknownVal((Unknown)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_VAL:
      return Integer.valueOf(getIntVal());

    case BOOL_VAL:
      return Boolean.valueOf(isBoolVal());

    case STRING_VAL:
      return getStringVal();

    case DATE_TIME_VAL:
      return getDateTimeVal();

    case DURATION_VAL:
      return getDurationVal();

    case DOUBLE_VAL:
      return Double.valueOf(getDoubleVal());

    case RECORD_VAL:
      return getRecordVal();

    case REF_VAL:
      return getRefVal();

    case LIST_VALS:
      return getListVals();

    case Q_VAR_VAL:
      return getQVarVal();

    case UNKNOWN_VAL:
      return getUnknownVal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INT_VAL:
      return isSetIntVal();
    case BOOL_VAL:
      return isSetBoolVal();
    case STRING_VAL:
      return isSetStringVal();
    case DATE_TIME_VAL:
      return isSetDateTimeVal();
    case DURATION_VAL:
      return isSetDurationVal();
    case DOUBLE_VAL:
      return isSetDoubleVal();
    case RECORD_VAL:
      return isSetRecordVal();
    case REF_VAL:
      return isSetRefVal();
    case LIST_VALS:
      return isSetListVals();
    case Q_VAR_VAL:
      return isSetQVarVal();
    case UNKNOWN_VAL:
      return isSetUnknownVal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QVal)
      return this.equals((QVal)that);
    return false;
  }

  public boolean equals(QVal that) {
    if (that == null)
      return false;

    boolean this_present_intVal = true && this.isSetIntVal();
    boolean that_present_intVal = true && that.isSetIntVal();
    if (this_present_intVal || that_present_intVal) {
      if (!(this_present_intVal && that_present_intVal))
        return false;
      if (this.intVal != that.intVal)
        return false;
    }

    boolean this_present_boolVal = true && this.isSetBoolVal();
    boolean that_present_boolVal = true && that.isSetBoolVal();
    if (this_present_boolVal || that_present_boolVal) {
      if (!(this_present_boolVal && that_present_boolVal))
        return false;
      if (this.boolVal != that.boolVal)
        return false;
    }

    boolean this_present_stringVal = true && this.isSetStringVal();
    boolean that_present_stringVal = true && that.isSetStringVal();
    if (this_present_stringVal || that_present_stringVal) {
      if (!(this_present_stringVal && that_present_stringVal))
        return false;
      if (!this.stringVal.equals(that.stringVal))
        return false;
    }

    boolean this_present_dateTimeVal = true && this.isSetDateTimeVal();
    boolean that_present_dateTimeVal = true && that.isSetDateTimeVal();
    if (this_present_dateTimeVal || that_present_dateTimeVal) {
      if (!(this_present_dateTimeVal && that_present_dateTimeVal))
        return false;
      if (!this.dateTimeVal.equals(that.dateTimeVal))
        return false;
    }

    boolean this_present_durationVal = true && this.isSetDurationVal();
    boolean that_present_durationVal = true && that.isSetDurationVal();
    if (this_present_durationVal || that_present_durationVal) {
      if (!(this_present_durationVal && that_present_durationVal))
        return false;
      if (!this.durationVal.equals(that.durationVal))
        return false;
    }

    boolean this_present_doubleVal = true && this.isSetDoubleVal();
    boolean that_present_doubleVal = true && that.isSetDoubleVal();
    if (this_present_doubleVal || that_present_doubleVal) {
      if (!(this_present_doubleVal && that_present_doubleVal))
        return false;
      if (this.doubleVal != that.doubleVal)
        return false;
    }

    boolean this_present_recordVal = true && this.isSetRecordVal();
    boolean that_present_recordVal = true && that.isSetRecordVal();
    if (this_present_recordVal || that_present_recordVal) {
      if (!(this_present_recordVal && that_present_recordVal))
        return false;
      if (!this.recordVal.equals(that.recordVal))
        return false;
    }

    boolean this_present_refVal = true && this.isSetRefVal();
    boolean that_present_refVal = true && that.isSetRefVal();
    if (this_present_refVal || that_present_refVal) {
      if (!(this_present_refVal && that_present_refVal))
        return false;
      if (!this.refVal.equals(that.refVal))
        return false;
    }

    boolean this_present_listVals = true && this.isSetListVals();
    boolean that_present_listVals = true && that.isSetListVals();
    if (this_present_listVals || that_present_listVals) {
      if (!(this_present_listVals && that_present_listVals))
        return false;
      if (!this.listVals.equals(that.listVals))
        return false;
    }

    boolean this_present_qVarVal = true && this.isSetQVarVal();
    boolean that_present_qVarVal = true && that.isSetQVarVal();
    if (this_present_qVarVal || that_present_qVarVal) {
      if (!(this_present_qVarVal && that_present_qVarVal))
        return false;
      if (!this.qVarVal.equals(that.qVarVal))
        return false;
    }

    boolean this_present_unknownVal = true && this.isSetUnknownVal();
    boolean that_present_unknownVal = true && that.isSetUnknownVal();
    if (this_present_unknownVal || that_present_unknownVal) {
      if (!(this_present_unknownVal && that_present_unknownVal))
        return false;
      if (!this.unknownVal.equals(that.unknownVal))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QVal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QVal typedOther = (QVal)other;

    lastComparison = Boolean.valueOf(isSetIntVal()).compareTo(typedOther.isSetIntVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intVal, typedOther.intVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolVal()).compareTo(typedOther.isSetBoolVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolVal, typedOther.boolVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringVal()).compareTo(typedOther.isSetStringVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringVal, typedOther.stringVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTimeVal()).compareTo(typedOther.isSetDateTimeVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTimeVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTimeVal, typedOther.dateTimeVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurationVal()).compareTo(typedOther.isSetDurationVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationVal, typedOther.durationVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleVal()).compareTo(typedOther.isSetDoubleVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleVal, typedOther.doubleVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordVal()).compareTo(typedOther.isSetRecordVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordVal, typedOther.recordVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefVal()).compareTo(typedOther.isSetRefVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refVal, typedOther.refVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListVals()).compareTo(typedOther.isSetListVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listVals, typedOther.listVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQVarVal()).compareTo(typedOther.isSetQVarVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQVarVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qVarVal, typedOther.qVarVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnknownVal()).compareTo(typedOther.isSetUnknownVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnknownVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownVal, typedOther.unknownVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QVal(");
    boolean first = true;

    if (isSetIntVal()) {
      sb.append("intVal:");
      sb.append(this.intVal);
      first = false;
    }
    if (isSetBoolVal()) {
      if (!first) sb.append(", ");
      sb.append("boolVal:");
      sb.append(this.boolVal);
      first = false;
    }
    if (isSetStringVal()) {
      if (!first) sb.append(", ");
      sb.append("stringVal:");
      if (this.stringVal == null) {
        sb.append("null");
      } else {
        sb.append(this.stringVal);
      }
      first = false;
    }
    if (isSetDateTimeVal()) {
      if (!first) sb.append(", ");
      sb.append("dateTimeVal:");
      if (this.dateTimeVal == null) {
        sb.append("null");
      } else {
        sb.append(this.dateTimeVal);
      }
      first = false;
    }
    if (isSetDurationVal()) {
      if (!first) sb.append(", ");
      sb.append("durationVal:");
      if (this.durationVal == null) {
        sb.append("null");
      } else {
        sb.append(this.durationVal);
      }
      first = false;
    }
    if (isSetDoubleVal()) {
      if (!first) sb.append(", ");
      sb.append("doubleVal:");
      sb.append(this.doubleVal);
      first = false;
    }
    if (isSetRecordVal()) {
      if (!first) sb.append(", ");
      sb.append("recordVal:");
      if (this.recordVal == null) {
        sb.append("null");
      } else {
        sb.append(this.recordVal);
      }
      first = false;
    }
    if (isSetRefVal()) {
      if (!first) sb.append(", ");
      sb.append("refVal:");
      if (this.refVal == null) {
        sb.append("null");
      } else {
        sb.append(this.refVal);
      }
      first = false;
    }
    if (isSetListVals()) {
      if (!first) sb.append(", ");
      sb.append("listVals:");
      if (this.listVals == null) {
        sb.append("null");
      } else {
        sb.append(this.listVals);
      }
      first = false;
    }
    if (isSetQVarVal()) {
      if (!first) sb.append(", ");
      sb.append("qVarVal:");
      if (this.qVarVal == null) {
        sb.append("null");
      } else {
        sb.append(this.qVarVal);
      }
      first = false;
    }
    if (isSetUnknownVal()) {
      if (!first) sb.append(", ");
      sb.append("unknownVal:");
      if (this.unknownVal == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownVal);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QValStandardSchemeFactory implements SchemeFactory {
    public QValStandardScheme getScheme() {
      return new QValStandardScheme();
    }
  }

  private static class QValStandardScheme extends StandardScheme<QVal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QVal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intVal = iprot.readI32();
              struct.setIntValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolVal = iprot.readBool();
              struct.setBoolValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringVal = iprot.readString();
              struct.setStringValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_TIME_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateTimeVal = new dk.diku.poets.gen.thrift.value.DateTime();
              struct.dateTimeVal.read(iprot);
              struct.setDateTimeValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DURATION_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.durationVal = new dk.diku.poets.gen.thrift.value.Duration();
              struct.durationVal.read(iprot);
              struct.setDurationValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleVal = iprot.readDouble();
              struct.setDoubleValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECORD_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordVal = new dk.diku.poets.gen.thrift.value.Record();
              struct.recordVal.read(iprot);
              struct.setRecordValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REF_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.refVal = new dk.diku.poets.gen.thrift.value.RefVal();
              struct.refVal.read(iprot);
              struct.setRefValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIST_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.listVals = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.listVals.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setListValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // Q_VAR_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.qVarVal = new QVar();
              struct.qVarVal.read(iprot);
              struct.setQVarValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNKNOWN_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unknownVal = new Unknown();
              struct.unknownVal.read(iprot);
              struct.setUnknownValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QVal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIntVal()) {
        oprot.writeFieldBegin(INT_VAL_FIELD_DESC);
        oprot.writeI32(struct.intVal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolVal()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(struct.boolVal);
        oprot.writeFieldEnd();
      }
      if (struct.stringVal != null) {
        if (struct.isSetStringVal()) {
          oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
          oprot.writeString(struct.stringVal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateTimeVal != null) {
        if (struct.isSetDateTimeVal()) {
          oprot.writeFieldBegin(DATE_TIME_VAL_FIELD_DESC);
          struct.dateTimeVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.durationVal != null) {
        if (struct.isSetDurationVal()) {
          oprot.writeFieldBegin(DURATION_VAL_FIELD_DESC);
          struct.durationVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoubleVal()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.doubleVal);
        oprot.writeFieldEnd();
      }
      if (struct.recordVal != null) {
        if (struct.isSetRecordVal()) {
          oprot.writeFieldBegin(RECORD_VAL_FIELD_DESC);
          struct.recordVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refVal != null) {
        if (struct.isSetRefVal()) {
          oprot.writeFieldBegin(REF_VAL_FIELD_DESC);
          struct.refVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.listVals != null) {
        if (struct.isSetListVals()) {
          oprot.writeFieldBegin(LIST_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.listVals.size()));
            for (int _iter3 : struct.listVals)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.qVarVal != null) {
        if (struct.isSetQVarVal()) {
          oprot.writeFieldBegin(Q_VAR_VAL_FIELD_DESC);
          struct.qVarVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unknownVal != null) {
        if (struct.isSetUnknownVal()) {
          oprot.writeFieldBegin(UNKNOWN_VAL_FIELD_DESC);
          struct.unknownVal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QValTupleSchemeFactory implements SchemeFactory {
    public QValTupleScheme getScheme() {
      return new QValTupleScheme();
    }
  }

  private static class QValTupleScheme extends TupleScheme<QVal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QVal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIntVal()) {
        optionals.set(0);
      }
      if (struct.isSetBoolVal()) {
        optionals.set(1);
      }
      if (struct.isSetStringVal()) {
        optionals.set(2);
      }
      if (struct.isSetDateTimeVal()) {
        optionals.set(3);
      }
      if (struct.isSetDurationVal()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleVal()) {
        optionals.set(5);
      }
      if (struct.isSetRecordVal()) {
        optionals.set(6);
      }
      if (struct.isSetRefVal()) {
        optionals.set(7);
      }
      if (struct.isSetListVals()) {
        optionals.set(8);
      }
      if (struct.isSetQVarVal()) {
        optionals.set(9);
      }
      if (struct.isSetUnknownVal()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetIntVal()) {
        oprot.writeI32(struct.intVal);
      }
      if (struct.isSetBoolVal()) {
        oprot.writeBool(struct.boolVal);
      }
      if (struct.isSetStringVal()) {
        oprot.writeString(struct.stringVal);
      }
      if (struct.isSetDateTimeVal()) {
        struct.dateTimeVal.write(oprot);
      }
      if (struct.isSetDurationVal()) {
        struct.durationVal.write(oprot);
      }
      if (struct.isSetDoubleVal()) {
        oprot.writeDouble(struct.doubleVal);
      }
      if (struct.isSetRecordVal()) {
        struct.recordVal.write(oprot);
      }
      if (struct.isSetRefVal()) {
        struct.refVal.write(oprot);
      }
      if (struct.isSetListVals()) {
        {
          oprot.writeI32(struct.listVals.size());
          for (int _iter4 : struct.listVals)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
      if (struct.isSetQVarVal()) {
        struct.qVarVal.write(oprot);
      }
      if (struct.isSetUnknownVal()) {
        struct.unknownVal.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QVal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.intVal = iprot.readI32();
        struct.setIntValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boolVal = iprot.readBool();
        struct.setBoolValIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stringVal = iprot.readString();
        struct.setStringValIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateTimeVal = new dk.diku.poets.gen.thrift.value.DateTime();
        struct.dateTimeVal.read(iprot);
        struct.setDateTimeValIsSet(true);
      }
      if (incoming.get(4)) {
        struct.durationVal = new dk.diku.poets.gen.thrift.value.Duration();
        struct.durationVal.read(iprot);
        struct.setDurationValIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleVal = iprot.readDouble();
        struct.setDoubleValIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recordVal = new dk.diku.poets.gen.thrift.value.Record();
        struct.recordVal.read(iprot);
        struct.setRecordValIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refVal = new dk.diku.poets.gen.thrift.value.RefVal();
        struct.refVal.read(iprot);
        struct.setRefValIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.listVals = new ArrayList<Integer>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            int _elem7; // required
            _elem7 = iprot.readI32();
            struct.listVals.add(_elem7);
          }
        }
        struct.setListValsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.qVarVal = new QVar();
        struct.qVarVal.read(iprot);
        struct.setQVarValIsSet(true);
      }
      if (incoming.get(10)) {
        struct.unknownVal = new Unknown();
        struct.unknownVal.read(iprot);
        struct.setUnknownValIsSet(true);
      }
    }
  }

}

