/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InstantiateClause implements org.apache.thrift.TBase<InstantiateClause, InstantiateClause._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstantiateClause");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXP_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("expArgs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARTY_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("partyArgs", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InstantiateClauseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InstantiateClauseTupleSchemeFactory());
  }

  public String name; // required
  public List<Expression> expArgs; // required
  public List<Expression> partyArgs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    EXP_ARGS((short)2, "expArgs"),
    PARTY_ARGS((short)3, "partyArgs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // EXP_ARGS
          return EXP_ARGS;
        case 3: // PARTY_ARGS
          return PARTY_ARGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TemplateName")));
    tmpMap.put(_Fields.EXP_ARGS, new org.apache.thrift.meta_data.FieldMetaData("expArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Expression.class))));
    tmpMap.put(_Fields.PARTY_ARGS, new org.apache.thrift.meta_data.FieldMetaData("partyArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Expression.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstantiateClause.class, metaDataMap);
  }

  public InstantiateClause() {
  }

  public InstantiateClause(
    String name,
    List<Expression> expArgs,
    List<Expression> partyArgs)
  {
    this();
    this.name = name;
    this.expArgs = expArgs;
    this.partyArgs = partyArgs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstantiateClause(InstantiateClause other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetExpArgs()) {
      List<Expression> __this__expArgs = new ArrayList<Expression>();
      for (Expression other_element : other.expArgs) {
        __this__expArgs.add(new Expression(other_element));
      }
      this.expArgs = __this__expArgs;
    }
    if (other.isSetPartyArgs()) {
      List<Expression> __this__partyArgs = new ArrayList<Expression>();
      for (Expression other_element : other.partyArgs) {
        __this__partyArgs.add(new Expression(other_element));
      }
      this.partyArgs = __this__partyArgs;
    }
  }

  public InstantiateClause deepCopy() {
    return new InstantiateClause(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.expArgs = null;
    this.partyArgs = null;
  }

  public String getName() {
    return this.name;
  }

  public InstantiateClause setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getExpArgsSize() {
    return (this.expArgs == null) ? 0 : this.expArgs.size();
  }

  public java.util.Iterator<Expression> getExpArgsIterator() {
    return (this.expArgs == null) ? null : this.expArgs.iterator();
  }

  public void addToExpArgs(Expression elem) {
    if (this.expArgs == null) {
      this.expArgs = new ArrayList<Expression>();
    }
    this.expArgs.add(elem);
  }

  public List<Expression> getExpArgs() {
    return this.expArgs;
  }

  public InstantiateClause setExpArgs(List<Expression> expArgs) {
    this.expArgs = expArgs;
    return this;
  }

  public void unsetExpArgs() {
    this.expArgs = null;
  }

  /** Returns true if field expArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetExpArgs() {
    return this.expArgs != null;
  }

  public void setExpArgsIsSet(boolean value) {
    if (!value) {
      this.expArgs = null;
    }
  }

  public int getPartyArgsSize() {
    return (this.partyArgs == null) ? 0 : this.partyArgs.size();
  }

  public java.util.Iterator<Expression> getPartyArgsIterator() {
    return (this.partyArgs == null) ? null : this.partyArgs.iterator();
  }

  public void addToPartyArgs(Expression elem) {
    if (this.partyArgs == null) {
      this.partyArgs = new ArrayList<Expression>();
    }
    this.partyArgs.add(elem);
  }

  public List<Expression> getPartyArgs() {
    return this.partyArgs;
  }

  public InstantiateClause setPartyArgs(List<Expression> partyArgs) {
    this.partyArgs = partyArgs;
    return this;
  }

  public void unsetPartyArgs() {
    this.partyArgs = null;
  }

  /** Returns true if field partyArgs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartyArgs() {
    return this.partyArgs != null;
  }

  public void setPartyArgsIsSet(boolean value) {
    if (!value) {
      this.partyArgs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case EXP_ARGS:
      if (value == null) {
        unsetExpArgs();
      } else {
        setExpArgs((List<Expression>)value);
      }
      break;

    case PARTY_ARGS:
      if (value == null) {
        unsetPartyArgs();
      } else {
        setPartyArgs((List<Expression>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case EXP_ARGS:
      return getExpArgs();

    case PARTY_ARGS:
      return getPartyArgs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case EXP_ARGS:
      return isSetExpArgs();
    case PARTY_ARGS:
      return isSetPartyArgs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InstantiateClause)
      return this.equals((InstantiateClause)that);
    return false;
  }

  public boolean equals(InstantiateClause that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_expArgs = true && this.isSetExpArgs();
    boolean that_present_expArgs = true && that.isSetExpArgs();
    if (this_present_expArgs || that_present_expArgs) {
      if (!(this_present_expArgs && that_present_expArgs))
        return false;
      if (!this.expArgs.equals(that.expArgs))
        return false;
    }

    boolean this_present_partyArgs = true && this.isSetPartyArgs();
    boolean that_present_partyArgs = true && that.isSetPartyArgs();
    if (this_present_partyArgs || that_present_partyArgs) {
      if (!(this_present_partyArgs && that_present_partyArgs))
        return false;
      if (!this.partyArgs.equals(that.partyArgs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InstantiateClause other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InstantiateClause typedOther = (InstantiateClause)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpArgs()).compareTo(typedOther.isSetExpArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expArgs, typedOther.expArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartyArgs()).compareTo(typedOther.isSetPartyArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartyArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyArgs, typedOther.partyArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InstantiateClause(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expArgs:");
    if (this.expArgs == null) {
      sb.append("null");
    } else {
      sb.append(this.expArgs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partyArgs:");
    if (this.partyArgs == null) {
      sb.append("null");
    } else {
      sb.append(this.partyArgs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstantiateClauseStandardSchemeFactory implements SchemeFactory {
    public InstantiateClauseStandardScheme getScheme() {
      return new InstantiateClauseStandardScheme();
    }
  }

  private static class InstantiateClauseStandardScheme extends StandardScheme<InstantiateClause> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InstantiateClause struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXP_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.expArgs = new ArrayList<Expression>(_list50.size);
                for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                {
                  Expression _elem52; // required
                  _elem52 = new Expression();
                  _elem52.read(iprot);
                  struct.expArgs.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setExpArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTY_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
                struct.partyArgs = new ArrayList<Expression>(_list53.size);
                for (int _i54 = 0; _i54 < _list53.size; ++_i54)
                {
                  Expression _elem55; // required
                  _elem55 = new Expression();
                  _elem55.read(iprot);
                  struct.partyArgs.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setPartyArgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InstantiateClause struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.expArgs != null) {
        oprot.writeFieldBegin(EXP_ARGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.expArgs.size()));
          for (Expression _iter56 : struct.expArgs)
          {
            _iter56.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partyArgs != null) {
        oprot.writeFieldBegin(PARTY_ARGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partyArgs.size()));
          for (Expression _iter57 : struct.partyArgs)
          {
            _iter57.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstantiateClauseTupleSchemeFactory implements SchemeFactory {
    public InstantiateClauseTupleScheme getScheme() {
      return new InstantiateClauseTupleScheme();
    }
  }

  private static class InstantiateClauseTupleScheme extends TupleScheme<InstantiateClause> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InstantiateClause struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetExpArgs()) {
        optionals.set(1);
      }
      if (struct.isSetPartyArgs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetExpArgs()) {
        {
          oprot.writeI32(struct.expArgs.size());
          for (Expression _iter58 : struct.expArgs)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetPartyArgs()) {
        {
          oprot.writeI32(struct.partyArgs.size());
          for (Expression _iter59 : struct.partyArgs)
          {
            _iter59.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InstantiateClause struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.expArgs = new ArrayList<Expression>(_list60.size);
          for (int _i61 = 0; _i61 < _list60.size; ++_i61)
          {
            Expression _elem62; // required
            _elem62 = new Expression();
            _elem62.read(iprot);
            struct.expArgs.add(_elem62);
          }
        }
        struct.setExpArgsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partyArgs = new ArrayList<Expression>(_list63.size);
          for (int _i64 = 0; _i64 < _list63.size; ++_i64)
          {
            Expression _elem65; // required
            _elem65 = new Expression();
            _elem65.read(iprot);
            struct.partyArgs.add(_elem65);
          }
        }
        struct.setPartyArgsIsSet(true);
      }
    }
  }

}

