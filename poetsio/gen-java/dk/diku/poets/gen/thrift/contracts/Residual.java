/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Residual implements org.apache.thrift.TBase<Residual, Residual._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Residual");

  private static final org.apache.thrift.protocol.TField CURRENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTime", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESIDUAL_CLAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("residualClause", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResidualStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResidualTupleSchemeFactory());
  }

  public dk.diku.poets.gen.thrift.value.DateTime currentTime; // required
  public Clause residualClause; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT_TIME((short)1, "currentTime"),
    RESIDUAL_CLAUSE((short)2, "residualClause");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_TIME
          return CURRENT_TIME;
        case 2: // RESIDUAL_CLAUSE
          return RESIDUAL_CLAUSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("currentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.DateTime.class)));
    tmpMap.put(_Fields.RESIDUAL_CLAUSE, new org.apache.thrift.meta_data.FieldMetaData("residualClause", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Clause.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Residual.class, metaDataMap);
  }

  public Residual() {
  }

  public Residual(
    dk.diku.poets.gen.thrift.value.DateTime currentTime,
    Clause residualClause)
  {
    this();
    this.currentTime = currentTime;
    this.residualClause = residualClause;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Residual(Residual other) {
    if (other.isSetCurrentTime()) {
      this.currentTime = new dk.diku.poets.gen.thrift.value.DateTime(other.currentTime);
    }
    if (other.isSetResidualClause()) {
      this.residualClause = new Clause(other.residualClause);
    }
  }

  public Residual deepCopy() {
    return new Residual(this);
  }

  @Override
  public void clear() {
    this.currentTime = null;
    this.residualClause = null;
  }

  public dk.diku.poets.gen.thrift.value.DateTime getCurrentTime() {
    return this.currentTime;
  }

  public Residual setCurrentTime(dk.diku.poets.gen.thrift.value.DateTime currentTime) {
    this.currentTime = currentTime;
    return this;
  }

  public void unsetCurrentTime() {
    this.currentTime = null;
  }

  /** Returns true if field currentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return this.currentTime != null;
  }

  public void setCurrentTimeIsSet(boolean value) {
    if (!value) {
      this.currentTime = null;
    }
  }

  public Clause getResidualClause() {
    return this.residualClause;
  }

  public Residual setResidualClause(Clause residualClause) {
    this.residualClause = residualClause;
    return this;
  }

  public void unsetResidualClause() {
    this.residualClause = null;
  }

  /** Returns true if field residualClause is set (has been assigned a value) and false otherwise */
  public boolean isSetResidualClause() {
    return this.residualClause != null;
  }

  public void setResidualClauseIsSet(boolean value) {
    if (!value) {
      this.residualClause = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENT_TIME:
      if (value == null) {
        unsetCurrentTime();
      } else {
        setCurrentTime((dk.diku.poets.gen.thrift.value.DateTime)value);
      }
      break;

    case RESIDUAL_CLAUSE:
      if (value == null) {
        unsetResidualClause();
      } else {
        setResidualClause((Clause)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_TIME:
      return getCurrentTime();

    case RESIDUAL_CLAUSE:
      return getResidualClause();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_TIME:
      return isSetCurrentTime();
    case RESIDUAL_CLAUSE:
      return isSetResidualClause();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Residual)
      return this.equals((Residual)that);
    return false;
  }

  public boolean equals(Residual that) {
    if (that == null)
      return false;

    boolean this_present_currentTime = true && this.isSetCurrentTime();
    boolean that_present_currentTime = true && that.isSetCurrentTime();
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (!this.currentTime.equals(that.currentTime))
        return false;
    }

    boolean this_present_residualClause = true && this.isSetResidualClause();
    boolean that_present_residualClause = true && that.isSetResidualClause();
    if (this_present_residualClause || that_present_residualClause) {
      if (!(this_present_residualClause && that_present_residualClause))
        return false;
      if (!this.residualClause.equals(that.residualClause))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Residual other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Residual typedOther = (Residual)other;

    lastComparison = Boolean.valueOf(isSetCurrentTime()).compareTo(typedOther.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTime, typedOther.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResidualClause()).compareTo(typedOther.isSetResidualClause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResidualClause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.residualClause, typedOther.residualClause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Residual(");
    boolean first = true;

    sb.append("currentTime:");
    if (this.currentTime == null) {
      sb.append("null");
    } else {
      sb.append(this.currentTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("residualClause:");
    if (this.residualClause == null) {
      sb.append("null");
    } else {
      sb.append(this.residualClause);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResidualStandardSchemeFactory implements SchemeFactory {
    public ResidualStandardScheme getScheme() {
      return new ResidualStandardScheme();
    }
  }

  private static class ResidualStandardScheme extends StandardScheme<Residual> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Residual struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentTime = new dk.diku.poets.gen.thrift.value.DateTime();
              struct.currentTime.read(iprot);
              struct.setCurrentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESIDUAL_CLAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.residualClause = new Clause();
              struct.residualClause.read(iprot);
              struct.setResidualClauseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Residual struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currentTime != null) {
        oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
        struct.currentTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.residualClause != null) {
        oprot.writeFieldBegin(RESIDUAL_CLAUSE_FIELD_DESC);
        struct.residualClause.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResidualTupleSchemeFactory implements SchemeFactory {
    public ResidualTupleScheme getScheme() {
      return new ResidualTupleScheme();
    }
  }

  private static class ResidualTupleScheme extends TupleScheme<Residual> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Residual struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrentTime()) {
        optionals.set(0);
      }
      if (struct.isSetResidualClause()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCurrentTime()) {
        struct.currentTime.write(oprot);
      }
      if (struct.isSetResidualClause()) {
        struct.residualClause.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Residual struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.currentTime = new dk.diku.poets.gen.thrift.value.DateTime();
        struct.currentTime.read(iprot);
        struct.setCurrentTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.residualClause = new Clause();
        struct.residualClause.read(iprot);
        struct.setResidualClauseIsSet(true);
      }
    }
  }

}

