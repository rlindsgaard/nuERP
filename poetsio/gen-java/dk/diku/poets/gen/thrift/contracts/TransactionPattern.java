/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransactionPattern implements org.apache.thrift.TBase<TransactionPattern, TransactionPattern._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionPattern");

  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSACTION_KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionKind", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("responsible", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TRANSACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("predicate", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("deadline", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionPatternStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionPatternTupleSchemeFactory());
  }

  public int contractId; // required
  public String description; // required
  /**
   * 
   * @see TransactionKind
   */
  public TransactionKind transactionKind; // required
  public dk.diku.poets.gen.thrift.value.Value responsible; // required
  public String transactionType; // required
  public Expression predicate; // required
  public Deadline deadline; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_ID((short)1, "contractId"),
    DESCRIPTION((short)2, "description"),
    /**
     * 
     * @see TransactionKind
     */
    TRANSACTION_KIND((short)3, "transactionKind"),
    RESPONSIBLE((short)4, "responsible"),
    TRANSACTION_TYPE((short)5, "transactionType"),
    PREDICATE((short)6, "predicate"),
    DEADLINE((short)7, "deadline");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_ID
          return CONTRACT_ID;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // TRANSACTION_KIND
          return TRANSACTION_KIND;
        case 4: // RESPONSIBLE
          return RESPONSIBLE;
        case 5: // TRANSACTION_TYPE
          return TRANSACTION_TYPE;
        case 6: // PREDICATE
          return PREDICATE;
        case 7: // DEADLINE
          return DEADLINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTRACTID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.DESCRIPTION,_Fields.RESPONSIBLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "ContractId")));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSACTION_KIND, new org.apache.thrift.meta_data.FieldMetaData("transactionKind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionKind.class)));
    tmpMap.put(_Fields.RESPONSIBLE, new org.apache.thrift.meta_data.FieldMetaData("responsible", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Value.class)));
    tmpMap.put(_Fields.TRANSACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transactionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RecordName")));
    tmpMap.put(_Fields.PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("predicate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Expression.class)));
    tmpMap.put(_Fields.DEADLINE, new org.apache.thrift.meta_data.FieldMetaData("deadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Deadline.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionPattern.class, metaDataMap);
  }

  public TransactionPattern() {
  }

  public TransactionPattern(
    int contractId,
    TransactionKind transactionKind,
    String transactionType,
    Expression predicate,
    Deadline deadline)
  {
    this();
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.transactionKind = transactionKind;
    this.transactionType = transactionType;
    this.predicate = predicate;
    this.deadline = deadline;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionPattern(TransactionPattern other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.contractId = other.contractId;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetTransactionKind()) {
      this.transactionKind = other.transactionKind;
    }
    if (other.isSetResponsible()) {
      this.responsible = new dk.diku.poets.gen.thrift.value.Value(other.responsible);
    }
    if (other.isSetTransactionType()) {
      this.transactionType = other.transactionType;
    }
    if (other.isSetPredicate()) {
      this.predicate = new Expression(other.predicate);
    }
    if (other.isSetDeadline()) {
      this.deadline = new Deadline(other.deadline);
    }
  }

  public TransactionPattern deepCopy() {
    return new TransactionPattern(this);
  }

  @Override
  public void clear() {
    setContractIdIsSet(false);
    this.contractId = 0;
    this.description = null;
    this.transactionKind = null;
    this.responsible = null;
    this.transactionType = null;
    this.predicate = null;
    this.deadline = null;
  }

  public int getContractId() {
    return this.contractId;
  }

  public TransactionPattern setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bit_vector.clear(__CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return __isset_bit_vector.get(__CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bit_vector.set(__CONTRACTID_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public TransactionPattern setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 
   * @see TransactionKind
   */
  public TransactionKind getTransactionKind() {
    return this.transactionKind;
  }

  /**
   * 
   * @see TransactionKind
   */
  public TransactionPattern setTransactionKind(TransactionKind transactionKind) {
    this.transactionKind = transactionKind;
    return this;
  }

  public void unsetTransactionKind() {
    this.transactionKind = null;
  }

  /** Returns true if field transactionKind is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionKind() {
    return this.transactionKind != null;
  }

  public void setTransactionKindIsSet(boolean value) {
    if (!value) {
      this.transactionKind = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.Value getResponsible() {
    return this.responsible;
  }

  public TransactionPattern setResponsible(dk.diku.poets.gen.thrift.value.Value responsible) {
    this.responsible = responsible;
    return this;
  }

  public void unsetResponsible() {
    this.responsible = null;
  }

  /** Returns true if field responsible is set (has been assigned a value) and false otherwise */
  public boolean isSetResponsible() {
    return this.responsible != null;
  }

  public void setResponsibleIsSet(boolean value) {
    if (!value) {
      this.responsible = null;
    }
  }

  public String getTransactionType() {
    return this.transactionType;
  }

  public TransactionPattern setTransactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  public void unsetTransactionType() {
    this.transactionType = null;
  }

  /** Returns true if field transactionType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionType() {
    return this.transactionType != null;
  }

  public void setTransactionTypeIsSet(boolean value) {
    if (!value) {
      this.transactionType = null;
    }
  }

  public Expression getPredicate() {
    return this.predicate;
  }

  public TransactionPattern setPredicate(Expression predicate) {
    this.predicate = predicate;
    return this;
  }

  public void unsetPredicate() {
    this.predicate = null;
  }

  /** Returns true if field predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetPredicate() {
    return this.predicate != null;
  }

  public void setPredicateIsSet(boolean value) {
    if (!value) {
      this.predicate = null;
    }
  }

  public Deadline getDeadline() {
    return this.deadline;
  }

  public TransactionPattern setDeadline(Deadline deadline) {
    this.deadline = deadline;
    return this;
  }

  public void unsetDeadline() {
    this.deadline = null;
  }

  /** Returns true if field deadline is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadline() {
    return this.deadline != null;
  }

  public void setDeadlineIsSet(boolean value) {
    if (!value) {
      this.deadline = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case TRANSACTION_KIND:
      if (value == null) {
        unsetTransactionKind();
      } else {
        setTransactionKind((TransactionKind)value);
      }
      break;

    case RESPONSIBLE:
      if (value == null) {
        unsetResponsible();
      } else {
        setResponsible((dk.diku.poets.gen.thrift.value.Value)value);
      }
      break;

    case TRANSACTION_TYPE:
      if (value == null) {
        unsetTransactionType();
      } else {
        setTransactionType((String)value);
      }
      break;

    case PREDICATE:
      if (value == null) {
        unsetPredicate();
      } else {
        setPredicate((Expression)value);
      }
      break;

    case DEADLINE:
      if (value == null) {
        unsetDeadline();
      } else {
        setDeadline((Deadline)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case DESCRIPTION:
      return getDescription();

    case TRANSACTION_KIND:
      return getTransactionKind();

    case RESPONSIBLE:
      return getResponsible();

    case TRANSACTION_TYPE:
      return getTransactionType();

    case PREDICATE:
      return getPredicate();

    case DEADLINE:
      return getDeadline();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_ID:
      return isSetContractId();
    case DESCRIPTION:
      return isSetDescription();
    case TRANSACTION_KIND:
      return isSetTransactionKind();
    case RESPONSIBLE:
      return isSetResponsible();
    case TRANSACTION_TYPE:
      return isSetTransactionType();
    case PREDICATE:
      return isSetPredicate();
    case DEADLINE:
      return isSetDeadline();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionPattern)
      return this.equals((TransactionPattern)that);
    return false;
  }

  public boolean equals(TransactionPattern that) {
    if (that == null)
      return false;

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_transactionKind = true && this.isSetTransactionKind();
    boolean that_present_transactionKind = true && that.isSetTransactionKind();
    if (this_present_transactionKind || that_present_transactionKind) {
      if (!(this_present_transactionKind && that_present_transactionKind))
        return false;
      if (!this.transactionKind.equals(that.transactionKind))
        return false;
    }

    boolean this_present_responsible = true && this.isSetResponsible();
    boolean that_present_responsible = true && that.isSetResponsible();
    if (this_present_responsible || that_present_responsible) {
      if (!(this_present_responsible && that_present_responsible))
        return false;
      if (!this.responsible.equals(that.responsible))
        return false;
    }

    boolean this_present_transactionType = true && this.isSetTransactionType();
    boolean that_present_transactionType = true && that.isSetTransactionType();
    if (this_present_transactionType || that_present_transactionType) {
      if (!(this_present_transactionType && that_present_transactionType))
        return false;
      if (!this.transactionType.equals(that.transactionType))
        return false;
    }

    boolean this_present_predicate = true && this.isSetPredicate();
    boolean that_present_predicate = true && that.isSetPredicate();
    if (this_present_predicate || that_present_predicate) {
      if (!(this_present_predicate && that_present_predicate))
        return false;
      if (!this.predicate.equals(that.predicate))
        return false;
    }

    boolean this_present_deadline = true && this.isSetDeadline();
    boolean that_present_deadline = true && that.isSetDeadline();
    if (this_present_deadline || that_present_deadline) {
      if (!(this_present_deadline && that_present_deadline))
        return false;
      if (!this.deadline.equals(that.deadline))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TransactionPattern other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransactionPattern typedOther = (TransactionPattern)other;

    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(typedOther.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, typedOther.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionKind()).compareTo(typedOther.isSetTransactionKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionKind, typedOther.transactionKind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponsible()).compareTo(typedOther.isSetResponsible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponsible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responsible, typedOther.responsible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionType()).compareTo(typedOther.isSetTransactionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionType, typedOther.transactionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredicate()).compareTo(typedOther.isSetPredicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predicate, typedOther.predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeadline()).compareTo(typedOther.isSetDeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadline, typedOther.deadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionPattern(");
    boolean first = true;

    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("transactionKind:");
    if (this.transactionKind == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionKind);
    }
    first = false;
    if (isSetResponsible()) {
      if (!first) sb.append(", ");
      sb.append("responsible:");
      if (this.responsible == null) {
        sb.append("null");
      } else {
        sb.append(this.responsible);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("transactionType:");
    if (this.transactionType == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predicate:");
    if (this.predicate == null) {
      sb.append("null");
    } else {
      sb.append(this.predicate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deadline:");
    if (this.deadline == null) {
      sb.append("null");
    } else {
      sb.append(this.deadline);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionPatternStandardSchemeFactory implements SchemeFactory {
    public TransactionPatternStandardScheme getScheme() {
      return new TransactionPatternStandardScheme();
    }
  }

  private static class TransactionPatternStandardScheme extends StandardScheme<TransactionPattern> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionPattern struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSACTION_KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transactionKind = TransactionKind.findByValue(iprot.readI32());
              struct.setTransactionKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESPONSIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.responsible = new dk.diku.poets.gen.thrift.value.Value();
              struct.responsible.read(iprot);
              struct.setResponsibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRANSACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionType = iprot.readString();
              struct.setTransactionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predicate = new Expression();
              struct.predicate.read(iprot);
              struct.setPredicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deadline = new Deadline();
              struct.deadline.read(iprot);
              struct.setDeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionPattern struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transactionKind != null) {
        oprot.writeFieldBegin(TRANSACTION_KIND_FIELD_DESC);
        oprot.writeI32(struct.transactionKind.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.responsible != null) {
        if (struct.isSetResponsible()) {
          oprot.writeFieldBegin(RESPONSIBLE_FIELD_DESC);
          struct.responsible.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transactionType != null) {
        oprot.writeFieldBegin(TRANSACTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.transactionType);
        oprot.writeFieldEnd();
      }
      if (struct.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        struct.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.deadline != null) {
        oprot.writeFieldBegin(DEADLINE_FIELD_DESC);
        struct.deadline.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionPatternTupleSchemeFactory implements SchemeFactory {
    public TransactionPatternTupleScheme getScheme() {
      return new TransactionPatternTupleScheme();
    }
  }

  private static class TransactionPatternTupleScheme extends TupleScheme<TransactionPattern> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionPattern struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractId()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetTransactionKind()) {
        optionals.set(2);
      }
      if (struct.isSetResponsible()) {
        optionals.set(3);
      }
      if (struct.isSetTransactionType()) {
        optionals.set(4);
      }
      if (struct.isSetPredicate()) {
        optionals.set(5);
      }
      if (struct.isSetDeadline()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetTransactionKind()) {
        oprot.writeI32(struct.transactionKind.getValue());
      }
      if (struct.isSetResponsible()) {
        struct.responsible.write(oprot);
      }
      if (struct.isSetTransactionType()) {
        oprot.writeString(struct.transactionType);
      }
      if (struct.isSetPredicate()) {
        struct.predicate.write(oprot);
      }
      if (struct.isSetDeadline()) {
        struct.deadline.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionPattern struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transactionKind = TransactionKind.findByValue(iprot.readI32());
        struct.setTransactionKindIsSet(true);
      }
      if (incoming.get(3)) {
        struct.responsible = new dk.diku.poets.gen.thrift.value.Value();
        struct.responsible.read(iprot);
        struct.setResponsibleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.transactionType = iprot.readString();
        struct.setTransactionTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.predicate = new Expression();
        struct.predicate.read(iprot);
        struct.setPredicateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deadline = new Deadline();
        struct.deadline.read(iprot);
        struct.setDeadlineIsSet(true);
      }
    }
  }

}

