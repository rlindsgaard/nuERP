/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Claus implements org.apache.thrift.TBase<Claus, Claus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Claus");

  private static final org.apache.thrift.protocol.TField FULFILMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fulfilment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField OBLIGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("obligation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_CHOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("externalChoice", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField INTERNAL_CHOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("internalChoice", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ANDC_FIELD_DESC = new org.apache.thrift.protocol.TField("andc", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ORC_FIELD_DESC = new org.apache.thrift.protocol.TField("orc", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CASEC_FIELD_DESC = new org.apache.thrift.protocol.TField("casec", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField INSTANTIATE_FIELD_DESC = new org.apache.thrift.protocol.TField("instantiate", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClausStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClausTupleSchemeFactory());
  }

  public FulfilmentClause fulfilment; // required
  public ObligationClause obligation; // required
  public ExternalChoiceClause externalChoice; // required
  public InternalChoiceClause internalChoice; // required
  public AndClause andc; // required
  public OrClause orc; // required
  public CaseClause casec; // required
  public InstantiateClause instantiate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FULFILMENT((short)1, "fulfilment"),
    OBLIGATION((short)2, "obligation"),
    EXTERNAL_CHOICE((short)3, "externalChoice"),
    INTERNAL_CHOICE((short)4, "internalChoice"),
    ANDC((short)5, "andc"),
    ORC((short)6, "orc"),
    CASEC((short)7, "casec"),
    INSTANTIATE((short)8, "instantiate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FULFILMENT
          return FULFILMENT;
        case 2: // OBLIGATION
          return OBLIGATION;
        case 3: // EXTERNAL_CHOICE
          return EXTERNAL_CHOICE;
        case 4: // INTERNAL_CHOICE
          return INTERNAL_CHOICE;
        case 5: // ANDC
          return ANDC;
        case 6: // ORC
          return ORC;
        case 7: // CASEC
          return CASEC;
        case 8: // INSTANTIATE
          return INSTANTIATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FULFILMENT,_Fields.OBLIGATION,_Fields.EXTERNAL_CHOICE,_Fields.INTERNAL_CHOICE,_Fields.ANDC,_Fields.ORC,_Fields.CASEC,_Fields.INSTANTIATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FULFILMENT, new org.apache.thrift.meta_data.FieldMetaData("fulfilment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FulfilmentClause.class)));
    tmpMap.put(_Fields.OBLIGATION, new org.apache.thrift.meta_data.FieldMetaData("obligation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObligationClause.class)));
    tmpMap.put(_Fields.EXTERNAL_CHOICE, new org.apache.thrift.meta_data.FieldMetaData("externalChoice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExternalChoiceClause.class)));
    tmpMap.put(_Fields.INTERNAL_CHOICE, new org.apache.thrift.meta_data.FieldMetaData("internalChoice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalChoiceClause.class)));
    tmpMap.put(_Fields.ANDC, new org.apache.thrift.meta_data.FieldMetaData("andc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AndClause.class)));
    tmpMap.put(_Fields.ORC, new org.apache.thrift.meta_data.FieldMetaData("orc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrClause.class)));
    tmpMap.put(_Fields.CASEC, new org.apache.thrift.meta_data.FieldMetaData("casec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CaseClause.class)));
    tmpMap.put(_Fields.INSTANTIATE, new org.apache.thrift.meta_data.FieldMetaData("instantiate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstantiateClause.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Claus.class, metaDataMap);
  }

  public Claus() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Claus(Claus other) {
    if (other.isSetFulfilment()) {
      this.fulfilment = new FulfilmentClause(other.fulfilment);
    }
    if (other.isSetObligation()) {
      this.obligation = new ObligationClause(other.obligation);
    }
    if (other.isSetExternalChoice()) {
      this.externalChoice = new ExternalChoiceClause(other.externalChoice);
    }
    if (other.isSetInternalChoice()) {
      this.internalChoice = new InternalChoiceClause(other.internalChoice);
    }
    if (other.isSetAndc()) {
      this.andc = new AndClause(other.andc);
    }
    if (other.isSetOrc()) {
      this.orc = new OrClause(other.orc);
    }
    if (other.isSetCasec()) {
      this.casec = new CaseClause(other.casec);
    }
    if (other.isSetInstantiate()) {
      this.instantiate = new InstantiateClause(other.instantiate);
    }
  }

  public Claus deepCopy() {
    return new Claus(this);
  }

  @Override
  public void clear() {
    this.fulfilment = null;
    this.obligation = null;
    this.externalChoice = null;
    this.internalChoice = null;
    this.andc = null;
    this.orc = null;
    this.casec = null;
    this.instantiate = null;
  }

  public FulfilmentClause getFulfilment() {
    return this.fulfilment;
  }

  public Claus setFulfilment(FulfilmentClause fulfilment) {
    this.fulfilment = fulfilment;
    return this;
  }

  public void unsetFulfilment() {
    this.fulfilment = null;
  }

  /** Returns true if field fulfilment is set (has been assigned a value) and false otherwise */
  public boolean isSetFulfilment() {
    return this.fulfilment != null;
  }

  public void setFulfilmentIsSet(boolean value) {
    if (!value) {
      this.fulfilment = null;
    }
  }

  public ObligationClause getObligation() {
    return this.obligation;
  }

  public Claus setObligation(ObligationClause obligation) {
    this.obligation = obligation;
    return this;
  }

  public void unsetObligation() {
    this.obligation = null;
  }

  /** Returns true if field obligation is set (has been assigned a value) and false otherwise */
  public boolean isSetObligation() {
    return this.obligation != null;
  }

  public void setObligationIsSet(boolean value) {
    if (!value) {
      this.obligation = null;
    }
  }

  public ExternalChoiceClause getExternalChoice() {
    return this.externalChoice;
  }

  public Claus setExternalChoice(ExternalChoiceClause externalChoice) {
    this.externalChoice = externalChoice;
    return this;
  }

  public void unsetExternalChoice() {
    this.externalChoice = null;
  }

  /** Returns true if field externalChoice is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalChoice() {
    return this.externalChoice != null;
  }

  public void setExternalChoiceIsSet(boolean value) {
    if (!value) {
      this.externalChoice = null;
    }
  }

  public InternalChoiceClause getInternalChoice() {
    return this.internalChoice;
  }

  public Claus setInternalChoice(InternalChoiceClause internalChoice) {
    this.internalChoice = internalChoice;
    return this;
  }

  public void unsetInternalChoice() {
    this.internalChoice = null;
  }

  /** Returns true if field internalChoice is set (has been assigned a value) and false otherwise */
  public boolean isSetInternalChoice() {
    return this.internalChoice != null;
  }

  public void setInternalChoiceIsSet(boolean value) {
    if (!value) {
      this.internalChoice = null;
    }
  }

  public AndClause getAndc() {
    return this.andc;
  }

  public Claus setAndc(AndClause andc) {
    this.andc = andc;
    return this;
  }

  public void unsetAndc() {
    this.andc = null;
  }

  /** Returns true if field andc is set (has been assigned a value) and false otherwise */
  public boolean isSetAndc() {
    return this.andc != null;
  }

  public void setAndcIsSet(boolean value) {
    if (!value) {
      this.andc = null;
    }
  }

  public OrClause getOrc() {
    return this.orc;
  }

  public Claus setOrc(OrClause orc) {
    this.orc = orc;
    return this;
  }

  public void unsetOrc() {
    this.orc = null;
  }

  /** Returns true if field orc is set (has been assigned a value) and false otherwise */
  public boolean isSetOrc() {
    return this.orc != null;
  }

  public void setOrcIsSet(boolean value) {
    if (!value) {
      this.orc = null;
    }
  }

  public CaseClause getCasec() {
    return this.casec;
  }

  public Claus setCasec(CaseClause casec) {
    this.casec = casec;
    return this;
  }

  public void unsetCasec() {
    this.casec = null;
  }

  /** Returns true if field casec is set (has been assigned a value) and false otherwise */
  public boolean isSetCasec() {
    return this.casec != null;
  }

  public void setCasecIsSet(boolean value) {
    if (!value) {
      this.casec = null;
    }
  }

  public InstantiateClause getInstantiate() {
    return this.instantiate;
  }

  public Claus setInstantiate(InstantiateClause instantiate) {
    this.instantiate = instantiate;
    return this;
  }

  public void unsetInstantiate() {
    this.instantiate = null;
  }

  /** Returns true if field instantiate is set (has been assigned a value) and false otherwise */
  public boolean isSetInstantiate() {
    return this.instantiate != null;
  }

  public void setInstantiateIsSet(boolean value) {
    if (!value) {
      this.instantiate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FULFILMENT:
      if (value == null) {
        unsetFulfilment();
      } else {
        setFulfilment((FulfilmentClause)value);
      }
      break;

    case OBLIGATION:
      if (value == null) {
        unsetObligation();
      } else {
        setObligation((ObligationClause)value);
      }
      break;

    case EXTERNAL_CHOICE:
      if (value == null) {
        unsetExternalChoice();
      } else {
        setExternalChoice((ExternalChoiceClause)value);
      }
      break;

    case INTERNAL_CHOICE:
      if (value == null) {
        unsetInternalChoice();
      } else {
        setInternalChoice((InternalChoiceClause)value);
      }
      break;

    case ANDC:
      if (value == null) {
        unsetAndc();
      } else {
        setAndc((AndClause)value);
      }
      break;

    case ORC:
      if (value == null) {
        unsetOrc();
      } else {
        setOrc((OrClause)value);
      }
      break;

    case CASEC:
      if (value == null) {
        unsetCasec();
      } else {
        setCasec((CaseClause)value);
      }
      break;

    case INSTANTIATE:
      if (value == null) {
        unsetInstantiate();
      } else {
        setInstantiate((InstantiateClause)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FULFILMENT:
      return getFulfilment();

    case OBLIGATION:
      return getObligation();

    case EXTERNAL_CHOICE:
      return getExternalChoice();

    case INTERNAL_CHOICE:
      return getInternalChoice();

    case ANDC:
      return getAndc();

    case ORC:
      return getOrc();

    case CASEC:
      return getCasec();

    case INSTANTIATE:
      return getInstantiate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FULFILMENT:
      return isSetFulfilment();
    case OBLIGATION:
      return isSetObligation();
    case EXTERNAL_CHOICE:
      return isSetExternalChoice();
    case INTERNAL_CHOICE:
      return isSetInternalChoice();
    case ANDC:
      return isSetAndc();
    case ORC:
      return isSetOrc();
    case CASEC:
      return isSetCasec();
    case INSTANTIATE:
      return isSetInstantiate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Claus)
      return this.equals((Claus)that);
    return false;
  }

  public boolean equals(Claus that) {
    if (that == null)
      return false;

    boolean this_present_fulfilment = true && this.isSetFulfilment();
    boolean that_present_fulfilment = true && that.isSetFulfilment();
    if (this_present_fulfilment || that_present_fulfilment) {
      if (!(this_present_fulfilment && that_present_fulfilment))
        return false;
      if (!this.fulfilment.equals(that.fulfilment))
        return false;
    }

    boolean this_present_obligation = true && this.isSetObligation();
    boolean that_present_obligation = true && that.isSetObligation();
    if (this_present_obligation || that_present_obligation) {
      if (!(this_present_obligation && that_present_obligation))
        return false;
      if (!this.obligation.equals(that.obligation))
        return false;
    }

    boolean this_present_externalChoice = true && this.isSetExternalChoice();
    boolean that_present_externalChoice = true && that.isSetExternalChoice();
    if (this_present_externalChoice || that_present_externalChoice) {
      if (!(this_present_externalChoice && that_present_externalChoice))
        return false;
      if (!this.externalChoice.equals(that.externalChoice))
        return false;
    }

    boolean this_present_internalChoice = true && this.isSetInternalChoice();
    boolean that_present_internalChoice = true && that.isSetInternalChoice();
    if (this_present_internalChoice || that_present_internalChoice) {
      if (!(this_present_internalChoice && that_present_internalChoice))
        return false;
      if (!this.internalChoice.equals(that.internalChoice))
        return false;
    }

    boolean this_present_andc = true && this.isSetAndc();
    boolean that_present_andc = true && that.isSetAndc();
    if (this_present_andc || that_present_andc) {
      if (!(this_present_andc && that_present_andc))
        return false;
      if (!this.andc.equals(that.andc))
        return false;
    }

    boolean this_present_orc = true && this.isSetOrc();
    boolean that_present_orc = true && that.isSetOrc();
    if (this_present_orc || that_present_orc) {
      if (!(this_present_orc && that_present_orc))
        return false;
      if (!this.orc.equals(that.orc))
        return false;
    }

    boolean this_present_casec = true && this.isSetCasec();
    boolean that_present_casec = true && that.isSetCasec();
    if (this_present_casec || that_present_casec) {
      if (!(this_present_casec && that_present_casec))
        return false;
      if (!this.casec.equals(that.casec))
        return false;
    }

    boolean this_present_instantiate = true && this.isSetInstantiate();
    boolean that_present_instantiate = true && that.isSetInstantiate();
    if (this_present_instantiate || that_present_instantiate) {
      if (!(this_present_instantiate && that_present_instantiate))
        return false;
      if (!this.instantiate.equals(that.instantiate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Claus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Claus typedOther = (Claus)other;

    lastComparison = Boolean.valueOf(isSetFulfilment()).compareTo(typedOther.isSetFulfilment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFulfilment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fulfilment, typedOther.fulfilment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObligation()).compareTo(typedOther.isSetObligation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObligation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obligation, typedOther.obligation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalChoice()).compareTo(typedOther.isSetExternalChoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalChoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalChoice, typedOther.externalChoice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInternalChoice()).compareTo(typedOther.isSetInternalChoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternalChoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalChoice, typedOther.internalChoice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAndc()).compareTo(typedOther.isSetAndc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAndc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.andc, typedOther.andc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrc()).compareTo(typedOther.isSetOrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orc, typedOther.orc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCasec()).compareTo(typedOther.isSetCasec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCasec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.casec, typedOther.casec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstantiate()).compareTo(typedOther.isSetInstantiate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstantiate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instantiate, typedOther.instantiate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Claus(");
    boolean first = true;

    if (isSetFulfilment()) {
      sb.append("fulfilment:");
      if (this.fulfilment == null) {
        sb.append("null");
      } else {
        sb.append(this.fulfilment);
      }
      first = false;
    }
    if (isSetObligation()) {
      if (!first) sb.append(", ");
      sb.append("obligation:");
      if (this.obligation == null) {
        sb.append("null");
      } else {
        sb.append(this.obligation);
      }
      first = false;
    }
    if (isSetExternalChoice()) {
      if (!first) sb.append(", ");
      sb.append("externalChoice:");
      if (this.externalChoice == null) {
        sb.append("null");
      } else {
        sb.append(this.externalChoice);
      }
      first = false;
    }
    if (isSetInternalChoice()) {
      if (!first) sb.append(", ");
      sb.append("internalChoice:");
      if (this.internalChoice == null) {
        sb.append("null");
      } else {
        sb.append(this.internalChoice);
      }
      first = false;
    }
    if (isSetAndc()) {
      if (!first) sb.append(", ");
      sb.append("andc:");
      if (this.andc == null) {
        sb.append("null");
      } else {
        sb.append(this.andc);
      }
      first = false;
    }
    if (isSetOrc()) {
      if (!first) sb.append(", ");
      sb.append("orc:");
      if (this.orc == null) {
        sb.append("null");
      } else {
        sb.append(this.orc);
      }
      first = false;
    }
    if (isSetCasec()) {
      if (!first) sb.append(", ");
      sb.append("casec:");
      if (this.casec == null) {
        sb.append("null");
      } else {
        sb.append(this.casec);
      }
      first = false;
    }
    if (isSetInstantiate()) {
      if (!first) sb.append(", ");
      sb.append("instantiate:");
      if (this.instantiate == null) {
        sb.append("null");
      } else {
        sb.append(this.instantiate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClausStandardSchemeFactory implements SchemeFactory {
    public ClausStandardScheme getScheme() {
      return new ClausStandardScheme();
    }
  }

  private static class ClausStandardScheme extends StandardScheme<Claus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Claus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FULFILMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fulfilment = new FulfilmentClause();
              struct.fulfilment.read(iprot);
              struct.setFulfilmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBLIGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.obligation = new ObligationClause();
              struct.obligation.read(iprot);
              struct.setObligationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERNAL_CHOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.externalChoice = new ExternalChoiceClause();
              struct.externalChoice.read(iprot);
              struct.setExternalChoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERNAL_CHOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.internalChoice = new InternalChoiceClause();
              struct.internalChoice.read(iprot);
              struct.setInternalChoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANDC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.andc = new AndClause();
              struct.andc.read(iprot);
              struct.setAndcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orc = new OrClause();
              struct.orc.read(iprot);
              struct.setOrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CASEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.casec = new CaseClause();
              struct.casec.read(iprot);
              struct.setCasecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSTANTIATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instantiate = new InstantiateClause();
              struct.instantiate.read(iprot);
              struct.setInstantiateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Claus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fulfilment != null) {
        if (struct.isSetFulfilment()) {
          oprot.writeFieldBegin(FULFILMENT_FIELD_DESC);
          struct.fulfilment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.obligation != null) {
        if (struct.isSetObligation()) {
          oprot.writeFieldBegin(OBLIGATION_FIELD_DESC);
          struct.obligation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalChoice != null) {
        if (struct.isSetExternalChoice()) {
          oprot.writeFieldBegin(EXTERNAL_CHOICE_FIELD_DESC);
          struct.externalChoice.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.internalChoice != null) {
        if (struct.isSetInternalChoice()) {
          oprot.writeFieldBegin(INTERNAL_CHOICE_FIELD_DESC);
          struct.internalChoice.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.andc != null) {
        if (struct.isSetAndc()) {
          oprot.writeFieldBegin(ANDC_FIELD_DESC);
          struct.andc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orc != null) {
        if (struct.isSetOrc()) {
          oprot.writeFieldBegin(ORC_FIELD_DESC);
          struct.orc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.casec != null) {
        if (struct.isSetCasec()) {
          oprot.writeFieldBegin(CASEC_FIELD_DESC);
          struct.casec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instantiate != null) {
        if (struct.isSetInstantiate()) {
          oprot.writeFieldBegin(INSTANTIATE_FIELD_DESC);
          struct.instantiate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClausTupleSchemeFactory implements SchemeFactory {
    public ClausTupleScheme getScheme() {
      return new ClausTupleScheme();
    }
  }

  private static class ClausTupleScheme extends TupleScheme<Claus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Claus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFulfilment()) {
        optionals.set(0);
      }
      if (struct.isSetObligation()) {
        optionals.set(1);
      }
      if (struct.isSetExternalChoice()) {
        optionals.set(2);
      }
      if (struct.isSetInternalChoice()) {
        optionals.set(3);
      }
      if (struct.isSetAndc()) {
        optionals.set(4);
      }
      if (struct.isSetOrc()) {
        optionals.set(5);
      }
      if (struct.isSetCasec()) {
        optionals.set(6);
      }
      if (struct.isSetInstantiate()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetFulfilment()) {
        struct.fulfilment.write(oprot);
      }
      if (struct.isSetObligation()) {
        struct.obligation.write(oprot);
      }
      if (struct.isSetExternalChoice()) {
        struct.externalChoice.write(oprot);
      }
      if (struct.isSetInternalChoice()) {
        struct.internalChoice.write(oprot);
      }
      if (struct.isSetAndc()) {
        struct.andc.write(oprot);
      }
      if (struct.isSetOrc()) {
        struct.orc.write(oprot);
      }
      if (struct.isSetCasec()) {
        struct.casec.write(oprot);
      }
      if (struct.isSetInstantiate()) {
        struct.instantiate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Claus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.fulfilment = new FulfilmentClause();
        struct.fulfilment.read(iprot);
        struct.setFulfilmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.obligation = new ObligationClause();
        struct.obligation.read(iprot);
        struct.setObligationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.externalChoice = new ExternalChoiceClause();
        struct.externalChoice.read(iprot);
        struct.setExternalChoiceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.internalChoice = new InternalChoiceClause();
        struct.internalChoice.read(iprot);
        struct.setInternalChoiceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.andc = new AndClause();
        struct.andc.read(iprot);
        struct.setAndcIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orc = new OrClause();
        struct.orc.read(iprot);
        struct.setOrcIsSet(true);
      }
      if (incoming.get(6)) {
        struct.casec = new CaseClause();
        struct.casec.read(iprot);
        struct.setCasecIsSet(true);
      }
      if (incoming.get(7)) {
        struct.instantiate = new InstantiateClause();
        struct.instantiate.read(iprot);
        struct.setInstantiateIsSet(true);
      }
    }
  }

}

