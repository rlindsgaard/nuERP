/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecordDefinition implements org.apache.thrift.TBase<RecordDefinition, RecordDefinition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecordDefinition");

  private static final org.apache.thrift.protocol.TField RECORD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recordName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELDS_DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldsDefinitions", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField SUPER_CLASSES_FIELD_DESC = new org.apache.thrift.protocol.TField("superClasses", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("isAbstract", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordDefinitionTupleSchemeFactory());
  }

  public String recordName; // required
  public Map<String,dk.diku.poets.gen.thrift.type.Type> fieldsDefinitions; // required
  public Set<String> superClasses; // required
  public boolean isAbstract; // required
  public String description; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECORD_NAME((short)1, "recordName"),
    FIELDS_DEFINITIONS((short)2, "fieldsDefinitions"),
    SUPER_CLASSES((short)3, "superClasses"),
    IS_ABSTRACT((short)4, "isAbstract"),
    DESCRIPTION((short)5, "description");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_NAME
          return RECORD_NAME;
        case 2: // FIELDS_DEFINITIONS
          return FIELDS_DEFINITIONS;
        case 3: // SUPER_CLASSES
          return SUPER_CLASSES;
        case 4: // IS_ABSTRACT
          return IS_ABSTRACT;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISABSTRACT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_NAME, new org.apache.thrift.meta_data.FieldMetaData("recordName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RecordName")));
    tmpMap.put(_Fields.FIELDS_DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("fieldsDefinitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "FieldName"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.type.Type.class))));
    tmpMap.put(_Fields.SUPER_CLASSES, new org.apache.thrift.meta_data.FieldMetaData("superClasses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "RecordName"))));
    tmpMap.put(_Fields.IS_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("isAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecordDefinition.class, metaDataMap);
  }

  public RecordDefinition() {
  }

  public RecordDefinition(
    String recordName,
    Map<String,dk.diku.poets.gen.thrift.type.Type> fieldsDefinitions,
    Set<String> superClasses,
    boolean isAbstract,
    String description)
  {
    this();
    this.recordName = recordName;
    this.fieldsDefinitions = fieldsDefinitions;
    this.superClasses = superClasses;
    this.isAbstract = isAbstract;
    setIsAbstractIsSet(true);
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordDefinition(RecordDefinition other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRecordName()) {
      this.recordName = other.recordName;
    }
    if (other.isSetFieldsDefinitions()) {
      Map<String,dk.diku.poets.gen.thrift.type.Type> __this__fieldsDefinitions = new HashMap<String,dk.diku.poets.gen.thrift.type.Type>();
      for (Map.Entry<String, dk.diku.poets.gen.thrift.type.Type> other_element : other.fieldsDefinitions.entrySet()) {

        String other_element_key = other_element.getKey();
        dk.diku.poets.gen.thrift.type.Type other_element_value = other_element.getValue();

        String __this__fieldsDefinitions_copy_key = other_element_key;

        dk.diku.poets.gen.thrift.type.Type __this__fieldsDefinitions_copy_value = new dk.diku.poets.gen.thrift.type.Type(other_element_value);

        __this__fieldsDefinitions.put(__this__fieldsDefinitions_copy_key, __this__fieldsDefinitions_copy_value);
      }
      this.fieldsDefinitions = __this__fieldsDefinitions;
    }
    if (other.isSetSuperClasses()) {
      Set<String> __this__superClasses = new HashSet<String>();
      for (String other_element : other.superClasses) {
        __this__superClasses.add(other_element);
      }
      this.superClasses = __this__superClasses;
    }
    this.isAbstract = other.isAbstract;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
  }

  public RecordDefinition deepCopy() {
    return new RecordDefinition(this);
  }

  @Override
  public void clear() {
    this.recordName = null;
    this.fieldsDefinitions = null;
    this.superClasses = null;
    setIsAbstractIsSet(false);
    this.isAbstract = false;
    this.description = null;
  }

  public String getRecordName() {
    return this.recordName;
  }

  public RecordDefinition setRecordName(String recordName) {
    this.recordName = recordName;
    return this;
  }

  public void unsetRecordName() {
    this.recordName = null;
  }

  /** Returns true if field recordName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordName() {
    return this.recordName != null;
  }

  public void setRecordNameIsSet(boolean value) {
    if (!value) {
      this.recordName = null;
    }
  }

  public int getFieldsDefinitionsSize() {
    return (this.fieldsDefinitions == null) ? 0 : this.fieldsDefinitions.size();
  }

  public void putToFieldsDefinitions(String key, dk.diku.poets.gen.thrift.type.Type val) {
    if (this.fieldsDefinitions == null) {
      this.fieldsDefinitions = new HashMap<String,dk.diku.poets.gen.thrift.type.Type>();
    }
    this.fieldsDefinitions.put(key, val);
  }

  public Map<String,dk.diku.poets.gen.thrift.type.Type> getFieldsDefinitions() {
    return this.fieldsDefinitions;
  }

  public RecordDefinition setFieldsDefinitions(Map<String,dk.diku.poets.gen.thrift.type.Type> fieldsDefinitions) {
    this.fieldsDefinitions = fieldsDefinitions;
    return this;
  }

  public void unsetFieldsDefinitions() {
    this.fieldsDefinitions = null;
  }

  /** Returns true if field fieldsDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldsDefinitions() {
    return this.fieldsDefinitions != null;
  }

  public void setFieldsDefinitionsIsSet(boolean value) {
    if (!value) {
      this.fieldsDefinitions = null;
    }
  }

  public int getSuperClassesSize() {
    return (this.superClasses == null) ? 0 : this.superClasses.size();
  }

  public java.util.Iterator<String> getSuperClassesIterator() {
    return (this.superClasses == null) ? null : this.superClasses.iterator();
  }

  public void addToSuperClasses(String elem) {
    if (this.superClasses == null) {
      this.superClasses = new HashSet<String>();
    }
    this.superClasses.add(elem);
  }

  public Set<String> getSuperClasses() {
    return this.superClasses;
  }

  public RecordDefinition setSuperClasses(Set<String> superClasses) {
    this.superClasses = superClasses;
    return this;
  }

  public void unsetSuperClasses() {
    this.superClasses = null;
  }

  /** Returns true if field superClasses is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperClasses() {
    return this.superClasses != null;
  }

  public void setSuperClassesIsSet(boolean value) {
    if (!value) {
      this.superClasses = null;
    }
  }

  public boolean isIsAbstract() {
    return this.isAbstract;
  }

  public RecordDefinition setIsAbstract(boolean isAbstract) {
    this.isAbstract = isAbstract;
    setIsAbstractIsSet(true);
    return this;
  }

  public void unsetIsAbstract() {
    __isset_bit_vector.clear(__ISABSTRACT_ISSET_ID);
  }

  /** Returns true if field isAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAbstract() {
    return __isset_bit_vector.get(__ISABSTRACT_ISSET_ID);
  }

  public void setIsAbstractIsSet(boolean value) {
    __isset_bit_vector.set(__ISABSTRACT_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public RecordDefinition setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECORD_NAME:
      if (value == null) {
        unsetRecordName();
      } else {
        setRecordName((String)value);
      }
      break;

    case FIELDS_DEFINITIONS:
      if (value == null) {
        unsetFieldsDefinitions();
      } else {
        setFieldsDefinitions((Map<String,dk.diku.poets.gen.thrift.type.Type>)value);
      }
      break;

    case SUPER_CLASSES:
      if (value == null) {
        unsetSuperClasses();
      } else {
        setSuperClasses((Set<String>)value);
      }
      break;

    case IS_ABSTRACT:
      if (value == null) {
        unsetIsAbstract();
      } else {
        setIsAbstract((Boolean)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECORD_NAME:
      return getRecordName();

    case FIELDS_DEFINITIONS:
      return getFieldsDefinitions();

    case SUPER_CLASSES:
      return getSuperClasses();

    case IS_ABSTRACT:
      return Boolean.valueOf(isIsAbstract());

    case DESCRIPTION:
      return getDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECORD_NAME:
      return isSetRecordName();
    case FIELDS_DEFINITIONS:
      return isSetFieldsDefinitions();
    case SUPER_CLASSES:
      return isSetSuperClasses();
    case IS_ABSTRACT:
      return isSetIsAbstract();
    case DESCRIPTION:
      return isSetDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordDefinition)
      return this.equals((RecordDefinition)that);
    return false;
  }

  public boolean equals(RecordDefinition that) {
    if (that == null)
      return false;

    boolean this_present_recordName = true && this.isSetRecordName();
    boolean that_present_recordName = true && that.isSetRecordName();
    if (this_present_recordName || that_present_recordName) {
      if (!(this_present_recordName && that_present_recordName))
        return false;
      if (!this.recordName.equals(that.recordName))
        return false;
    }

    boolean this_present_fieldsDefinitions = true && this.isSetFieldsDefinitions();
    boolean that_present_fieldsDefinitions = true && that.isSetFieldsDefinitions();
    if (this_present_fieldsDefinitions || that_present_fieldsDefinitions) {
      if (!(this_present_fieldsDefinitions && that_present_fieldsDefinitions))
        return false;
      if (!this.fieldsDefinitions.equals(that.fieldsDefinitions))
        return false;
    }

    boolean this_present_superClasses = true && this.isSetSuperClasses();
    boolean that_present_superClasses = true && that.isSetSuperClasses();
    if (this_present_superClasses || that_present_superClasses) {
      if (!(this_present_superClasses && that_present_superClasses))
        return false;
      if (!this.superClasses.equals(that.superClasses))
        return false;
    }

    boolean this_present_isAbstract = true;
    boolean that_present_isAbstract = true;
    if (this_present_isAbstract || that_present_isAbstract) {
      if (!(this_present_isAbstract && that_present_isAbstract))
        return false;
      if (this.isAbstract != that.isAbstract)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RecordDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecordDefinition typedOther = (RecordDefinition)other;

    lastComparison = Boolean.valueOf(isSetRecordName()).compareTo(typedOther.isSetRecordName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordName, typedOther.recordName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldsDefinitions()).compareTo(typedOther.isSetFieldsDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldsDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldsDefinitions, typedOther.fieldsDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperClasses()).compareTo(typedOther.isSetSuperClasses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperClasses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superClasses, typedOther.superClasses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAbstract()).compareTo(typedOther.isSetIsAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAbstract, typedOther.isAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordDefinition(");
    boolean first = true;

    sb.append("recordName:");
    if (this.recordName == null) {
      sb.append("null");
    } else {
      sb.append(this.recordName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldsDefinitions:");
    if (this.fieldsDefinitions == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldsDefinitions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superClasses:");
    if (this.superClasses == null) {
      sb.append("null");
    } else {
      sb.append(this.superClasses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAbstract:");
    sb.append(this.isAbstract);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordDefinitionStandardSchemeFactory implements SchemeFactory {
    public RecordDefinitionStandardScheme getScheme() {
      return new RecordDefinitionStandardScheme();
    }
  }

  private static class RecordDefinitionStandardScheme extends StandardScheme<RecordDefinition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RecordDefinition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECORD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordName = iprot.readString();
              struct.setRecordNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELDS_DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.fieldsDefinitions = new HashMap<String,dk.diku.poets.gen.thrift.type.Type>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  dk.diku.poets.gen.thrift.type.Type _val3; // required
                  _key2 = iprot.readString();
                  _val3 = new dk.diku.poets.gen.thrift.type.Type();
                  _val3.read(iprot);
                  struct.fieldsDefinitions.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setFieldsDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUPER_CLASSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set4 = iprot.readSetBegin();
                struct.superClasses = new HashSet<String>(2*_set4.size);
                for (int _i5 = 0; _i5 < _set4.size; ++_i5)
                {
                  String _elem6; // required
                  _elem6 = iprot.readString();
                  struct.superClasses.add(_elem6);
                }
                iprot.readSetEnd();
              }
              struct.setSuperClassesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAbstract = iprot.readBool();
              struct.setIsAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RecordDefinition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.recordName != null) {
        oprot.writeFieldBegin(RECORD_NAME_FIELD_DESC);
        oprot.writeString(struct.recordName);
        oprot.writeFieldEnd();
      }
      if (struct.fieldsDefinitions != null) {
        oprot.writeFieldBegin(FIELDS_DEFINITIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.fieldsDefinitions.size()));
          for (Map.Entry<String, dk.diku.poets.gen.thrift.type.Type> _iter7 : struct.fieldsDefinitions.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            _iter7.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.superClasses != null) {
        oprot.writeFieldBegin(SUPER_CLASSES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.superClasses.size()));
          for (String _iter8 : struct.superClasses)
          {
            oprot.writeString(_iter8);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
      oprot.writeBool(struct.isAbstract);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordDefinitionTupleSchemeFactory implements SchemeFactory {
    public RecordDefinitionTupleScheme getScheme() {
      return new RecordDefinitionTupleScheme();
    }
  }

  private static class RecordDefinitionTupleScheme extends TupleScheme<RecordDefinition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RecordDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRecordName()) {
        optionals.set(0);
      }
      if (struct.isSetFieldsDefinitions()) {
        optionals.set(1);
      }
      if (struct.isSetSuperClasses()) {
        optionals.set(2);
      }
      if (struct.isSetIsAbstract()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRecordName()) {
        oprot.writeString(struct.recordName);
      }
      if (struct.isSetFieldsDefinitions()) {
        {
          oprot.writeI32(struct.fieldsDefinitions.size());
          for (Map.Entry<String, dk.diku.poets.gen.thrift.type.Type> _iter9 : struct.fieldsDefinitions.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            _iter9.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSuperClasses()) {
        {
          oprot.writeI32(struct.superClasses.size());
          for (String _iter10 : struct.superClasses)
          {
            oprot.writeString(_iter10);
          }
        }
      }
      if (struct.isSetIsAbstract()) {
        oprot.writeBool(struct.isAbstract);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RecordDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.recordName = iprot.readString();
        struct.setRecordNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fieldsDefinitions = new HashMap<String,dk.diku.poets.gen.thrift.type.Type>(2*_map11.size);
          for (int _i12 = 0; _i12 < _map11.size; ++_i12)
          {
            String _key13; // required
            dk.diku.poets.gen.thrift.type.Type _val14; // required
            _key13 = iprot.readString();
            _val14 = new dk.diku.poets.gen.thrift.type.Type();
            _val14.read(iprot);
            struct.fieldsDefinitions.put(_key13, _val14);
          }
        }
        struct.setFieldsDefinitionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.superClasses = new HashSet<String>(2*_set15.size);
          for (int _i16 = 0; _i16 < _set15.size; ++_i16)
          {
            String _elem17; // required
            _elem17 = iprot.readString();
            struct.superClasses.add(_elem17);
          }
        }
        struct.setSuperClassesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isAbstract = iprot.readBool();
        struct.setIsAbstractIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }
  }

}

