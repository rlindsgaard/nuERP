/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IfThenElse implements org.apache.thrift.TBase<IfThenElse, IfThenElse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IfThenElse");

  private static final org.apache.thrift.protocol.TField CONDITIONAL_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionalExp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField THEN_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("thenExp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ELSE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("elseExp", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IfThenElseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IfThenElseTupleSchemeFactory());
  }

  public int conditionalExp; // required
  public int thenExp; // required
  public int elseExp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONDITIONAL_EXP((short)1, "conditionalExp"),
    THEN_EXP((short)2, "thenExp"),
    ELSE_EXP((short)3, "elseExp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONDITIONAL_EXP
          return CONDITIONAL_EXP;
        case 2: // THEN_EXP
          return THEN_EXP;
        case 3: // ELSE_EXP
          return ELSE_EXP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONDITIONALEXP_ISSET_ID = 0;
  private static final int __THENEXP_ISSET_ID = 1;
  private static final int __ELSEEXP_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONDITIONAL_EXP, new org.apache.thrift.meta_data.FieldMetaData("conditionalExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "Index")));
    tmpMap.put(_Fields.THEN_EXP, new org.apache.thrift.meta_data.FieldMetaData("thenExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "Index")));
    tmpMap.put(_Fields.ELSE_EXP, new org.apache.thrift.meta_data.FieldMetaData("elseExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "Index")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IfThenElse.class, metaDataMap);
  }

  public IfThenElse() {
  }

  public IfThenElse(
    int conditionalExp,
    int thenExp,
    int elseExp)
  {
    this();
    this.conditionalExp = conditionalExp;
    setConditionalExpIsSet(true);
    this.thenExp = thenExp;
    setThenExpIsSet(true);
    this.elseExp = elseExp;
    setElseExpIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IfThenElse(IfThenElse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.conditionalExp = other.conditionalExp;
    this.thenExp = other.thenExp;
    this.elseExp = other.elseExp;
  }

  public IfThenElse deepCopy() {
    return new IfThenElse(this);
  }

  @Override
  public void clear() {
    setConditionalExpIsSet(false);
    this.conditionalExp = 0;
    setThenExpIsSet(false);
    this.thenExp = 0;
    setElseExpIsSet(false);
    this.elseExp = 0;
  }

  public int getConditionalExp() {
    return this.conditionalExp;
  }

  public IfThenElse setConditionalExp(int conditionalExp) {
    this.conditionalExp = conditionalExp;
    setConditionalExpIsSet(true);
    return this;
  }

  public void unsetConditionalExp() {
    __isset_bit_vector.clear(__CONDITIONALEXP_ISSET_ID);
  }

  /** Returns true if field conditionalExp is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionalExp() {
    return __isset_bit_vector.get(__CONDITIONALEXP_ISSET_ID);
  }

  public void setConditionalExpIsSet(boolean value) {
    __isset_bit_vector.set(__CONDITIONALEXP_ISSET_ID, value);
  }

  public int getThenExp() {
    return this.thenExp;
  }

  public IfThenElse setThenExp(int thenExp) {
    this.thenExp = thenExp;
    setThenExpIsSet(true);
    return this;
  }

  public void unsetThenExp() {
    __isset_bit_vector.clear(__THENEXP_ISSET_ID);
  }

  /** Returns true if field thenExp is set (has been assigned a value) and false otherwise */
  public boolean isSetThenExp() {
    return __isset_bit_vector.get(__THENEXP_ISSET_ID);
  }

  public void setThenExpIsSet(boolean value) {
    __isset_bit_vector.set(__THENEXP_ISSET_ID, value);
  }

  public int getElseExp() {
    return this.elseExp;
  }

  public IfThenElse setElseExp(int elseExp) {
    this.elseExp = elseExp;
    setElseExpIsSet(true);
    return this;
  }

  public void unsetElseExp() {
    __isset_bit_vector.clear(__ELSEEXP_ISSET_ID);
  }

  /** Returns true if field elseExp is set (has been assigned a value) and false otherwise */
  public boolean isSetElseExp() {
    return __isset_bit_vector.get(__ELSEEXP_ISSET_ID);
  }

  public void setElseExpIsSet(boolean value) {
    __isset_bit_vector.set(__ELSEEXP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONDITIONAL_EXP:
      if (value == null) {
        unsetConditionalExp();
      } else {
        setConditionalExp((Integer)value);
      }
      break;

    case THEN_EXP:
      if (value == null) {
        unsetThenExp();
      } else {
        setThenExp((Integer)value);
      }
      break;

    case ELSE_EXP:
      if (value == null) {
        unsetElseExp();
      } else {
        setElseExp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONDITIONAL_EXP:
      return Integer.valueOf(getConditionalExp());

    case THEN_EXP:
      return Integer.valueOf(getThenExp());

    case ELSE_EXP:
      return Integer.valueOf(getElseExp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONDITIONAL_EXP:
      return isSetConditionalExp();
    case THEN_EXP:
      return isSetThenExp();
    case ELSE_EXP:
      return isSetElseExp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IfThenElse)
      return this.equals((IfThenElse)that);
    return false;
  }

  public boolean equals(IfThenElse that) {
    if (that == null)
      return false;

    boolean this_present_conditionalExp = true;
    boolean that_present_conditionalExp = true;
    if (this_present_conditionalExp || that_present_conditionalExp) {
      if (!(this_present_conditionalExp && that_present_conditionalExp))
        return false;
      if (this.conditionalExp != that.conditionalExp)
        return false;
    }

    boolean this_present_thenExp = true;
    boolean that_present_thenExp = true;
    if (this_present_thenExp || that_present_thenExp) {
      if (!(this_present_thenExp && that_present_thenExp))
        return false;
      if (this.thenExp != that.thenExp)
        return false;
    }

    boolean this_present_elseExp = true;
    boolean that_present_elseExp = true;
    if (this_present_elseExp || that_present_elseExp) {
      if (!(this_present_elseExp && that_present_elseExp))
        return false;
      if (this.elseExp != that.elseExp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(IfThenElse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IfThenElse typedOther = (IfThenElse)other;

    lastComparison = Boolean.valueOf(isSetConditionalExp()).compareTo(typedOther.isSetConditionalExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionalExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionalExp, typedOther.conditionalExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThenExp()).compareTo(typedOther.isSetThenExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThenExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thenExp, typedOther.thenExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElseExp()).compareTo(typedOther.isSetElseExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElseExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elseExp, typedOther.elseExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IfThenElse(");
    boolean first = true;

    sb.append("conditionalExp:");
    sb.append(this.conditionalExp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thenExp:");
    sb.append(this.thenExp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("elseExp:");
    sb.append(this.elseExp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IfThenElseStandardSchemeFactory implements SchemeFactory {
    public IfThenElseStandardScheme getScheme() {
      return new IfThenElseStandardScheme();
    }
  }

  private static class IfThenElseStandardScheme extends StandardScheme<IfThenElse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IfThenElse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONDITIONAL_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conditionalExp = iprot.readI32();
              struct.setConditionalExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THEN_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thenExp = iprot.readI32();
              struct.setThenExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ELSE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.elseExp = iprot.readI32();
              struct.setElseExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IfThenElse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONDITIONAL_EXP_FIELD_DESC);
      oprot.writeI32(struct.conditionalExp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THEN_EXP_FIELD_DESC);
      oprot.writeI32(struct.thenExp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ELSE_EXP_FIELD_DESC);
      oprot.writeI32(struct.elseExp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IfThenElseTupleSchemeFactory implements SchemeFactory {
    public IfThenElseTupleScheme getScheme() {
      return new IfThenElseTupleScheme();
    }
  }

  private static class IfThenElseTupleScheme extends TupleScheme<IfThenElse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IfThenElse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConditionalExp()) {
        optionals.set(0);
      }
      if (struct.isSetThenExp()) {
        optionals.set(1);
      }
      if (struct.isSetElseExp()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetConditionalExp()) {
        oprot.writeI32(struct.conditionalExp);
      }
      if (struct.isSetThenExp()) {
        oprot.writeI32(struct.thenExp);
      }
      if (struct.isSetElseExp()) {
        oprot.writeI32(struct.elseExp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IfThenElse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.conditionalExp = iprot.readI32();
        struct.setConditionalExpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.thenExp = iprot.readI32();
        struct.setThenExpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.elseExp = iprot.readI32();
        struct.setElseExpIsSet(true);
      }
    }
  }

}

