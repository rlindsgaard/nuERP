/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CaseC implements org.apache.thrift.TBase<CaseC, CaseC._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CaseC");

  private static final org.apache.thrift.protocol.TField RECORD_CASE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordCase", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BINDER_FIELD_DESC = new org.apache.thrift.protocol.TField("binder", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CaseCStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CaseCTupleSchemeFactory());
  }

  public String recordCase; // required
  public String binder; // required
  public int body; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECORD_CASE((short)1, "recordCase"),
    BINDER((short)2, "binder"),
    BODY((short)3, "body");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_CASE
          return RECORD_CASE;
        case 2: // BINDER
          return BINDER;
        case 3: // BODY
          return BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BODY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_CASE, new org.apache.thrift.meta_data.FieldMetaData("recordCase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RecordName")));
    tmpMap.put(_Fields.BINDER, new org.apache.thrift.meta_data.FieldMetaData("binder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Var")));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "Index")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CaseC.class, metaDataMap);
  }

  public CaseC() {
  }

  public CaseC(
    String recordCase,
    String binder,
    int body)
  {
    this();
    this.recordCase = recordCase;
    this.binder = binder;
    this.body = body;
    setBodyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CaseC(CaseC other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRecordCase()) {
      this.recordCase = other.recordCase;
    }
    if (other.isSetBinder()) {
      this.binder = other.binder;
    }
    this.body = other.body;
  }

  public CaseC deepCopy() {
    return new CaseC(this);
  }

  @Override
  public void clear() {
    this.recordCase = null;
    this.binder = null;
    setBodyIsSet(false);
    this.body = 0;
  }

  public String getRecordCase() {
    return this.recordCase;
  }

  public CaseC setRecordCase(String recordCase) {
    this.recordCase = recordCase;
    return this;
  }

  public void unsetRecordCase() {
    this.recordCase = null;
  }

  /** Returns true if field recordCase is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordCase() {
    return this.recordCase != null;
  }

  public void setRecordCaseIsSet(boolean value) {
    if (!value) {
      this.recordCase = null;
    }
  }

  public String getBinder() {
    return this.binder;
  }

  public CaseC setBinder(String binder) {
    this.binder = binder;
    return this;
  }

  public void unsetBinder() {
    this.binder = null;
  }

  /** Returns true if field binder is set (has been assigned a value) and false otherwise */
  public boolean isSetBinder() {
    return this.binder != null;
  }

  public void setBinderIsSet(boolean value) {
    if (!value) {
      this.binder = null;
    }
  }

  public int getBody() {
    return this.body;
  }

  public CaseC setBody(int body) {
    this.body = body;
    setBodyIsSet(true);
    return this;
  }

  public void unsetBody() {
    __isset_bit_vector.clear(__BODY_ISSET_ID);
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return __isset_bit_vector.get(__BODY_ISSET_ID);
  }

  public void setBodyIsSet(boolean value) {
    __isset_bit_vector.set(__BODY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECORD_CASE:
      if (value == null) {
        unsetRecordCase();
      } else {
        setRecordCase((String)value);
      }
      break;

    case BINDER:
      if (value == null) {
        unsetBinder();
      } else {
        setBinder((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECORD_CASE:
      return getRecordCase();

    case BINDER:
      return getBinder();

    case BODY:
      return Integer.valueOf(getBody());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECORD_CASE:
      return isSetRecordCase();
    case BINDER:
      return isSetBinder();
    case BODY:
      return isSetBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CaseC)
      return this.equals((CaseC)that);
    return false;
  }

  public boolean equals(CaseC that) {
    if (that == null)
      return false;

    boolean this_present_recordCase = true && this.isSetRecordCase();
    boolean that_present_recordCase = true && that.isSetRecordCase();
    if (this_present_recordCase || that_present_recordCase) {
      if (!(this_present_recordCase && that_present_recordCase))
        return false;
      if (!this.recordCase.equals(that.recordCase))
        return false;
    }

    boolean this_present_binder = true && this.isSetBinder();
    boolean that_present_binder = true && that.isSetBinder();
    if (this_present_binder || that_present_binder) {
      if (!(this_present_binder && that_present_binder))
        return false;
      if (!this.binder.equals(that.binder))
        return false;
    }

    boolean this_present_body = true;
    boolean that_present_body = true;
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (this.body != that.body)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CaseC other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CaseC typedOther = (CaseC)other;

    lastComparison = Boolean.valueOf(isSetRecordCase()).compareTo(typedOther.isSetRecordCase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordCase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordCase, typedOther.recordCase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinder()).compareTo(typedOther.isSetBinder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binder, typedOther.binder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(typedOther.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, typedOther.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CaseC(");
    boolean first = true;

    sb.append("recordCase:");
    if (this.recordCase == null) {
      sb.append("null");
    } else {
      sb.append(this.recordCase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binder:");
    if (this.binder == null) {
      sb.append("null");
    } else {
      sb.append(this.binder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    sb.append(this.body);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CaseCStandardSchemeFactory implements SchemeFactory {
    public CaseCStandardScheme getScheme() {
      return new CaseCStandardScheme();
    }
  }

  private static class CaseCStandardScheme extends StandardScheme<CaseC> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CaseC struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECORD_CASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recordCase = iprot.readString();
              struct.setRecordCaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BINDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binder = iprot.readString();
              struct.setBinderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.body = iprot.readI32();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CaseC struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.recordCase != null) {
        oprot.writeFieldBegin(RECORD_CASE_FIELD_DESC);
        oprot.writeString(struct.recordCase);
        oprot.writeFieldEnd();
      }
      if (struct.binder != null) {
        oprot.writeFieldBegin(BINDER_FIELD_DESC);
        oprot.writeString(struct.binder);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BODY_FIELD_DESC);
      oprot.writeI32(struct.body);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CaseCTupleSchemeFactory implements SchemeFactory {
    public CaseCTupleScheme getScheme() {
      return new CaseCTupleScheme();
    }
  }

  private static class CaseCTupleScheme extends TupleScheme<CaseC> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CaseC struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRecordCase()) {
        optionals.set(0);
      }
      if (struct.isSetBinder()) {
        optionals.set(1);
      }
      if (struct.isSetBody()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRecordCase()) {
        oprot.writeString(struct.recordCase);
      }
      if (struct.isSetBinder()) {
        oprot.writeString(struct.binder);
      }
      if (struct.isSetBody()) {
        oprot.writeI32(struct.body);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CaseC struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.recordCase = iprot.readString();
        struct.setRecordCaseIsSet(true);
      }
      if (incoming.get(1)) {
        struct.binder = iprot.readString();
        struct.setBinderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.body = iprot.readI32();
        struct.setBodyIsSet(true);
      }
    }
  }

}

