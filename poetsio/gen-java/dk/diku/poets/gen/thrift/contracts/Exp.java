/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Exp implements org.apache.thrift.TBase<Exp, Exp._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Exp");

  private static final org.apache.thrift.protocol.TField INT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("intExp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("boolExp", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringExp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_TIME_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTimeExp", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DURATION_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("durationExp", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleExp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RECORD_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("recordExp", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField REF_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("refExp", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField LIST_EXPS_FIELD_DESC = new org.apache.thrift.protocol.TField("listExps", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldNameExp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RECORD_PROJ_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("recordProjExp", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField RECORD_UPDATE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("recordUpdateExp", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField BINARY_OP_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryOpExp", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField VARIABLE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("variableExp", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LAMBDA_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("lambdaExp", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField APPLICATION_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationExp", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField FUNCTION_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("functionExp", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField IF_THEN_ELSE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("ifThenElseExp", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField CASE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("caseExp", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField UNIT_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("unitExp", org.apache.thrift.protocol.TType.STRUCT, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExpStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExpTupleSchemeFactory());
  }

  public int intExp; // required
  public boolean boolExp; // required
  public String stringExp; // required
  public dk.diku.poets.gen.thrift.value.DateTime dateTimeExp; // required
  public dk.diku.poets.gen.thrift.value.Duration durationExp; // required
  public double doubleExp; // required
  public dk.diku.poets.gen.thrift.value.Record recordExp; // required
  public dk.diku.poets.gen.thrift.value.RefVal refExp; // required
  public List<Integer> listExps; // required
  public String fieldNameExp; // required
  public RecordProj recordProjExp; // required
  public RecordUpdate recordUpdateExp; // required
  public BinaryOp binaryOpExp; // required
  public String variableExp; // required
  public Lambda lambdaExp; // required
  public Application applicationExp; // required
  /**
   * 
   * @see Function
   */
  public Function functionExp; // required
  public IfThenElse ifThenElseExp; // required
  public Case caseExp; // required
  public Unit unitExp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_EXP((short)1, "intExp"),
    BOOL_EXP((short)2, "boolExp"),
    STRING_EXP((short)3, "stringExp"),
    DATE_TIME_EXP((short)4, "dateTimeExp"),
    DURATION_EXP((short)5, "durationExp"),
    DOUBLE_EXP((short)6, "doubleExp"),
    RECORD_EXP((short)7, "recordExp"),
    REF_EXP((short)8, "refExp"),
    LIST_EXPS((short)9, "listExps"),
    FIELD_NAME_EXP((short)10, "fieldNameExp"),
    RECORD_PROJ_EXP((short)11, "recordProjExp"),
    RECORD_UPDATE_EXP((short)12, "recordUpdateExp"),
    BINARY_OP_EXP((short)13, "binaryOpExp"),
    VARIABLE_EXP((short)14, "variableExp"),
    LAMBDA_EXP((short)15, "lambdaExp"),
    APPLICATION_EXP((short)16, "applicationExp"),
    /**
     * 
     * @see Function
     */
    FUNCTION_EXP((short)17, "functionExp"),
    IF_THEN_ELSE_EXP((short)18, "ifThenElseExp"),
    CASE_EXP((short)19, "caseExp"),
    UNIT_EXP((short)20, "unitExp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_EXP
          return INT_EXP;
        case 2: // BOOL_EXP
          return BOOL_EXP;
        case 3: // STRING_EXP
          return STRING_EXP;
        case 4: // DATE_TIME_EXP
          return DATE_TIME_EXP;
        case 5: // DURATION_EXP
          return DURATION_EXP;
        case 6: // DOUBLE_EXP
          return DOUBLE_EXP;
        case 7: // RECORD_EXP
          return RECORD_EXP;
        case 8: // REF_EXP
          return REF_EXP;
        case 9: // LIST_EXPS
          return LIST_EXPS;
        case 10: // FIELD_NAME_EXP
          return FIELD_NAME_EXP;
        case 11: // RECORD_PROJ_EXP
          return RECORD_PROJ_EXP;
        case 12: // RECORD_UPDATE_EXP
          return RECORD_UPDATE_EXP;
        case 13: // BINARY_OP_EXP
          return BINARY_OP_EXP;
        case 14: // VARIABLE_EXP
          return VARIABLE_EXP;
        case 15: // LAMBDA_EXP
          return LAMBDA_EXP;
        case 16: // APPLICATION_EXP
          return APPLICATION_EXP;
        case 17: // FUNCTION_EXP
          return FUNCTION_EXP;
        case 18: // IF_THEN_ELSE_EXP
          return IF_THEN_ELSE_EXP;
        case 19: // CASE_EXP
          return CASE_EXP;
        case 20: // UNIT_EXP
          return UNIT_EXP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTEXP_ISSET_ID = 0;
  private static final int __BOOLEXP_ISSET_ID = 1;
  private static final int __DOUBLEEXP_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.INT_EXP,_Fields.BOOL_EXP,_Fields.STRING_EXP,_Fields.DATE_TIME_EXP,_Fields.DURATION_EXP,_Fields.DOUBLE_EXP,_Fields.RECORD_EXP,_Fields.REF_EXP,_Fields.LIST_EXPS,_Fields.FIELD_NAME_EXP,_Fields.RECORD_PROJ_EXP,_Fields.RECORD_UPDATE_EXP,_Fields.BINARY_OP_EXP,_Fields.VARIABLE_EXP,_Fields.LAMBDA_EXP,_Fields.APPLICATION_EXP,_Fields.FUNCTION_EXP,_Fields.IF_THEN_ELSE_EXP,_Fields.CASE_EXP,_Fields.UNIT_EXP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_EXP, new org.apache.thrift.meta_data.FieldMetaData("intExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOL_EXP, new org.apache.thrift.meta_data.FieldMetaData("boolExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRING_EXP, new org.apache.thrift.meta_data.FieldMetaData("stringExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_TIME_EXP, new org.apache.thrift.meta_data.FieldMetaData("dateTimeExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.DateTime.class)));
    tmpMap.put(_Fields.DURATION_EXP, new org.apache.thrift.meta_data.FieldMetaData("durationExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Duration.class)));
    tmpMap.put(_Fields.DOUBLE_EXP, new org.apache.thrift.meta_data.FieldMetaData("doubleExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_EXP, new org.apache.thrift.meta_data.FieldMetaData("recordExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.Record.class)));
    tmpMap.put(_Fields.REF_EXP, new org.apache.thrift.meta_data.FieldMetaData("refExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.RefVal.class)));
    tmpMap.put(_Fields.LIST_EXPS, new org.apache.thrift.meta_data.FieldMetaData("listExps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "Index"))));
    tmpMap.put(_Fields.FIELD_NAME_EXP, new org.apache.thrift.meta_data.FieldMetaData("fieldNameExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "FieldName")));
    tmpMap.put(_Fields.RECORD_PROJ_EXP, new org.apache.thrift.meta_data.FieldMetaData("recordProjExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordProj.class)));
    tmpMap.put(_Fields.RECORD_UPDATE_EXP, new org.apache.thrift.meta_data.FieldMetaData("recordUpdateExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordUpdate.class)));
    tmpMap.put(_Fields.BINARY_OP_EXP, new org.apache.thrift.meta_data.FieldMetaData("binaryOpExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryOp.class)));
    tmpMap.put(_Fields.VARIABLE_EXP, new org.apache.thrift.meta_data.FieldMetaData("variableExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Var")));
    tmpMap.put(_Fields.LAMBDA_EXP, new org.apache.thrift.meta_data.FieldMetaData("lambdaExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lambda.class)));
    tmpMap.put(_Fields.APPLICATION_EXP, new org.apache.thrift.meta_data.FieldMetaData("applicationExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Application.class)));
    tmpMap.put(_Fields.FUNCTION_EXP, new org.apache.thrift.meta_data.FieldMetaData("functionExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Function.class)));
    tmpMap.put(_Fields.IF_THEN_ELSE_EXP, new org.apache.thrift.meta_data.FieldMetaData("ifThenElseExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IfThenElse.class)));
    tmpMap.put(_Fields.CASE_EXP, new org.apache.thrift.meta_data.FieldMetaData("caseExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Case.class)));
    tmpMap.put(_Fields.UNIT_EXP, new org.apache.thrift.meta_data.FieldMetaData("unitExp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Unit.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Exp.class, metaDataMap);
  }

  public Exp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Exp(Exp other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.intExp = other.intExp;
    this.boolExp = other.boolExp;
    if (other.isSetStringExp()) {
      this.stringExp = other.stringExp;
    }
    if (other.isSetDateTimeExp()) {
      this.dateTimeExp = new dk.diku.poets.gen.thrift.value.DateTime(other.dateTimeExp);
    }
    if (other.isSetDurationExp()) {
      this.durationExp = new dk.diku.poets.gen.thrift.value.Duration(other.durationExp);
    }
    this.doubleExp = other.doubleExp;
    if (other.isSetRecordExp()) {
      this.recordExp = new dk.diku.poets.gen.thrift.value.Record(other.recordExp);
    }
    if (other.isSetRefExp()) {
      this.refExp = new dk.diku.poets.gen.thrift.value.RefVal(other.refExp);
    }
    if (other.isSetListExps()) {
      List<Integer> __this__listExps = new ArrayList<Integer>();
      for (Integer other_element : other.listExps) {
        __this__listExps.add(other_element);
      }
      this.listExps = __this__listExps;
    }
    if (other.isSetFieldNameExp()) {
      this.fieldNameExp = other.fieldNameExp;
    }
    if (other.isSetRecordProjExp()) {
      this.recordProjExp = new RecordProj(other.recordProjExp);
    }
    if (other.isSetRecordUpdateExp()) {
      this.recordUpdateExp = new RecordUpdate(other.recordUpdateExp);
    }
    if (other.isSetBinaryOpExp()) {
      this.binaryOpExp = new BinaryOp(other.binaryOpExp);
    }
    if (other.isSetVariableExp()) {
      this.variableExp = other.variableExp;
    }
    if (other.isSetLambdaExp()) {
      this.lambdaExp = new Lambda(other.lambdaExp);
    }
    if (other.isSetApplicationExp()) {
      this.applicationExp = new Application(other.applicationExp);
    }
    if (other.isSetFunctionExp()) {
      this.functionExp = other.functionExp;
    }
    if (other.isSetIfThenElseExp()) {
      this.ifThenElseExp = new IfThenElse(other.ifThenElseExp);
    }
    if (other.isSetCaseExp()) {
      this.caseExp = new Case(other.caseExp);
    }
    if (other.isSetUnitExp()) {
      this.unitExp = new Unit(other.unitExp);
    }
  }

  public Exp deepCopy() {
    return new Exp(this);
  }

  @Override
  public void clear() {
    setIntExpIsSet(false);
    this.intExp = 0;
    setBoolExpIsSet(false);
    this.boolExp = false;
    this.stringExp = null;
    this.dateTimeExp = null;
    this.durationExp = null;
    setDoubleExpIsSet(false);
    this.doubleExp = 0.0;
    this.recordExp = null;
    this.refExp = null;
    this.listExps = null;
    this.fieldNameExp = null;
    this.recordProjExp = null;
    this.recordUpdateExp = null;
    this.binaryOpExp = null;
    this.variableExp = null;
    this.lambdaExp = null;
    this.applicationExp = null;
    this.functionExp = null;
    this.ifThenElseExp = null;
    this.caseExp = null;
    this.unitExp = null;
  }

  public int getIntExp() {
    return this.intExp;
  }

  public Exp setIntExp(int intExp) {
    this.intExp = intExp;
    setIntExpIsSet(true);
    return this;
  }

  public void unsetIntExp() {
    __isset_bit_vector.clear(__INTEXP_ISSET_ID);
  }

  /** Returns true if field intExp is set (has been assigned a value) and false otherwise */
  public boolean isSetIntExp() {
    return __isset_bit_vector.get(__INTEXP_ISSET_ID);
  }

  public void setIntExpIsSet(boolean value) {
    __isset_bit_vector.set(__INTEXP_ISSET_ID, value);
  }

  public boolean isBoolExp() {
    return this.boolExp;
  }

  public Exp setBoolExp(boolean boolExp) {
    this.boolExp = boolExp;
    setBoolExpIsSet(true);
    return this;
  }

  public void unsetBoolExp() {
    __isset_bit_vector.clear(__BOOLEXP_ISSET_ID);
  }

  /** Returns true if field boolExp is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolExp() {
    return __isset_bit_vector.get(__BOOLEXP_ISSET_ID);
  }

  public void setBoolExpIsSet(boolean value) {
    __isset_bit_vector.set(__BOOLEXP_ISSET_ID, value);
  }

  public String getStringExp() {
    return this.stringExp;
  }

  public Exp setStringExp(String stringExp) {
    this.stringExp = stringExp;
    return this;
  }

  public void unsetStringExp() {
    this.stringExp = null;
  }

  /** Returns true if field stringExp is set (has been assigned a value) and false otherwise */
  public boolean isSetStringExp() {
    return this.stringExp != null;
  }

  public void setStringExpIsSet(boolean value) {
    if (!value) {
      this.stringExp = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.DateTime getDateTimeExp() {
    return this.dateTimeExp;
  }

  public Exp setDateTimeExp(dk.diku.poets.gen.thrift.value.DateTime dateTimeExp) {
    this.dateTimeExp = dateTimeExp;
    return this;
  }

  public void unsetDateTimeExp() {
    this.dateTimeExp = null;
  }

  /** Returns true if field dateTimeExp is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTimeExp() {
    return this.dateTimeExp != null;
  }

  public void setDateTimeExpIsSet(boolean value) {
    if (!value) {
      this.dateTimeExp = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.Duration getDurationExp() {
    return this.durationExp;
  }

  public Exp setDurationExp(dk.diku.poets.gen.thrift.value.Duration durationExp) {
    this.durationExp = durationExp;
    return this;
  }

  public void unsetDurationExp() {
    this.durationExp = null;
  }

  /** Returns true if field durationExp is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationExp() {
    return this.durationExp != null;
  }

  public void setDurationExpIsSet(boolean value) {
    if (!value) {
      this.durationExp = null;
    }
  }

  public double getDoubleExp() {
    return this.doubleExp;
  }

  public Exp setDoubleExp(double doubleExp) {
    this.doubleExp = doubleExp;
    setDoubleExpIsSet(true);
    return this;
  }

  public void unsetDoubleExp() {
    __isset_bit_vector.clear(__DOUBLEEXP_ISSET_ID);
  }

  /** Returns true if field doubleExp is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleExp() {
    return __isset_bit_vector.get(__DOUBLEEXP_ISSET_ID);
  }

  public void setDoubleExpIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLEEXP_ISSET_ID, value);
  }

  public dk.diku.poets.gen.thrift.value.Record getRecordExp() {
    return this.recordExp;
  }

  public Exp setRecordExp(dk.diku.poets.gen.thrift.value.Record recordExp) {
    this.recordExp = recordExp;
    return this;
  }

  public void unsetRecordExp() {
    this.recordExp = null;
  }

  /** Returns true if field recordExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordExp() {
    return this.recordExp != null;
  }

  public void setRecordExpIsSet(boolean value) {
    if (!value) {
      this.recordExp = null;
    }
  }

  public dk.diku.poets.gen.thrift.value.RefVal getRefExp() {
    return this.refExp;
  }

  public Exp setRefExp(dk.diku.poets.gen.thrift.value.RefVal refExp) {
    this.refExp = refExp;
    return this;
  }

  public void unsetRefExp() {
    this.refExp = null;
  }

  /** Returns true if field refExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRefExp() {
    return this.refExp != null;
  }

  public void setRefExpIsSet(boolean value) {
    if (!value) {
      this.refExp = null;
    }
  }

  public int getListExpsSize() {
    return (this.listExps == null) ? 0 : this.listExps.size();
  }

  public java.util.Iterator<Integer> getListExpsIterator() {
    return (this.listExps == null) ? null : this.listExps.iterator();
  }

  public void addToListExps(int elem) {
    if (this.listExps == null) {
      this.listExps = new ArrayList<Integer>();
    }
    this.listExps.add(elem);
  }

  public List<Integer> getListExps() {
    return this.listExps;
  }

  public Exp setListExps(List<Integer> listExps) {
    this.listExps = listExps;
    return this;
  }

  public void unsetListExps() {
    this.listExps = null;
  }

  /** Returns true if field listExps is set (has been assigned a value) and false otherwise */
  public boolean isSetListExps() {
    return this.listExps != null;
  }

  public void setListExpsIsSet(boolean value) {
    if (!value) {
      this.listExps = null;
    }
  }

  public String getFieldNameExp() {
    return this.fieldNameExp;
  }

  public Exp setFieldNameExp(String fieldNameExp) {
    this.fieldNameExp = fieldNameExp;
    return this;
  }

  public void unsetFieldNameExp() {
    this.fieldNameExp = null;
  }

  /** Returns true if field fieldNameExp is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldNameExp() {
    return this.fieldNameExp != null;
  }

  public void setFieldNameExpIsSet(boolean value) {
    if (!value) {
      this.fieldNameExp = null;
    }
  }

  public RecordProj getRecordProjExp() {
    return this.recordProjExp;
  }

  public Exp setRecordProjExp(RecordProj recordProjExp) {
    this.recordProjExp = recordProjExp;
    return this;
  }

  public void unsetRecordProjExp() {
    this.recordProjExp = null;
  }

  /** Returns true if field recordProjExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordProjExp() {
    return this.recordProjExp != null;
  }

  public void setRecordProjExpIsSet(boolean value) {
    if (!value) {
      this.recordProjExp = null;
    }
  }

  public RecordUpdate getRecordUpdateExp() {
    return this.recordUpdateExp;
  }

  public Exp setRecordUpdateExp(RecordUpdate recordUpdateExp) {
    this.recordUpdateExp = recordUpdateExp;
    return this;
  }

  public void unsetRecordUpdateExp() {
    this.recordUpdateExp = null;
  }

  /** Returns true if field recordUpdateExp is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordUpdateExp() {
    return this.recordUpdateExp != null;
  }

  public void setRecordUpdateExpIsSet(boolean value) {
    if (!value) {
      this.recordUpdateExp = null;
    }
  }

  public BinaryOp getBinaryOpExp() {
    return this.binaryOpExp;
  }

  public Exp setBinaryOpExp(BinaryOp binaryOpExp) {
    this.binaryOpExp = binaryOpExp;
    return this;
  }

  public void unsetBinaryOpExp() {
    this.binaryOpExp = null;
  }

  /** Returns true if field binaryOpExp is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryOpExp() {
    return this.binaryOpExp != null;
  }

  public void setBinaryOpExpIsSet(boolean value) {
    if (!value) {
      this.binaryOpExp = null;
    }
  }

  public String getVariableExp() {
    return this.variableExp;
  }

  public Exp setVariableExp(String variableExp) {
    this.variableExp = variableExp;
    return this;
  }

  public void unsetVariableExp() {
    this.variableExp = null;
  }

  /** Returns true if field variableExp is set (has been assigned a value) and false otherwise */
  public boolean isSetVariableExp() {
    return this.variableExp != null;
  }

  public void setVariableExpIsSet(boolean value) {
    if (!value) {
      this.variableExp = null;
    }
  }

  public Lambda getLambdaExp() {
    return this.lambdaExp;
  }

  public Exp setLambdaExp(Lambda lambdaExp) {
    this.lambdaExp = lambdaExp;
    return this;
  }

  public void unsetLambdaExp() {
    this.lambdaExp = null;
  }

  /** Returns true if field lambdaExp is set (has been assigned a value) and false otherwise */
  public boolean isSetLambdaExp() {
    return this.lambdaExp != null;
  }

  public void setLambdaExpIsSet(boolean value) {
    if (!value) {
      this.lambdaExp = null;
    }
  }

  public Application getApplicationExp() {
    return this.applicationExp;
  }

  public Exp setApplicationExp(Application applicationExp) {
    this.applicationExp = applicationExp;
    return this;
  }

  public void unsetApplicationExp() {
    this.applicationExp = null;
  }

  /** Returns true if field applicationExp is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationExp() {
    return this.applicationExp != null;
  }

  public void setApplicationExpIsSet(boolean value) {
    if (!value) {
      this.applicationExp = null;
    }
  }

  /**
   * 
   * @see Function
   */
  public Function getFunctionExp() {
    return this.functionExp;
  }

  /**
   * 
   * @see Function
   */
  public Exp setFunctionExp(Function functionExp) {
    this.functionExp = functionExp;
    return this;
  }

  public void unsetFunctionExp() {
    this.functionExp = null;
  }

  /** Returns true if field functionExp is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionExp() {
    return this.functionExp != null;
  }

  public void setFunctionExpIsSet(boolean value) {
    if (!value) {
      this.functionExp = null;
    }
  }

  public IfThenElse getIfThenElseExp() {
    return this.ifThenElseExp;
  }

  public Exp setIfThenElseExp(IfThenElse ifThenElseExp) {
    this.ifThenElseExp = ifThenElseExp;
    return this;
  }

  public void unsetIfThenElseExp() {
    this.ifThenElseExp = null;
  }

  /** Returns true if field ifThenElseExp is set (has been assigned a value) and false otherwise */
  public boolean isSetIfThenElseExp() {
    return this.ifThenElseExp != null;
  }

  public void setIfThenElseExpIsSet(boolean value) {
    if (!value) {
      this.ifThenElseExp = null;
    }
  }

  public Case getCaseExp() {
    return this.caseExp;
  }

  public Exp setCaseExp(Case caseExp) {
    this.caseExp = caseExp;
    return this;
  }

  public void unsetCaseExp() {
    this.caseExp = null;
  }

  /** Returns true if field caseExp is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseExp() {
    return this.caseExp != null;
  }

  public void setCaseExpIsSet(boolean value) {
    if (!value) {
      this.caseExp = null;
    }
  }

  public Unit getUnitExp() {
    return this.unitExp;
  }

  public Exp setUnitExp(Unit unitExp) {
    this.unitExp = unitExp;
    return this;
  }

  public void unsetUnitExp() {
    this.unitExp = null;
  }

  /** Returns true if field unitExp is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitExp() {
    return this.unitExp != null;
  }

  public void setUnitExpIsSet(boolean value) {
    if (!value) {
      this.unitExp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INT_EXP:
      if (value == null) {
        unsetIntExp();
      } else {
        setIntExp((Integer)value);
      }
      break;

    case BOOL_EXP:
      if (value == null) {
        unsetBoolExp();
      } else {
        setBoolExp((Boolean)value);
      }
      break;

    case STRING_EXP:
      if (value == null) {
        unsetStringExp();
      } else {
        setStringExp((String)value);
      }
      break;

    case DATE_TIME_EXP:
      if (value == null) {
        unsetDateTimeExp();
      } else {
        setDateTimeExp((dk.diku.poets.gen.thrift.value.DateTime)value);
      }
      break;

    case DURATION_EXP:
      if (value == null) {
        unsetDurationExp();
      } else {
        setDurationExp((dk.diku.poets.gen.thrift.value.Duration)value);
      }
      break;

    case DOUBLE_EXP:
      if (value == null) {
        unsetDoubleExp();
      } else {
        setDoubleExp((Double)value);
      }
      break;

    case RECORD_EXP:
      if (value == null) {
        unsetRecordExp();
      } else {
        setRecordExp((dk.diku.poets.gen.thrift.value.Record)value);
      }
      break;

    case REF_EXP:
      if (value == null) {
        unsetRefExp();
      } else {
        setRefExp((dk.diku.poets.gen.thrift.value.RefVal)value);
      }
      break;

    case LIST_EXPS:
      if (value == null) {
        unsetListExps();
      } else {
        setListExps((List<Integer>)value);
      }
      break;

    case FIELD_NAME_EXP:
      if (value == null) {
        unsetFieldNameExp();
      } else {
        setFieldNameExp((String)value);
      }
      break;

    case RECORD_PROJ_EXP:
      if (value == null) {
        unsetRecordProjExp();
      } else {
        setRecordProjExp((RecordProj)value);
      }
      break;

    case RECORD_UPDATE_EXP:
      if (value == null) {
        unsetRecordUpdateExp();
      } else {
        setRecordUpdateExp((RecordUpdate)value);
      }
      break;

    case BINARY_OP_EXP:
      if (value == null) {
        unsetBinaryOpExp();
      } else {
        setBinaryOpExp((BinaryOp)value);
      }
      break;

    case VARIABLE_EXP:
      if (value == null) {
        unsetVariableExp();
      } else {
        setVariableExp((String)value);
      }
      break;

    case LAMBDA_EXP:
      if (value == null) {
        unsetLambdaExp();
      } else {
        setLambdaExp((Lambda)value);
      }
      break;

    case APPLICATION_EXP:
      if (value == null) {
        unsetApplicationExp();
      } else {
        setApplicationExp((Application)value);
      }
      break;

    case FUNCTION_EXP:
      if (value == null) {
        unsetFunctionExp();
      } else {
        setFunctionExp((Function)value);
      }
      break;

    case IF_THEN_ELSE_EXP:
      if (value == null) {
        unsetIfThenElseExp();
      } else {
        setIfThenElseExp((IfThenElse)value);
      }
      break;

    case CASE_EXP:
      if (value == null) {
        unsetCaseExp();
      } else {
        setCaseExp((Case)value);
      }
      break;

    case UNIT_EXP:
      if (value == null) {
        unsetUnitExp();
      } else {
        setUnitExp((Unit)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_EXP:
      return Integer.valueOf(getIntExp());

    case BOOL_EXP:
      return Boolean.valueOf(isBoolExp());

    case STRING_EXP:
      return getStringExp();

    case DATE_TIME_EXP:
      return getDateTimeExp();

    case DURATION_EXP:
      return getDurationExp();

    case DOUBLE_EXP:
      return Double.valueOf(getDoubleExp());

    case RECORD_EXP:
      return getRecordExp();

    case REF_EXP:
      return getRefExp();

    case LIST_EXPS:
      return getListExps();

    case FIELD_NAME_EXP:
      return getFieldNameExp();

    case RECORD_PROJ_EXP:
      return getRecordProjExp();

    case RECORD_UPDATE_EXP:
      return getRecordUpdateExp();

    case BINARY_OP_EXP:
      return getBinaryOpExp();

    case VARIABLE_EXP:
      return getVariableExp();

    case LAMBDA_EXP:
      return getLambdaExp();

    case APPLICATION_EXP:
      return getApplicationExp();

    case FUNCTION_EXP:
      return getFunctionExp();

    case IF_THEN_ELSE_EXP:
      return getIfThenElseExp();

    case CASE_EXP:
      return getCaseExp();

    case UNIT_EXP:
      return getUnitExp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INT_EXP:
      return isSetIntExp();
    case BOOL_EXP:
      return isSetBoolExp();
    case STRING_EXP:
      return isSetStringExp();
    case DATE_TIME_EXP:
      return isSetDateTimeExp();
    case DURATION_EXP:
      return isSetDurationExp();
    case DOUBLE_EXP:
      return isSetDoubleExp();
    case RECORD_EXP:
      return isSetRecordExp();
    case REF_EXP:
      return isSetRefExp();
    case LIST_EXPS:
      return isSetListExps();
    case FIELD_NAME_EXP:
      return isSetFieldNameExp();
    case RECORD_PROJ_EXP:
      return isSetRecordProjExp();
    case RECORD_UPDATE_EXP:
      return isSetRecordUpdateExp();
    case BINARY_OP_EXP:
      return isSetBinaryOpExp();
    case VARIABLE_EXP:
      return isSetVariableExp();
    case LAMBDA_EXP:
      return isSetLambdaExp();
    case APPLICATION_EXP:
      return isSetApplicationExp();
    case FUNCTION_EXP:
      return isSetFunctionExp();
    case IF_THEN_ELSE_EXP:
      return isSetIfThenElseExp();
    case CASE_EXP:
      return isSetCaseExp();
    case UNIT_EXP:
      return isSetUnitExp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Exp)
      return this.equals((Exp)that);
    return false;
  }

  public boolean equals(Exp that) {
    if (that == null)
      return false;

    boolean this_present_intExp = true && this.isSetIntExp();
    boolean that_present_intExp = true && that.isSetIntExp();
    if (this_present_intExp || that_present_intExp) {
      if (!(this_present_intExp && that_present_intExp))
        return false;
      if (this.intExp != that.intExp)
        return false;
    }

    boolean this_present_boolExp = true && this.isSetBoolExp();
    boolean that_present_boolExp = true && that.isSetBoolExp();
    if (this_present_boolExp || that_present_boolExp) {
      if (!(this_present_boolExp && that_present_boolExp))
        return false;
      if (this.boolExp != that.boolExp)
        return false;
    }

    boolean this_present_stringExp = true && this.isSetStringExp();
    boolean that_present_stringExp = true && that.isSetStringExp();
    if (this_present_stringExp || that_present_stringExp) {
      if (!(this_present_stringExp && that_present_stringExp))
        return false;
      if (!this.stringExp.equals(that.stringExp))
        return false;
    }

    boolean this_present_dateTimeExp = true && this.isSetDateTimeExp();
    boolean that_present_dateTimeExp = true && that.isSetDateTimeExp();
    if (this_present_dateTimeExp || that_present_dateTimeExp) {
      if (!(this_present_dateTimeExp && that_present_dateTimeExp))
        return false;
      if (!this.dateTimeExp.equals(that.dateTimeExp))
        return false;
    }

    boolean this_present_durationExp = true && this.isSetDurationExp();
    boolean that_present_durationExp = true && that.isSetDurationExp();
    if (this_present_durationExp || that_present_durationExp) {
      if (!(this_present_durationExp && that_present_durationExp))
        return false;
      if (!this.durationExp.equals(that.durationExp))
        return false;
    }

    boolean this_present_doubleExp = true && this.isSetDoubleExp();
    boolean that_present_doubleExp = true && that.isSetDoubleExp();
    if (this_present_doubleExp || that_present_doubleExp) {
      if (!(this_present_doubleExp && that_present_doubleExp))
        return false;
      if (this.doubleExp != that.doubleExp)
        return false;
    }

    boolean this_present_recordExp = true && this.isSetRecordExp();
    boolean that_present_recordExp = true && that.isSetRecordExp();
    if (this_present_recordExp || that_present_recordExp) {
      if (!(this_present_recordExp && that_present_recordExp))
        return false;
      if (!this.recordExp.equals(that.recordExp))
        return false;
    }

    boolean this_present_refExp = true && this.isSetRefExp();
    boolean that_present_refExp = true && that.isSetRefExp();
    if (this_present_refExp || that_present_refExp) {
      if (!(this_present_refExp && that_present_refExp))
        return false;
      if (!this.refExp.equals(that.refExp))
        return false;
    }

    boolean this_present_listExps = true && this.isSetListExps();
    boolean that_present_listExps = true && that.isSetListExps();
    if (this_present_listExps || that_present_listExps) {
      if (!(this_present_listExps && that_present_listExps))
        return false;
      if (!this.listExps.equals(that.listExps))
        return false;
    }

    boolean this_present_fieldNameExp = true && this.isSetFieldNameExp();
    boolean that_present_fieldNameExp = true && that.isSetFieldNameExp();
    if (this_present_fieldNameExp || that_present_fieldNameExp) {
      if (!(this_present_fieldNameExp && that_present_fieldNameExp))
        return false;
      if (!this.fieldNameExp.equals(that.fieldNameExp))
        return false;
    }

    boolean this_present_recordProjExp = true && this.isSetRecordProjExp();
    boolean that_present_recordProjExp = true && that.isSetRecordProjExp();
    if (this_present_recordProjExp || that_present_recordProjExp) {
      if (!(this_present_recordProjExp && that_present_recordProjExp))
        return false;
      if (!this.recordProjExp.equals(that.recordProjExp))
        return false;
    }

    boolean this_present_recordUpdateExp = true && this.isSetRecordUpdateExp();
    boolean that_present_recordUpdateExp = true && that.isSetRecordUpdateExp();
    if (this_present_recordUpdateExp || that_present_recordUpdateExp) {
      if (!(this_present_recordUpdateExp && that_present_recordUpdateExp))
        return false;
      if (!this.recordUpdateExp.equals(that.recordUpdateExp))
        return false;
    }

    boolean this_present_binaryOpExp = true && this.isSetBinaryOpExp();
    boolean that_present_binaryOpExp = true && that.isSetBinaryOpExp();
    if (this_present_binaryOpExp || that_present_binaryOpExp) {
      if (!(this_present_binaryOpExp && that_present_binaryOpExp))
        return false;
      if (!this.binaryOpExp.equals(that.binaryOpExp))
        return false;
    }

    boolean this_present_variableExp = true && this.isSetVariableExp();
    boolean that_present_variableExp = true && that.isSetVariableExp();
    if (this_present_variableExp || that_present_variableExp) {
      if (!(this_present_variableExp && that_present_variableExp))
        return false;
      if (!this.variableExp.equals(that.variableExp))
        return false;
    }

    boolean this_present_lambdaExp = true && this.isSetLambdaExp();
    boolean that_present_lambdaExp = true && that.isSetLambdaExp();
    if (this_present_lambdaExp || that_present_lambdaExp) {
      if (!(this_present_lambdaExp && that_present_lambdaExp))
        return false;
      if (!this.lambdaExp.equals(that.lambdaExp))
        return false;
    }

    boolean this_present_applicationExp = true && this.isSetApplicationExp();
    boolean that_present_applicationExp = true && that.isSetApplicationExp();
    if (this_present_applicationExp || that_present_applicationExp) {
      if (!(this_present_applicationExp && that_present_applicationExp))
        return false;
      if (!this.applicationExp.equals(that.applicationExp))
        return false;
    }

    boolean this_present_functionExp = true && this.isSetFunctionExp();
    boolean that_present_functionExp = true && that.isSetFunctionExp();
    if (this_present_functionExp || that_present_functionExp) {
      if (!(this_present_functionExp && that_present_functionExp))
        return false;
      if (!this.functionExp.equals(that.functionExp))
        return false;
    }

    boolean this_present_ifThenElseExp = true && this.isSetIfThenElseExp();
    boolean that_present_ifThenElseExp = true && that.isSetIfThenElseExp();
    if (this_present_ifThenElseExp || that_present_ifThenElseExp) {
      if (!(this_present_ifThenElseExp && that_present_ifThenElseExp))
        return false;
      if (!this.ifThenElseExp.equals(that.ifThenElseExp))
        return false;
    }

    boolean this_present_caseExp = true && this.isSetCaseExp();
    boolean that_present_caseExp = true && that.isSetCaseExp();
    if (this_present_caseExp || that_present_caseExp) {
      if (!(this_present_caseExp && that_present_caseExp))
        return false;
      if (!this.caseExp.equals(that.caseExp))
        return false;
    }

    boolean this_present_unitExp = true && this.isSetUnitExp();
    boolean that_present_unitExp = true && that.isSetUnitExp();
    if (this_present_unitExp || that_present_unitExp) {
      if (!(this_present_unitExp && that_present_unitExp))
        return false;
      if (!this.unitExp.equals(that.unitExp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Exp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Exp typedOther = (Exp)other;

    lastComparison = Boolean.valueOf(isSetIntExp()).compareTo(typedOther.isSetIntExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intExp, typedOther.intExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolExp()).compareTo(typedOther.isSetBoolExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolExp, typedOther.boolExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringExp()).compareTo(typedOther.isSetStringExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringExp, typedOther.stringExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTimeExp()).compareTo(typedOther.isSetDateTimeExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTimeExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTimeExp, typedOther.dateTimeExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurationExp()).compareTo(typedOther.isSetDurationExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationExp, typedOther.durationExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleExp()).compareTo(typedOther.isSetDoubleExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleExp, typedOther.doubleExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordExp()).compareTo(typedOther.isSetRecordExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordExp, typedOther.recordExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefExp()).compareTo(typedOther.isSetRefExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refExp, typedOther.refExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListExps()).compareTo(typedOther.isSetListExps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListExps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listExps, typedOther.listExps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldNameExp()).compareTo(typedOther.isSetFieldNameExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldNameExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldNameExp, typedOther.fieldNameExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordProjExp()).compareTo(typedOther.isSetRecordProjExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordProjExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordProjExp, typedOther.recordProjExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordUpdateExp()).compareTo(typedOther.isSetRecordUpdateExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordUpdateExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordUpdateExp, typedOther.recordUpdateExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryOpExp()).compareTo(typedOther.isSetBinaryOpExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryOpExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryOpExp, typedOther.binaryOpExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVariableExp()).compareTo(typedOther.isSetVariableExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariableExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variableExp, typedOther.variableExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLambdaExp()).compareTo(typedOther.isSetLambdaExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLambdaExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lambdaExp, typedOther.lambdaExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationExp()).compareTo(typedOther.isSetApplicationExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationExp, typedOther.applicationExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunctionExp()).compareTo(typedOther.isSetFunctionExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionExp, typedOther.functionExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIfThenElseExp()).compareTo(typedOther.isSetIfThenElseExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIfThenElseExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifThenElseExp, typedOther.ifThenElseExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaseExp()).compareTo(typedOther.isSetCaseExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseExp, typedOther.caseExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitExp()).compareTo(typedOther.isSetUnitExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitExp, typedOther.unitExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Exp(");
    boolean first = true;

    if (isSetIntExp()) {
      sb.append("intExp:");
      sb.append(this.intExp);
      first = false;
    }
    if (isSetBoolExp()) {
      if (!first) sb.append(", ");
      sb.append("boolExp:");
      sb.append(this.boolExp);
      first = false;
    }
    if (isSetStringExp()) {
      if (!first) sb.append(", ");
      sb.append("stringExp:");
      if (this.stringExp == null) {
        sb.append("null");
      } else {
        sb.append(this.stringExp);
      }
      first = false;
    }
    if (isSetDateTimeExp()) {
      if (!first) sb.append(", ");
      sb.append("dateTimeExp:");
      if (this.dateTimeExp == null) {
        sb.append("null");
      } else {
        sb.append(this.dateTimeExp);
      }
      first = false;
    }
    if (isSetDurationExp()) {
      if (!first) sb.append(", ");
      sb.append("durationExp:");
      if (this.durationExp == null) {
        sb.append("null");
      } else {
        sb.append(this.durationExp);
      }
      first = false;
    }
    if (isSetDoubleExp()) {
      if (!first) sb.append(", ");
      sb.append("doubleExp:");
      sb.append(this.doubleExp);
      first = false;
    }
    if (isSetRecordExp()) {
      if (!first) sb.append(", ");
      sb.append("recordExp:");
      if (this.recordExp == null) {
        sb.append("null");
      } else {
        sb.append(this.recordExp);
      }
      first = false;
    }
    if (isSetRefExp()) {
      if (!first) sb.append(", ");
      sb.append("refExp:");
      if (this.refExp == null) {
        sb.append("null");
      } else {
        sb.append(this.refExp);
      }
      first = false;
    }
    if (isSetListExps()) {
      if (!first) sb.append(", ");
      sb.append("listExps:");
      if (this.listExps == null) {
        sb.append("null");
      } else {
        sb.append(this.listExps);
      }
      first = false;
    }
    if (isSetFieldNameExp()) {
      if (!first) sb.append(", ");
      sb.append("fieldNameExp:");
      if (this.fieldNameExp == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldNameExp);
      }
      first = false;
    }
    if (isSetRecordProjExp()) {
      if (!first) sb.append(", ");
      sb.append("recordProjExp:");
      if (this.recordProjExp == null) {
        sb.append("null");
      } else {
        sb.append(this.recordProjExp);
      }
      first = false;
    }
    if (isSetRecordUpdateExp()) {
      if (!first) sb.append(", ");
      sb.append("recordUpdateExp:");
      if (this.recordUpdateExp == null) {
        sb.append("null");
      } else {
        sb.append(this.recordUpdateExp);
      }
      first = false;
    }
    if (isSetBinaryOpExp()) {
      if (!first) sb.append(", ");
      sb.append("binaryOpExp:");
      if (this.binaryOpExp == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryOpExp);
      }
      first = false;
    }
    if (isSetVariableExp()) {
      if (!first) sb.append(", ");
      sb.append("variableExp:");
      if (this.variableExp == null) {
        sb.append("null");
      } else {
        sb.append(this.variableExp);
      }
      first = false;
    }
    if (isSetLambdaExp()) {
      if (!first) sb.append(", ");
      sb.append("lambdaExp:");
      if (this.lambdaExp == null) {
        sb.append("null");
      } else {
        sb.append(this.lambdaExp);
      }
      first = false;
    }
    if (isSetApplicationExp()) {
      if (!first) sb.append(", ");
      sb.append("applicationExp:");
      if (this.applicationExp == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationExp);
      }
      first = false;
    }
    if (isSetFunctionExp()) {
      if (!first) sb.append(", ");
      sb.append("functionExp:");
      if (this.functionExp == null) {
        sb.append("null");
      } else {
        sb.append(this.functionExp);
      }
      first = false;
    }
    if (isSetIfThenElseExp()) {
      if (!first) sb.append(", ");
      sb.append("ifThenElseExp:");
      if (this.ifThenElseExp == null) {
        sb.append("null");
      } else {
        sb.append(this.ifThenElseExp);
      }
      first = false;
    }
    if (isSetCaseExp()) {
      if (!first) sb.append(", ");
      sb.append("caseExp:");
      if (this.caseExp == null) {
        sb.append("null");
      } else {
        sb.append(this.caseExp);
      }
      first = false;
    }
    if (isSetUnitExp()) {
      if (!first) sb.append(", ");
      sb.append("unitExp:");
      if (this.unitExp == null) {
        sb.append("null");
      } else {
        sb.append(this.unitExp);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExpStandardSchemeFactory implements SchemeFactory {
    public ExpStandardScheme getScheme() {
      return new ExpStandardScheme();
    }
  }

  private static class ExpStandardScheme extends StandardScheme<Exp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Exp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intExp = iprot.readI32();
              struct.setIntExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolExp = iprot.readBool();
              struct.setBoolExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringExp = iprot.readString();
              struct.setStringExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_TIME_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateTimeExp = new dk.diku.poets.gen.thrift.value.DateTime();
              struct.dateTimeExp.read(iprot);
              struct.setDateTimeExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DURATION_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.durationExp = new dk.diku.poets.gen.thrift.value.Duration();
              struct.durationExp.read(iprot);
              struct.setDurationExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleExp = iprot.readDouble();
              struct.setDoubleExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECORD_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordExp = new dk.diku.poets.gen.thrift.value.Record();
              struct.recordExp.read(iprot);
              struct.setRecordExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REF_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.refExp = new dk.diku.poets.gen.thrift.value.RefVal();
              struct.refExp.read(iprot);
              struct.setRefExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIST_EXPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.listExps = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10; // required
                  _elem10 = iprot.readI32();
                  struct.listExps.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setListExpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIELD_NAME_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldNameExp = iprot.readString();
              struct.setFieldNameExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECORD_PROJ_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordProjExp = new RecordProj();
              struct.recordProjExp.read(iprot);
              struct.setRecordProjExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RECORD_UPDATE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recordUpdateExp = new RecordUpdate();
              struct.recordUpdateExp.read(iprot);
              struct.setRecordUpdateExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BINARY_OP_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.binaryOpExp = new BinaryOp();
              struct.binaryOpExp.read(iprot);
              struct.setBinaryOpExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VARIABLE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variableExp = iprot.readString();
              struct.setVariableExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAMBDA_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lambdaExp = new Lambda();
              struct.lambdaExp.read(iprot);
              struct.setLambdaExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // APPLICATION_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.applicationExp = new Application();
              struct.applicationExp.read(iprot);
              struct.setApplicationExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FUNCTION_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.functionExp = Function.findByValue(iprot.readI32());
              struct.setFunctionExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IF_THEN_ELSE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ifThenElseExp = new IfThenElse();
              struct.ifThenElseExp.read(iprot);
              struct.setIfThenElseExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CASE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.caseExp = new Case();
              struct.caseExp.read(iprot);
              struct.setCaseExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UNIT_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unitExp = new Unit();
              struct.unitExp.read(iprot);
              struct.setUnitExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Exp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIntExp()) {
        oprot.writeFieldBegin(INT_EXP_FIELD_DESC);
        oprot.writeI32(struct.intExp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolExp()) {
        oprot.writeFieldBegin(BOOL_EXP_FIELD_DESC);
        oprot.writeBool(struct.boolExp);
        oprot.writeFieldEnd();
      }
      if (struct.stringExp != null) {
        if (struct.isSetStringExp()) {
          oprot.writeFieldBegin(STRING_EXP_FIELD_DESC);
          oprot.writeString(struct.stringExp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateTimeExp != null) {
        if (struct.isSetDateTimeExp()) {
          oprot.writeFieldBegin(DATE_TIME_EXP_FIELD_DESC);
          struct.dateTimeExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.durationExp != null) {
        if (struct.isSetDurationExp()) {
          oprot.writeFieldBegin(DURATION_EXP_FIELD_DESC);
          struct.durationExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoubleExp()) {
        oprot.writeFieldBegin(DOUBLE_EXP_FIELD_DESC);
        oprot.writeDouble(struct.doubleExp);
        oprot.writeFieldEnd();
      }
      if (struct.recordExp != null) {
        if (struct.isSetRecordExp()) {
          oprot.writeFieldBegin(RECORD_EXP_FIELD_DESC);
          struct.recordExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refExp != null) {
        if (struct.isSetRefExp()) {
          oprot.writeFieldBegin(REF_EXP_FIELD_DESC);
          struct.refExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.listExps != null) {
        if (struct.isSetListExps()) {
          oprot.writeFieldBegin(LIST_EXPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.listExps.size()));
            for (int _iter11 : struct.listExps)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldNameExp != null) {
        if (struct.isSetFieldNameExp()) {
          oprot.writeFieldBegin(FIELD_NAME_EXP_FIELD_DESC);
          oprot.writeString(struct.fieldNameExp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recordProjExp != null) {
        if (struct.isSetRecordProjExp()) {
          oprot.writeFieldBegin(RECORD_PROJ_EXP_FIELD_DESC);
          struct.recordProjExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recordUpdateExp != null) {
        if (struct.isSetRecordUpdateExp()) {
          oprot.writeFieldBegin(RECORD_UPDATE_EXP_FIELD_DESC);
          struct.recordUpdateExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryOpExp != null) {
        if (struct.isSetBinaryOpExp()) {
          oprot.writeFieldBegin(BINARY_OP_EXP_FIELD_DESC);
          struct.binaryOpExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variableExp != null) {
        if (struct.isSetVariableExp()) {
          oprot.writeFieldBegin(VARIABLE_EXP_FIELD_DESC);
          oprot.writeString(struct.variableExp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lambdaExp != null) {
        if (struct.isSetLambdaExp()) {
          oprot.writeFieldBegin(LAMBDA_EXP_FIELD_DESC);
          struct.lambdaExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationExp != null) {
        if (struct.isSetApplicationExp()) {
          oprot.writeFieldBegin(APPLICATION_EXP_FIELD_DESC);
          struct.applicationExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.functionExp != null) {
        if (struct.isSetFunctionExp()) {
          oprot.writeFieldBegin(FUNCTION_EXP_FIELD_DESC);
          oprot.writeI32(struct.functionExp.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.ifThenElseExp != null) {
        if (struct.isSetIfThenElseExp()) {
          oprot.writeFieldBegin(IF_THEN_ELSE_EXP_FIELD_DESC);
          struct.ifThenElseExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.caseExp != null) {
        if (struct.isSetCaseExp()) {
          oprot.writeFieldBegin(CASE_EXP_FIELD_DESC);
          struct.caseExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unitExp != null) {
        if (struct.isSetUnitExp()) {
          oprot.writeFieldBegin(UNIT_EXP_FIELD_DESC);
          struct.unitExp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExpTupleSchemeFactory implements SchemeFactory {
    public ExpTupleScheme getScheme() {
      return new ExpTupleScheme();
    }
  }

  private static class ExpTupleScheme extends TupleScheme<Exp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Exp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIntExp()) {
        optionals.set(0);
      }
      if (struct.isSetBoolExp()) {
        optionals.set(1);
      }
      if (struct.isSetStringExp()) {
        optionals.set(2);
      }
      if (struct.isSetDateTimeExp()) {
        optionals.set(3);
      }
      if (struct.isSetDurationExp()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleExp()) {
        optionals.set(5);
      }
      if (struct.isSetRecordExp()) {
        optionals.set(6);
      }
      if (struct.isSetRefExp()) {
        optionals.set(7);
      }
      if (struct.isSetListExps()) {
        optionals.set(8);
      }
      if (struct.isSetFieldNameExp()) {
        optionals.set(9);
      }
      if (struct.isSetRecordProjExp()) {
        optionals.set(10);
      }
      if (struct.isSetRecordUpdateExp()) {
        optionals.set(11);
      }
      if (struct.isSetBinaryOpExp()) {
        optionals.set(12);
      }
      if (struct.isSetVariableExp()) {
        optionals.set(13);
      }
      if (struct.isSetLambdaExp()) {
        optionals.set(14);
      }
      if (struct.isSetApplicationExp()) {
        optionals.set(15);
      }
      if (struct.isSetFunctionExp()) {
        optionals.set(16);
      }
      if (struct.isSetIfThenElseExp()) {
        optionals.set(17);
      }
      if (struct.isSetCaseExp()) {
        optionals.set(18);
      }
      if (struct.isSetUnitExp()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetIntExp()) {
        oprot.writeI32(struct.intExp);
      }
      if (struct.isSetBoolExp()) {
        oprot.writeBool(struct.boolExp);
      }
      if (struct.isSetStringExp()) {
        oprot.writeString(struct.stringExp);
      }
      if (struct.isSetDateTimeExp()) {
        struct.dateTimeExp.write(oprot);
      }
      if (struct.isSetDurationExp()) {
        struct.durationExp.write(oprot);
      }
      if (struct.isSetDoubleExp()) {
        oprot.writeDouble(struct.doubleExp);
      }
      if (struct.isSetRecordExp()) {
        struct.recordExp.write(oprot);
      }
      if (struct.isSetRefExp()) {
        struct.refExp.write(oprot);
      }
      if (struct.isSetListExps()) {
        {
          oprot.writeI32(struct.listExps.size());
          for (int _iter12 : struct.listExps)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetFieldNameExp()) {
        oprot.writeString(struct.fieldNameExp);
      }
      if (struct.isSetRecordProjExp()) {
        struct.recordProjExp.write(oprot);
      }
      if (struct.isSetRecordUpdateExp()) {
        struct.recordUpdateExp.write(oprot);
      }
      if (struct.isSetBinaryOpExp()) {
        struct.binaryOpExp.write(oprot);
      }
      if (struct.isSetVariableExp()) {
        oprot.writeString(struct.variableExp);
      }
      if (struct.isSetLambdaExp()) {
        struct.lambdaExp.write(oprot);
      }
      if (struct.isSetApplicationExp()) {
        struct.applicationExp.write(oprot);
      }
      if (struct.isSetFunctionExp()) {
        oprot.writeI32(struct.functionExp.getValue());
      }
      if (struct.isSetIfThenElseExp()) {
        struct.ifThenElseExp.write(oprot);
      }
      if (struct.isSetCaseExp()) {
        struct.caseExp.write(oprot);
      }
      if (struct.isSetUnitExp()) {
        struct.unitExp.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Exp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.intExp = iprot.readI32();
        struct.setIntExpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.boolExp = iprot.readBool();
        struct.setBoolExpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stringExp = iprot.readString();
        struct.setStringExpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateTimeExp = new dk.diku.poets.gen.thrift.value.DateTime();
        struct.dateTimeExp.read(iprot);
        struct.setDateTimeExpIsSet(true);
      }
      if (incoming.get(4)) {
        struct.durationExp = new dk.diku.poets.gen.thrift.value.Duration();
        struct.durationExp.read(iprot);
        struct.setDurationExpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleExp = iprot.readDouble();
        struct.setDoubleExpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recordExp = new dk.diku.poets.gen.thrift.value.Record();
        struct.recordExp.read(iprot);
        struct.setRecordExpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refExp = new dk.diku.poets.gen.thrift.value.RefVal();
        struct.refExp.read(iprot);
        struct.setRefExpIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.listExps = new ArrayList<Integer>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            int _elem15; // required
            _elem15 = iprot.readI32();
            struct.listExps.add(_elem15);
          }
        }
        struct.setListExpsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fieldNameExp = iprot.readString();
        struct.setFieldNameExpIsSet(true);
      }
      if (incoming.get(10)) {
        struct.recordProjExp = new RecordProj();
        struct.recordProjExp.read(iprot);
        struct.setRecordProjExpIsSet(true);
      }
      if (incoming.get(11)) {
        struct.recordUpdateExp = new RecordUpdate();
        struct.recordUpdateExp.read(iprot);
        struct.setRecordUpdateExpIsSet(true);
      }
      if (incoming.get(12)) {
        struct.binaryOpExp = new BinaryOp();
        struct.binaryOpExp.read(iprot);
        struct.setBinaryOpExpIsSet(true);
      }
      if (incoming.get(13)) {
        struct.variableExp = iprot.readString();
        struct.setVariableExpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lambdaExp = new Lambda();
        struct.lambdaExp.read(iprot);
        struct.setLambdaExpIsSet(true);
      }
      if (incoming.get(15)) {
        struct.applicationExp = new Application();
        struct.applicationExp.read(iprot);
        struct.setApplicationExpIsSet(true);
      }
      if (incoming.get(16)) {
        struct.functionExp = Function.findByValue(iprot.readI32());
        struct.setFunctionExpIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ifThenElseExp = new IfThenElse();
        struct.ifThenElseExp.read(iprot);
        struct.setIfThenElseExpIsSet(true);
      }
      if (incoming.get(18)) {
        struct.caseExp = new Case();
        struct.caseExp.read(iprot);
        struct.setCaseExpIsSet(true);
      }
      if (incoming.get(19)) {
        struct.unitExp = new Unit();
        struct.unitExp.read(iprot);
        struct.setUnitExpIsSet(true);
      }
    }
  }

}

