/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ContractBreach extends Exception implements org.apache.thrift.TBase<ContractBreach, ContractBreach._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractBreach");

  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESPONSIBLES_FIELD_DESC = new org.apache.thrift.protocol.TField("responsibles", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractBreachStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractBreachTupleSchemeFactory());
  }

  public int contractId; // required
  public dk.diku.poets.gen.thrift.value.DateTime dateTime; // required
  public List<Breach> responsibles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_ID((short)1, "contractId"),
    DATE_TIME((short)2, "dateTime"),
    RESPONSIBLES((short)3, "responsibles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_ID
          return CONTRACT_ID;
        case 2: // DATE_TIME
          return DATE_TIME;
        case 3: // RESPONSIBLES
          return RESPONSIBLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTRACTID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "ContractId")));
    tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, dk.diku.poets.gen.thrift.value.DateTime.class)));
    tmpMap.put(_Fields.RESPONSIBLES, new org.apache.thrift.meta_data.FieldMetaData("responsibles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Breach.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractBreach.class, metaDataMap);
  }

  public ContractBreach() {
  }

  public ContractBreach(
    int contractId,
    dk.diku.poets.gen.thrift.value.DateTime dateTime,
    List<Breach> responsibles)
  {
    this();
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.dateTime = dateTime;
    this.responsibles = responsibles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractBreach(ContractBreach other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.contractId = other.contractId;
    if (other.isSetDateTime()) {
      this.dateTime = new dk.diku.poets.gen.thrift.value.DateTime(other.dateTime);
    }
    if (other.isSetResponsibles()) {
      List<Breach> __this__responsibles = new ArrayList<Breach>();
      for (Breach other_element : other.responsibles) {
        __this__responsibles.add(new Breach(other_element));
      }
      this.responsibles = __this__responsibles;
    }
  }

  public ContractBreach deepCopy() {
    return new ContractBreach(this);
  }

  @Override
  public void clear() {
    setContractIdIsSet(false);
    this.contractId = 0;
    this.dateTime = null;
    this.responsibles = null;
  }

  public int getContractId() {
    return this.contractId;
  }

  public ContractBreach setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bit_vector.clear(__CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return __isset_bit_vector.get(__CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bit_vector.set(__CONTRACTID_ISSET_ID, value);
  }

  public dk.diku.poets.gen.thrift.value.DateTime getDateTime() {
    return this.dateTime;
  }

  public ContractBreach setDateTime(dk.diku.poets.gen.thrift.value.DateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  public void unsetDateTime() {
    this.dateTime = null;
  }

  /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTime() {
    return this.dateTime != null;
  }

  public void setDateTimeIsSet(boolean value) {
    if (!value) {
      this.dateTime = null;
    }
  }

  public int getResponsiblesSize() {
    return (this.responsibles == null) ? 0 : this.responsibles.size();
  }

  public java.util.Iterator<Breach> getResponsiblesIterator() {
    return (this.responsibles == null) ? null : this.responsibles.iterator();
  }

  public void addToResponsibles(Breach elem) {
    if (this.responsibles == null) {
      this.responsibles = new ArrayList<Breach>();
    }
    this.responsibles.add(elem);
  }

  public List<Breach> getResponsibles() {
    return this.responsibles;
  }

  public ContractBreach setResponsibles(List<Breach> responsibles) {
    this.responsibles = responsibles;
    return this;
  }

  public void unsetResponsibles() {
    this.responsibles = null;
  }

  /** Returns true if field responsibles is set (has been assigned a value) and false otherwise */
  public boolean isSetResponsibles() {
    return this.responsibles != null;
  }

  public void setResponsiblesIsSet(boolean value) {
    if (!value) {
      this.responsibles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case DATE_TIME:
      if (value == null) {
        unsetDateTime();
      } else {
        setDateTime((dk.diku.poets.gen.thrift.value.DateTime)value);
      }
      break;

    case RESPONSIBLES:
      if (value == null) {
        unsetResponsibles();
      } else {
        setResponsibles((List<Breach>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case DATE_TIME:
      return getDateTime();

    case RESPONSIBLES:
      return getResponsibles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_ID:
      return isSetContractId();
    case DATE_TIME:
      return isSetDateTime();
    case RESPONSIBLES:
      return isSetResponsibles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractBreach)
      return this.equals((ContractBreach)that);
    return false;
  }

  public boolean equals(ContractBreach that) {
    if (that == null)
      return false;

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_dateTime = true && this.isSetDateTime();
    boolean that_present_dateTime = true && that.isSetDateTime();
    if (this_present_dateTime || that_present_dateTime) {
      if (!(this_present_dateTime && that_present_dateTime))
        return false;
      if (!this.dateTime.equals(that.dateTime))
        return false;
    }

    boolean this_present_responsibles = true && this.isSetResponsibles();
    boolean that_present_responsibles = true && that.isSetResponsibles();
    if (this_present_responsibles || that_present_responsibles) {
      if (!(this_present_responsibles && that_present_responsibles))
        return false;
      if (!this.responsibles.equals(that.responsibles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ContractBreach other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ContractBreach typedOther = (ContractBreach)other;

    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(typedOther.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, typedOther.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(typedOther.isSetDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, typedOther.dateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponsibles()).compareTo(typedOther.isSetResponsibles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponsibles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responsibles, typedOther.responsibles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractBreach(");
    boolean first = true;

    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateTime:");
    if (this.dateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responsibles:");
    if (this.responsibles == null) {
      sb.append("null");
    } else {
      sb.append(this.responsibles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractBreachStandardSchemeFactory implements SchemeFactory {
    public ContractBreachStandardScheme getScheme() {
      return new ContractBreachStandardScheme();
    }
  }

  private static class ContractBreachStandardScheme extends StandardScheme<ContractBreach> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractBreach struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateTime = new dk.diku.poets.gen.thrift.value.DateTime();
              struct.dateTime.read(iprot);
              struct.setDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESPONSIBLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.responsibles = new ArrayList<Breach>(_list76.size);
                for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                {
                  Breach _elem78; // required
                  _elem78 = new Breach();
                  _elem78.read(iprot);
                  struct.responsibles.add(_elem78);
                }
                iprot.readListEnd();
              }
              struct.setResponsiblesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractBreach struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      if (struct.dateTime != null) {
        oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
        struct.dateTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.responsibles != null) {
        oprot.writeFieldBegin(RESPONSIBLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.responsibles.size()));
          for (Breach _iter79 : struct.responsibles)
          {
            _iter79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractBreachTupleSchemeFactory implements SchemeFactory {
    public ContractBreachTupleScheme getScheme() {
      return new ContractBreachTupleScheme();
    }
  }

  private static class ContractBreachTupleScheme extends TupleScheme<ContractBreach> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractBreach struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractId()) {
        optionals.set(0);
      }
      if (struct.isSetDateTime()) {
        optionals.set(1);
      }
      if (struct.isSetResponsibles()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetDateTime()) {
        struct.dateTime.write(oprot);
      }
      if (struct.isSetResponsibles()) {
        {
          oprot.writeI32(struct.responsibles.size());
          for (Breach _iter80 : struct.responsibles)
          {
            _iter80.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractBreach struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dateTime = new dk.diku.poets.gen.thrift.value.DateTime();
        struct.dateTime.read(iprot);
        struct.setDateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.responsibles = new ArrayList<Breach>(_list81.size);
          for (int _i82 = 0; _i82 < _list81.size; ++_i82)
          {
            Breach _elem83; // required
            _elem83 = new Breach();
            _elem83.read(iprot);
            struct.responsibles.add(_elem83);
          }
        }
        struct.setResponsiblesIsSet(true);
      }
    }
  }

}

