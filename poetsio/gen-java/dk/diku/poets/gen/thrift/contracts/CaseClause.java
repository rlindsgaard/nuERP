/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CaseClause implements org.apache.thrift.TBase<CaseClause, CaseClause._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CaseClause");

  private static final org.apache.thrift.protocol.TField CASE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("caseExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CASES_FIELD_DESC = new org.apache.thrift.protocol.TField("cases", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CaseClauseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CaseClauseTupleSchemeFactory());
  }

  public Expression caseExp; // required
  public List<CaseC> cases; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CASE_EXP((short)1, "caseExp"),
    CASES((short)2, "cases");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CASE_EXP
          return CASE_EXP;
        case 2: // CASES
          return CASES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CASE_EXP, new org.apache.thrift.meta_data.FieldMetaData("caseExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Expression.class)));
    tmpMap.put(_Fields.CASES, new org.apache.thrift.meta_data.FieldMetaData("cases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CaseC.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CaseClause.class, metaDataMap);
  }

  public CaseClause() {
  }

  public CaseClause(
    Expression caseExp,
    List<CaseC> cases)
  {
    this();
    this.caseExp = caseExp;
    this.cases = cases;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CaseClause(CaseClause other) {
    if (other.isSetCaseExp()) {
      this.caseExp = new Expression(other.caseExp);
    }
    if (other.isSetCases()) {
      List<CaseC> __this__cases = new ArrayList<CaseC>();
      for (CaseC other_element : other.cases) {
        __this__cases.add(new CaseC(other_element));
      }
      this.cases = __this__cases;
    }
  }

  public CaseClause deepCopy() {
    return new CaseClause(this);
  }

  @Override
  public void clear() {
    this.caseExp = null;
    this.cases = null;
  }

  public Expression getCaseExp() {
    return this.caseExp;
  }

  public CaseClause setCaseExp(Expression caseExp) {
    this.caseExp = caseExp;
    return this;
  }

  public void unsetCaseExp() {
    this.caseExp = null;
  }

  /** Returns true if field caseExp is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseExp() {
    return this.caseExp != null;
  }

  public void setCaseExpIsSet(boolean value) {
    if (!value) {
      this.caseExp = null;
    }
  }

  public int getCasesSize() {
    return (this.cases == null) ? 0 : this.cases.size();
  }

  public java.util.Iterator<CaseC> getCasesIterator() {
    return (this.cases == null) ? null : this.cases.iterator();
  }

  public void addToCases(CaseC elem) {
    if (this.cases == null) {
      this.cases = new ArrayList<CaseC>();
    }
    this.cases.add(elem);
  }

  public List<CaseC> getCases() {
    return this.cases;
  }

  public CaseClause setCases(List<CaseC> cases) {
    this.cases = cases;
    return this;
  }

  public void unsetCases() {
    this.cases = null;
  }

  /** Returns true if field cases is set (has been assigned a value) and false otherwise */
  public boolean isSetCases() {
    return this.cases != null;
  }

  public void setCasesIsSet(boolean value) {
    if (!value) {
      this.cases = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CASE_EXP:
      if (value == null) {
        unsetCaseExp();
      } else {
        setCaseExp((Expression)value);
      }
      break;

    case CASES:
      if (value == null) {
        unsetCases();
      } else {
        setCases((List<CaseC>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CASE_EXP:
      return getCaseExp();

    case CASES:
      return getCases();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CASE_EXP:
      return isSetCaseExp();
    case CASES:
      return isSetCases();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CaseClause)
      return this.equals((CaseClause)that);
    return false;
  }

  public boolean equals(CaseClause that) {
    if (that == null)
      return false;

    boolean this_present_caseExp = true && this.isSetCaseExp();
    boolean that_present_caseExp = true && that.isSetCaseExp();
    if (this_present_caseExp || that_present_caseExp) {
      if (!(this_present_caseExp && that_present_caseExp))
        return false;
      if (!this.caseExp.equals(that.caseExp))
        return false;
    }

    boolean this_present_cases = true && this.isSetCases();
    boolean that_present_cases = true && that.isSetCases();
    if (this_present_cases || that_present_cases) {
      if (!(this_present_cases && that_present_cases))
        return false;
      if (!this.cases.equals(that.cases))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CaseClause other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CaseClause typedOther = (CaseClause)other;

    lastComparison = Boolean.valueOf(isSetCaseExp()).compareTo(typedOther.isSetCaseExp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseExp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseExp, typedOther.caseExp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCases()).compareTo(typedOther.isSetCases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cases, typedOther.cases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CaseClause(");
    boolean first = true;

    sb.append("caseExp:");
    if (this.caseExp == null) {
      sb.append("null");
    } else {
      sb.append(this.caseExp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cases:");
    if (this.cases == null) {
      sb.append("null");
    } else {
      sb.append(this.cases);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CaseClauseStandardSchemeFactory implements SchemeFactory {
    public CaseClauseStandardScheme getScheme() {
      return new CaseClauseStandardScheme();
    }
  }

  private static class CaseClauseStandardScheme extends StandardScheme<CaseClause> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CaseClause struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CASE_EXP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.caseExp = new Expression();
              struct.caseExp.read(iprot);
              struct.setCaseExpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.cases = new ArrayList<CaseC>(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  CaseC _elem44; // required
                  _elem44 = new CaseC();
                  _elem44.read(iprot);
                  struct.cases.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setCasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CaseClause struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.caseExp != null) {
        oprot.writeFieldBegin(CASE_EXP_FIELD_DESC);
        struct.caseExp.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cases != null) {
        oprot.writeFieldBegin(CASES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cases.size()));
          for (CaseC _iter45 : struct.cases)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CaseClauseTupleSchemeFactory implements SchemeFactory {
    public CaseClauseTupleScheme getScheme() {
      return new CaseClauseTupleScheme();
    }
  }

  private static class CaseClauseTupleScheme extends TupleScheme<CaseClause> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CaseClause struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCaseExp()) {
        optionals.set(0);
      }
      if (struct.isSetCases()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCaseExp()) {
        struct.caseExp.write(oprot);
      }
      if (struct.isSetCases()) {
        {
          oprot.writeI32(struct.cases.size());
          for (CaseC _iter46 : struct.cases)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CaseClause struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.caseExp = new Expression();
        struct.caseExp.read(iprot);
        struct.setCaseExpIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cases = new ArrayList<CaseC>(_list47.size);
          for (int _i48 = 0; _i48 < _list47.size; ++_i48)
          {
            CaseC _elem49; // required
            _elem49 = new CaseC();
            _elem49.read(iprot);
            struct.cases.add(_elem49);
          }
        }
        struct.setCasesIsSet(true);
      }
    }
  }

}

