/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package dk.diku.poets.gen.thrift.contracts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TemplateTypeMismatchException extends Exception implements org.apache.thrift.TBase<TemplateTypeMismatchException, TemplateTypeMismatchException._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateTypeMismatchException");

  private static final org.apache.thrift.protocol.TField TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_META_DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractMetaDataType", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateTypeMismatchExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TemplateTypeMismatchExceptionTupleSchemeFactory());
  }

  public String templateName; // required
  public String templateType; // required
  public String contractMetaDataType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_NAME((short)1, "templateName"),
    TEMPLATE_TYPE((short)2, "templateType"),
    CONTRACT_META_DATA_TYPE((short)3, "contractMetaDataType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_NAME
          return TEMPLATE_NAME;
        case 2: // TEMPLATE_TYPE
          return TEMPLATE_TYPE;
        case 3: // CONTRACT_META_DATA_TYPE
          return CONTRACT_META_DATA_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TemplateName")));
    tmpMap.put(_Fields.TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("templateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RecordName")));
    tmpMap.put(_Fields.CONTRACT_META_DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractMetaDataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "RecordName")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateTypeMismatchException.class, metaDataMap);
  }

  public TemplateTypeMismatchException() {
  }

  public TemplateTypeMismatchException(
    String templateName,
    String templateType,
    String contractMetaDataType)
  {
    this();
    this.templateName = templateName;
    this.templateType = templateType;
    this.contractMetaDataType = contractMetaDataType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateTypeMismatchException(TemplateTypeMismatchException other) {
    if (other.isSetTemplateName()) {
      this.templateName = other.templateName;
    }
    if (other.isSetTemplateType()) {
      this.templateType = other.templateType;
    }
    if (other.isSetContractMetaDataType()) {
      this.contractMetaDataType = other.contractMetaDataType;
    }
  }

  public TemplateTypeMismatchException deepCopy() {
    return new TemplateTypeMismatchException(this);
  }

  @Override
  public void clear() {
    this.templateName = null;
    this.templateType = null;
    this.contractMetaDataType = null;
  }

  public String getTemplateName() {
    return this.templateName;
  }

  public TemplateTypeMismatchException setTemplateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  public void unsetTemplateName() {
    this.templateName = null;
  }

  /** Returns true if field templateName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateName() {
    return this.templateName != null;
  }

  public void setTemplateNameIsSet(boolean value) {
    if (!value) {
      this.templateName = null;
    }
  }

  public String getTemplateType() {
    return this.templateType;
  }

  public TemplateTypeMismatchException setTemplateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

  public void unsetTemplateType() {
    this.templateType = null;
  }

  /** Returns true if field templateType is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateType() {
    return this.templateType != null;
  }

  public void setTemplateTypeIsSet(boolean value) {
    if (!value) {
      this.templateType = null;
    }
  }

  public String getContractMetaDataType() {
    return this.contractMetaDataType;
  }

  public TemplateTypeMismatchException setContractMetaDataType(String contractMetaDataType) {
    this.contractMetaDataType = contractMetaDataType;
    return this;
  }

  public void unsetContractMetaDataType() {
    this.contractMetaDataType = null;
  }

  /** Returns true if field contractMetaDataType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractMetaDataType() {
    return this.contractMetaDataType != null;
  }

  public void setContractMetaDataTypeIsSet(boolean value) {
    if (!value) {
      this.contractMetaDataType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_NAME:
      if (value == null) {
        unsetTemplateName();
      } else {
        setTemplateName((String)value);
      }
      break;

    case TEMPLATE_TYPE:
      if (value == null) {
        unsetTemplateType();
      } else {
        setTemplateType((String)value);
      }
      break;

    case CONTRACT_META_DATA_TYPE:
      if (value == null) {
        unsetContractMetaDataType();
      } else {
        setContractMetaDataType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_NAME:
      return getTemplateName();

    case TEMPLATE_TYPE:
      return getTemplateType();

    case CONTRACT_META_DATA_TYPE:
      return getContractMetaDataType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_NAME:
      return isSetTemplateName();
    case TEMPLATE_TYPE:
      return isSetTemplateType();
    case CONTRACT_META_DATA_TYPE:
      return isSetContractMetaDataType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateTypeMismatchException)
      return this.equals((TemplateTypeMismatchException)that);
    return false;
  }

  public boolean equals(TemplateTypeMismatchException that) {
    if (that == null)
      return false;

    boolean this_present_templateName = true && this.isSetTemplateName();
    boolean that_present_templateName = true && that.isSetTemplateName();
    if (this_present_templateName || that_present_templateName) {
      if (!(this_present_templateName && that_present_templateName))
        return false;
      if (!this.templateName.equals(that.templateName))
        return false;
    }

    boolean this_present_templateType = true && this.isSetTemplateType();
    boolean that_present_templateType = true && that.isSetTemplateType();
    if (this_present_templateType || that_present_templateType) {
      if (!(this_present_templateType && that_present_templateType))
        return false;
      if (!this.templateType.equals(that.templateType))
        return false;
    }

    boolean this_present_contractMetaDataType = true && this.isSetContractMetaDataType();
    boolean that_present_contractMetaDataType = true && that.isSetContractMetaDataType();
    if (this_present_contractMetaDataType || that_present_contractMetaDataType) {
      if (!(this_present_contractMetaDataType && that_present_contractMetaDataType))
        return false;
      if (!this.contractMetaDataType.equals(that.contractMetaDataType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TemplateTypeMismatchException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TemplateTypeMismatchException typedOther = (TemplateTypeMismatchException)other;

    lastComparison = Boolean.valueOf(isSetTemplateName()).compareTo(typedOther.isSetTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateName, typedOther.templateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateType()).compareTo(typedOther.isSetTemplateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateType, typedOther.templateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractMetaDataType()).compareTo(typedOther.isSetContractMetaDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractMetaDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractMetaDataType, typedOther.contractMetaDataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateTypeMismatchException(");
    boolean first = true;

    sb.append("templateName:");
    if (this.templateName == null) {
      sb.append("null");
    } else {
      sb.append(this.templateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateType:");
    if (this.templateType == null) {
      sb.append("null");
    } else {
      sb.append(this.templateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractMetaDataType:");
    if (this.contractMetaDataType == null) {
      sb.append("null");
    } else {
      sb.append(this.contractMetaDataType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateTypeMismatchExceptionStandardSchemeFactory implements SchemeFactory {
    public TemplateTypeMismatchExceptionStandardScheme getScheme() {
      return new TemplateTypeMismatchExceptionStandardScheme();
    }
  }

  private static class TemplateTypeMismatchExceptionStandardScheme extends StandardScheme<TemplateTypeMismatchException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateTypeMismatchException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateName = iprot.readString();
              struct.setTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateType = iprot.readString();
              struct.setTemplateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_META_DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractMetaDataType = iprot.readString();
              struct.setContractMetaDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateTypeMismatchException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.templateName != null) {
        oprot.writeFieldBegin(TEMPLATE_NAME_FIELD_DESC);
        oprot.writeString(struct.templateName);
        oprot.writeFieldEnd();
      }
      if (struct.templateType != null) {
        oprot.writeFieldBegin(TEMPLATE_TYPE_FIELD_DESC);
        oprot.writeString(struct.templateType);
        oprot.writeFieldEnd();
      }
      if (struct.contractMetaDataType != null) {
        oprot.writeFieldBegin(CONTRACT_META_DATA_TYPE_FIELD_DESC);
        oprot.writeString(struct.contractMetaDataType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateTypeMismatchExceptionTupleSchemeFactory implements SchemeFactory {
    public TemplateTypeMismatchExceptionTupleScheme getScheme() {
      return new TemplateTypeMismatchExceptionTupleScheme();
    }
  }

  private static class TemplateTypeMismatchExceptionTupleScheme extends TupleScheme<TemplateTypeMismatchException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateTypeMismatchException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTemplateName()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateType()) {
        optionals.set(1);
      }
      if (struct.isSetContractMetaDataType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTemplateName()) {
        oprot.writeString(struct.templateName);
      }
      if (struct.isSetTemplateType()) {
        oprot.writeString(struct.templateType);
      }
      if (struct.isSetContractMetaDataType()) {
        oprot.writeString(struct.contractMetaDataType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateTypeMismatchException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.templateName = iprot.readString();
        struct.setTemplateNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateType = iprot.readString();
        struct.setTemplateTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractMetaDataType = iprot.readString();
        struct.setContractMetaDataTypeIsSet(true);
      }
    }
  }

}

